{"result": [{"answers": [{"content": "", "id": 61764546, "owner_tier": 0.9, "score": -7.283321194464676e-12}, {"content": "Let's say you're an airline. You build an airplane. You install seats in it. Then, you fill the plane up with passengers and send it somewhere. The passengers disembark. Next day, you re-use the same plane, and same seats, but with different passengers this time. The plane is your function. The parameters are the seats. The arguments are the passengers that go in those seats.", "id": 21067354, "owner_tier": 0.5, "score": 0.02403495993445011}, {"content": "I'm still not happy with all these answers. They all start talking about \"function declarations\" and my monkey brain has already wandered off and started thinking about unicorns. That doesn't help me remember at all, it's just the definition. I want something that I can immediately and forever hold in my head. The only answer here that I quickly understand is: \"Arguments are actual values that are passed in\". Arguments are easier to define and as long as you know what they are then you know parameters are the other. The other way I can think of it is: Simplified down to: Arguments outside, parameters inside If any one wants to disagree with me, you can leave your arguments outside ;)", "id": 72799457, "owner_tier": 0.5, "score": 0.003641660589949017}, {"content": "Arguments are actual values passed to parameters.", "id": 74946446, "owner_tier": 0.3, "score": 0.003641660589949017}, {"content": "According to Joseph's Alabahari book \"C# in a Nutshell\" (C# 7.0, p. 49) : In some human languages (afaik Italian, Russian) synonyms are widely used for these terms. In my university professors use both kind of names.", "id": 48330590, "owner_tier": 0.5, "score": 0.0021849963510560816}, {"content": "I thought it through and realized my previous answer was wrong. Here's a much better definition {Imagine a carton of eggs: A pack of sausage links: And a maid } These represent elements of a Function needed for preparation called : (use any name: Lets say Cooking is the name of my function).  A Maid is a method .  ( You must __call_ or ask this method to make breakfast)(The act of making breakfast is a Function called Cooking)_ Eggs and sausages are Parameters : (because the number of eggs and the number of sausages you want to eat is __variable_ .)_ Your decision is an Argument :  It represents the __Value_ of the chosen number of eggs and/or sausages you are Cooking ._ {Mnemonic} _\" When you call the maid and ask her to make breakfast, she __argues_ with you about how many eggs and sausages you should eating. She's concerned about your cholesterol\" __ ( Arguments , then,  are the values for the combination of Parameters you have declared and decided to pass to your Function )", "id": 47738789, "owner_tier": 0.1, "score": 0.001456664231609614}, {"content": "Simple:", "id": 43602455, "owner_tier": 0.5, "score": 0.14712308812090313}, {"content": "Parameters are variables that are used to store the data that's passed into a function for the function to use. Arguments are the actual data that's passed into a function when it is invoked:", "id": 45325837, "owner_tier": 0.1, "score": 0.0007283321121631463}, {"content": "Yes! Parameters and Arguments have different meanings, which can be easily explained as follows: Function Parameters are the names listed in the function definition. Function Arguments are the real values passed to (and received by) the function.", "id": 44798271, "owner_tier": 0.5, "score": 0.004369992709395485}, {"content": "The formal parameters for a function are listed in the function declaration and are used in the body of the function definition. A formal parameter (of any sort) is a kind of blank or placeholder that is filled in with something when the function is called. An argument is something that is used to fill in a formal parameter. When you write down a function call, the arguments are listed in parentheses after the function name. When the function call is executed, the arguments are plugged in for the formal parameters. The terms call-by-value and call-by-reference refer to the mechanism that is used in the plugging-in process. In the call-by-value method only the value of the argument is used. In this call-by-value mechanism, the formal parameter is a local variable that is initialized to the value of the corresponding argument. In the call-by-reference mechanism the argument is a variable and the entire variable is used. In the call- by-reference mechanism the argument variable is substituted for the formal parameter so that any change that is made to the formal parameter is actually made to the argument variable.", "id": 44516192, "owner_tier": 0.1, "score": 0.0007283321121631463}, {"content": "Logically speaking,we're actually talking about the same thing.\nBut I think a simple metaphor would be helpful to solve this dilemma.  If the metaphors can be called various connection point we can equate them to plug points on a wall.\nIn this case we can consider parameters and arguments as follows; Parameters are the sockets of the plug-point which may take various different shapes. But only certain types of plugs fit them.\nArguments will be the actual plugs that would be plugged into the plug points/sockets to activate certain equipments.", "id": 43695598, "owner_tier": 0.3, "score": 0.002913328470502549}, {"content": "Parameters and Arguments All the different terms that have to do with parameters and arguments\n  can be confusing. However, if you keep a few simple points in mind,\n  you will be able to easily handle these terms. Source: Absolute C++, Walter Savitch That is, ", "id": 43252753, "owner_tier": 0.7, "score": 0.0058266569482884195}, {"content": "Parameters are the variables received by a function.Hence they are visible in function declaration.They contain the variable name with their data type.\nArguments are actual values which are passed to another function. thats why we can see them in function call. They are just values without their datatype ", "id": 40832360, "owner_tier": 0.3, "score": 0.0007283321121631463}, {"content": "When we create the method (function) in Java, the method like this.. data-type name of the method (data-type variable-name) In the parenthesis, these are the parameters, and when we call the method (function) we pass the value of this parameter, which are called the arguments.", "id": 36172609, "owner_tier": 0.1, "score": 0.0021849963510560816}, {"content": "Oracle's Java tutorials define this distinction thusly:\n\"Parameters refers to the list of variables in a method declaration. Arguments are the actual values that are passed in when the method is invoked. When you invoke a method, the arguments used must match the declaration's parameters in type and order.\" A more detailed discussion of parameters and arguments: \nhttps://docs.oracle.com/javase/tutorial/java/javaOO/arguments.html", "id": 35923448, "owner_tier": 0.1, "score": 0.002913328470502549}, {"content": "In editing, I'm often put off at how people forget: structure languages are based on natural languages.  A \"parameter\" is a placeholder. They set the response format, in spoken language. By definition, it's party to the call, limiting the response. An \"argument\" is a position that is being considered. You argue your opinion: you consider an argument.  The thematic role of an argument is agent.  The thematic role of parameter is recipient.  Think of the argument as the male part, making the parameter the female part. The argument goes into the parameter.  A parameter is usually used in definitions. An argument is usually used in invocations.  Finish the sentence to make it less dissonant. (A) Speaking of a definition: (B) Speaking of an invocation: (A)  (B)  As you can imagine, after answering: in spoken language, these words will sometimes produce identical responses!  So, as a rule:  Usually if someone wants parameter information, they want to know more about the type, the variable name, etc. They may become confused if you only give example arguments. ", "id": 23992345, "owner_tier": 0.5, "score": 0.009468317545520757}, {"content": "An argument is an instantiation of a parameter.", "id": 22472316, "owner_tier": 0.5, "score": 0.004369992709395485}, {"content": "They both dont have much difference in usage in C, both the terms are used\nin practice.\n    Mostly arguments are often used with functions. The value passed with the function calling statement is called the argument, And the parameter would be the variable which copies the value in the function definition (called as formal parameter).     In the above code num1 and num2 are formal parameters and a and b are actual arguments.", "id": 19619127, "owner_tier": 0.1, "score": 0.002913328470502549}, {"content": "This example might help.", "id": 18447280, "owner_tier": 0.5, "score": 0.008011653306627821}, {"content": "Or even simpler... Arguments in ! Parameters out !", "id": 17120743, "owner_tier": 0.5, "score": 0.0021849963510560816}, {"content": "A parameter is a variable in a method definition. When a method is called, the arguments are the data you pass into the method's parameters.", "id": 156787, "owner_tier": 0.5, "score": 0.9999999999927167}, {"content": "There is already a Wikipedia entry on the subject (see Parameter) that defines and distinguishes the terms parameter and argument. In short, a parameter is part of the function/procedure/method signature and an argument is the actual value supplied at run-time and/or call-site for the parameter.  The Wikipedia article also states that the two terms are often used synonymously (especially when reasoning about code informally): Although parameters are also commonly\n  referred to as arguments, arguments\n  are more properly thought of as the\n  actual values or references assigned\n  to the parameter variables when the\n  subroutine is called at runtime. Given the following example function in C that adds two integers, x and y would be referred to as its parameters: At a call-site using add, such as the example shown below, 123 and 456 would be referred to as the arguments of the call. Also, some language specifications (or formal documentation) choose to use parameter or argument exclusively and use adjectives like formal and actual instead to disambiguate between the two cases. For example, C/C++ documentation often refers to function parameters as formal arguments and function call arguments as actual arguments. For an example, see \u201cFormal and Actual Arguments\u201d in the Visual C++ Language Reference. ", "id": 156859, "owner_tier": 0.9, "score": 0.06627822286234523}, {"content": "The terms are somewhat interchangeable. The distinction described in other answers is more properly expressed with the terms formal parameter for the name used inside the body of the function and parameter for the value supplied at the call site (formal argument and argument are also common). Also note that, in mathematics, the term argument is far more common and parameter usually means something quite different (though the parameter in a parametric equation is essentially the argument to two or more functions).", "id": 156875, "owner_tier": 0.9, "score": 0.005098324828841952}, {"content": "A parameter is something you have to fill in when you call a function. What you put in it is the argument.  Simply set: the argument goes into the parameter, an argument is the value of the parameter. A bit more info on:\nhttp://en.wikipedia.org/wiki/Parameter_(computer_science)#Parameters_and_arguments", "id": 156785, "owner_tier": 0.5, "score": 0.02621995629278951}], "link": "https://stackoverflow.com/questions/156767/whats-the-difference-between-an-argument-and-a-parameter", "question": {"content": "When verbally talking about methods, I'm never sure whether to use the word argument or parameter or something else. Either way the other people know what I mean, but what's correct, and what's the history of the terms? I'm a C# programmer, but I also wonder whether people use different terms in different languages. For the record I'm self-taught without a background in Computer Science. (Please don't tell me to read Code Complete because I'm asking this for the benefit of other people who don't already have a copy of Steve McConnell's marvelous book.)", "id": 156767, "title": "What&#39;s the difference between an argument and a parameter?", "traffic_rate": 78}, "saved_time": 1721101432, "source": "stackoverflow", "tags": ["parameters", "language-agnostic", "arguments", "terminology"]}, {"answers": [{"content": "An argument is a value passed to the function during the function call which is received in corresponding parameter defined in function header. For example:-\n#Program to find the sum of first n natural numbers", "id": 76362108, "owner_tier": 0.1, "score": -5e-09}, {"content": "Parameters are the variables that accept within the function definition. Arguments are the values that pass into the function when it is called. For example, In above function, param_1 and param_2 are considered as parameters. The arg_1 and arg_2 are the arguments. Usually when we call a function with passing arguments it is called as Argument parsing but sometimes it is also referred as parameter passing.", "id": 76362105, "owner_tier": 0.1, "score": 0.999999995}], "link": "https://stackoverflow.com/questions/76362069/what-is-the-difference-between-argument-and-parameter-in-python-functions-with-r", "question": {"content": "are these two terms argument and parameter same or they have different meanings in python functions? Please help me with some examples also. can we call actual parameter or actual argument?\ncan we call formal parameter or formal argument?", "id": 76362069, "title": "what is the difference between argument and parameter in python functions with reference of actual and formal parameter", "traffic_rate": 525}, "saved_time": 1721101432, "source": "stackoverflow", "tags": ["python", "parameters", "arguments"]}, {"answers": [{"content": "Generally when people say parameter/argument they mean the same thing, but the main difference between them is that the parameter is what is declared in the function, while an argument is what is passed through when calling the function. Here, the parameters are a and b, and the arguments being passed through are 5 and 4. Since Python is a dynamically typed language, we do not need to declare the types of the parameters when declaring a function (unlike in other languages such as C). Thus, we can not control what exact type is passed through as an argument to the function. For example, in the above function, we could do add(\"hello\", \"hi\"). This is where functions such as isinstance() are helpful because they can determine the type of an object. For example, if you do isinstance(\"hello\", int), it will return False since \"hello\" is a string.", "id": 47169062, "owner_tier": 0.9, "score": 0.9999999998076923}], "link": "https://stackoverflow.com/questions/47169033/parameter-vs-argument-python", "question": {"content": "So I'm still pretty new to Python and I am still confused about using a parameter vs an argument. For example, how would I write a function that accepts a string as an argument?", "id": 47169033, "title": "Parameter vs Argument Python", "traffic_rate": 27}, "saved_time": 1721101432, "source": "stackoverflow", "tags": ["python", "string", "function", "parameters", "arguments"]}, {"answers": [], "link": "https://stackoverflow.com/questions/63941547/what-is-the-difference-between-a-variable-and-a-parameter", "question": {"content": "I am learning python 3 and programming in general for the first time, but I can't seem to distinguish a parameter and a variable?", "id": 63941547, "title": "What is the difference between a variable and a parameter", "traffic_rate": 12049}, "saved_time": 1721101432, "source": "stackoverflow", "tags": ["python", "python-3.x", "variables", "parameters"]}, {"answers": [{"content": "A parameter is the variable which is part of the method\u2019s signature (method declaration).  An argument is an expression used when calling the method. Consider the following code: Here i and f are the parameters, and anInt and 2.0 are the arguments.", "id": 1788926, "owner_tier": 0.5, "score": 0.9999999999919421}], "link": "https://stackoverflow.com/questions/1788923/parameter-vs-argument", "question": {"content": "I got parameter and argument kind of mixed up and did not really pay attention to when to use one and when to use the other.   Can you please tell me? ", "id": 1788923, "title": "&quot;Parameter&quot; vs &quot;Argument&quot;", "traffic_rate": 103}, "saved_time": 1721101432, "source": "stackoverflow", "tags": ["function", "parameters", "language-agnostic", "arguments", "terminology"]}, {"answers": [], "link": "https://stackoverflow.com/questions/51054490/how-do-i-differentiate-parameters-and-arguments-in-python", "question": {"content": "I just started self-learning python and have encountered these two problems:\n\n To my understanding, an argument is a value to a function and a parameter is a variable whose value will be supplied when the function is called.  My answer to question #10 was incorrect and I wasn't clear about #8 either. It would be greatly appreciated if anyone could clarify my confusions about an argument and a parameter using these problems.", "id": 51054490, "title": "How do I differentiate parameters and arguments in python?", "traffic_rate": 4172}, "saved_time": 1721101432, "source": "stackoverflow", "tags": ["python", "python-3.x"]}, {"answers": [{"content": "whenever you call a function suppose the above values 'x', 'y' are arguments and 'a', 'b' are parameters. During function/method calling those variables are called as arguments because you can pass anything like 'x', 'y' or maybe 'p', 'q' etc. But at the function definition those variables are called parameters because they would just be for that function only that is like a limit to that function.  In Python there is concept of position arguments, default arguments, non-default arguments, keyword arguments and named arguments. Here in above function 'b' is a default parameter its value by default would be 10, if whenever the function f2 is called and only 1 value of 'a' is going to come up like f2(x) and variable would 'b' be 10 and for 'a' = 10. And in the f2(x, y) the f2 function's parameters 'a', 'b' will be 10, 20 respectively.  Always remember that at function call position arguments come first then keyword/named parameters must be later on, because the position matters. Same at the function definition first non-default parameters then default ones. The non-defaults one would correspond to positional ones and rest one would correspond to remaining depending on your function call. At case 1 of function call f2(x), here 'x' is the positional argument during function call and 'a' at the function definition is positional parameter and 'y' is the default parameter. At case 2 of function call f2(x, y), both 'x' and 'y' are positional arguments and at function definition 'a' and 'b' both are positional parameters now, as 'y' would be passing value 20 to parameter 'b'. The default value of any function definition would be took only if no argument is passed for that parameter at any function call like case 1 f1(x) or f1(p) then default would be took that is 'b' = 10 and 'a' would be 'x' or 'p'. Next suppose, the above call f3, its arguments 'a' as 5 and 'b' as 15 are keyword/named arguments because they have name/key associated for its value. 'a' is linked as a name/key to value 5 and same for 'b' as 'b' is linked as a name/key to value '15'. Same you can think of like a dictionary. Here during function call make sure names/keys must be same as function definition else we would get an error. Also ensure that no repetition of same arguments/parameters at function call or at function definition will also give us error. And you can specify these keyword/named based arguments in any order.\nlike in case 2 we have f3(b=100, a=200). At function definition the name/key 'a' would correspond to value 200 and the name/key 'b' would correspond to value 100. Here in f4 function definition 'a' and 'b' are having default values 1 and 2.  At case 1 the defaults values would be took. At case 2 only 'b' as name/key value 20 is passed which would correspond to 'b' at function definition, 'a' and 'b' would be 1, 20 respectively. At case 3 only 'a' as name/key value 10 is passed which would correspond to 'a' at function definition, 'a' and 'b' would be 10, 2 respectively. At case 4 both 'a' and 'b' as passed as name/key values 50, 75 which would correspond to both 'a' and 'b' at function definition, 'a' and 'b' would be 75 and 50 respectively. Remember that the name/key arguments only applies during function calling like f4(a=3, b=4). And during function definition def f5(a, b=20) here 'a' is non-default parameter or positional parameter, and 'b' is the default parameter as default value would be took if no value for 'b' is passed during the function call f5.", "id": 48048161, "owner_tier": 0.3, "score": 0.9999999966666667}, {"content": "Technically, parameters are variables in a function definition and arguments are the actual values given to the variables at the point of call. For example: The variable arg in the function definition is the parameter and the value Python in the function call is an argument to that parameter. Wikipedia has a nice description: Parameters and arguments", "id": 48048951, "owner_tier": 0.5, "score": -3.3333333333333334e-09}], "link": "https://stackoverflow.com/questions/48047865/what-is-the-difference-between-argument-and-parameter-in-python-perspective-not", "question": {"content": "I heard that argument means the method arguments, ( for example in below code) a and b are arguments and c and d are parameters. Correct me if I am wrong? Then in the below code  The error message is: SyntaxError: non-default argument follows default argument And also in below code The error message is: SyntaxError: non-keyword arg after keyword arg In both error messaeges, 'no-default argument follows default argument' and 'non-keyword arg after keyword arg', why there is no mention of paramter?  It caused the confusion to me many times with both the error messages so aksing this question. Is there any specific reason for error message to be like this. and also could you let me know how to remember the correct error message corresponding to that error. Thank you.", "id": 48047865, "title": "What is the difference between argument and parameter in python perspective [not duplicate :) ]?", "traffic_rate": 1434}, "saved_time": 1721101432, "source": "stackoverflow", "tags": ["python", "python-2.7"]}, {"answers": [{"content": "Per the official documentation: Parameters are defined by the names that appear in a function definition, whereas arguments are the values actually passed to a function when calling it. Parameters define what types of arguments a function can accept. For example, given the function definition: foo, bar and kwargs are parameters of func. However, when calling func, for example: the values 42, 314, and somevar are arguments. The glossary defines them as: Python doesn't really have \"variables\" like some other languages - it has \"names\" referring to \"objects\". See e.g. \"Code like a Pythonista\" and \"Facts and myths about Python names and values\".", "id": 24367845, "owner_tier": 0.9, "score": 0.9999999980000001}, {"content": "Take it this way: Parameter:\nA parameter represents a value that the procedure expects you to pass when you call it. The procedure's declaration defines its parameters. Argument:\nAn argument represents the value that you pass to a procedure parameter when you call the procedure. The calling code supplies the arguments when it calls the procedure. Example: Now while calling the function Same goes with Python, while declaration, they are parameters, while calling they are arguments. Some may differ with what i have written, but this is how it is actually known in programming world.", "id": 24367918, "owner_tier": 0.5, "score": -1.999999987845058e-09}], "link": "https://stackoverflow.com/questions/24367715/parameter-vs-arguments-finally-what-are-they", "question": {"content": "I am a beginner in python programming and recently i came across functions,parameters,arguments and... I have done a lot of research on Parameters and Arguments(Even checked the answers of similar past questions on StackOverflow)but i couldn't get their meanings. Some say,parameters are variables which we give them to functions while we are defining them and arguments are values that are passed in function once we given them to the function in order to run the function.While some other say no,it's not like that.Parameters and Arguments are same and do the same task... Can anyone tell me the meaning Parameters and Arguments in a clear way? Are Parameters and Arguments considered variables? For what kind of purpose do we use them? Please don't explain too much complicated,i am a beginner. Thank you so much.", "id": 24367715, "title": "Parameter vs Arguments ? finally,what are they?", "traffic_rate": 1160}, "saved_time": 1721101432, "source": "stackoverflow", "tags": ["python", "parameters", "arguments"]}, {"answers": [{"content": "", "id": 61764546, "owner_tier": 0.9, "score": -7.283321194464676e-12}, {"content": "Let's say you're an airline. You build an airplane. You install seats in it. Then, you fill the plane up with passengers and send it somewhere. The passengers disembark. Next day, you re-use the same plane, and same seats, but with different passengers this time. The plane is your function. The parameters are the seats. The arguments are the passengers that go in those seats.", "id": 21067354, "owner_tier": 0.5, "score": 0.02403495993445011}, {"content": "I'm still not happy with all these answers. They all start talking about \"function declarations\" and my monkey brain has already wandered off and started thinking about unicorns. That doesn't help me remember at all, it's just the definition. I want something that I can immediately and forever hold in my head. The only answer here that I quickly understand is: \"Arguments are actual values that are passed in\". Arguments are easier to define and as long as you know what they are then you know parameters are the other. The other way I can think of it is: Simplified down to: Arguments outside, parameters inside If any one wants to disagree with me, you can leave your arguments outside ;)", "id": 72799457, "owner_tier": 0.5, "score": 0.003641660589949017}, {"content": "Arguments are actual values passed to parameters.", "id": 74946446, "owner_tier": 0.3, "score": 0.003641660589949017}, {"content": "An argument is an instantiation of a parameter.", "id": 22472316, "owner_tier": 0.5, "score": 0.004369992709395485}, {"content": "They both dont have much difference in usage in C, both the terms are used\nin practice.\n    Mostly arguments are often used with functions. The value passed with the function calling statement is called the argument, And the parameter would be the variable which copies the value in the function definition (called as formal parameter).     In the above code num1 and num2 are formal parameters and a and b are actual arguments.", "id": 19619127, "owner_tier": 0.1, "score": 0.002913328470502549}, {"content": "This example might help.", "id": 18447280, "owner_tier": 0.5, "score": 0.008011653306627821}, {"content": "Or even simpler... Arguments in ! Parameters out !", "id": 17120743, "owner_tier": 0.5, "score": 0.0021849963510560816}, {"content": "A parameter is a variable in a method definition. When a method is called, the arguments are the data you pass into the method's parameters.", "id": 156787, "owner_tier": 0.5, "score": 0.9999999999927167}, {"content": "There is already a Wikipedia entry on the subject (see Parameter) that defines and distinguishes the terms parameter and argument. In short, a parameter is part of the function/procedure/method signature and an argument is the actual value supplied at run-time and/or call-site for the parameter.  The Wikipedia article also states that the two terms are often used synonymously (especially when reasoning about code informally): Although parameters are also commonly\n  referred to as arguments, arguments\n  are more properly thought of as the\n  actual values or references assigned\n  to the parameter variables when the\n  subroutine is called at runtime. Given the following example function in C that adds two integers, x and y would be referred to as its parameters: At a call-site using add, such as the example shown below, 123 and 456 would be referred to as the arguments of the call. Also, some language specifications (or formal documentation) choose to use parameter or argument exclusively and use adjectives like formal and actual instead to disambiguate between the two cases. For example, C/C++ documentation often refers to function parameters as formal arguments and function call arguments as actual arguments. For an example, see \u201cFormal and Actual Arguments\u201d in the Visual C++ Language Reference. ", "id": 156859, "owner_tier": 0.9, "score": 0.06627822286234523}, {"content": "The terms are somewhat interchangeable. The distinction described in other answers is more properly expressed with the terms formal parameter for the name used inside the body of the function and parameter for the value supplied at the call site (formal argument and argument are also common). Also note that, in mathematics, the term argument is far more common and parameter usually means something quite different (though the parameter in a parametric equation is essentially the argument to two or more functions).", "id": 156875, "owner_tier": 0.9, "score": 0.005098324828841952}, {"content": "A parameter is something you have to fill in when you call a function. What you put in it is the argument.  Simply set: the argument goes into the parameter, an argument is the value of the parameter. A bit more info on:\nhttp://en.wikipedia.org/wiki/Parameter_(computer_science)#Parameters_and_arguments", "id": 156785, "owner_tier": 0.5, "score": 0.02621995629278951}], "link": "https://stackoverflow.com/questions/156767/whats-the-difference-between-an-argument-and-a-parameter", "question": {"content": "When verbally talking about methods, I'm never sure whether to use the word argument or parameter or something else. Either way the other people know what I mean, but what's correct, and what's the history of the terms? I'm a C# programmer, but I also wonder whether people use different terms in different languages. For the record I'm self-taught without a background in Computer Science. (Please don't tell me to read Code Complete because I'm asking this for the benefit of other people who don't already have a copy of Steve McConnell's marvelous book.)", "id": 156767, "title": "What&#39;s the difference between an argument and a parameter?", "traffic_rate": 78}, "saved_time": 1721101432, "source": "stackoverflow", "tags": ["parameters", "language-agnostic", "arguments", "terminology"]}, {"answers": [], "link": "https://www.reddit.com/r/learnpython/comments/170i8vf/please_eli5_how_functions_parametersarguments_work/", "question": {"content": "[deleted]", "id": "170i8vf", "title": "Please ELI5, how function's parameters/arguments work", "traffic_rate": 153.12444444444444}, "saved_time": 1721101432, "source": "reddit", "tags": []}, {"answers": [{"content": "The relationship between a parameter and an argument is like the relationship between a variable and a value.\n\nHave you learned how to write your own functions in Python yet? When you write a function, it looks like this.\n\n    def say_hi_to(person):\n      print(\"Hello, \" + person)\n\nIn this example, the `person` variable is the _parameter_ of the function. When someone calls this function with the string `\"Alice\"`, that string is the _argument_ passed in to the function.\n\nEdit: Important note, people often use the two terms interchangeably. It's usually clear from context what they mean, so don't get confused if someone gets the terms wrong.\n\nexactly, and `person` is a variable that is given a value by the user, in your case, `\"Alice\"`. right? I wanted to use the example of soaps because we have different types of soaps. just like names\n\nI'm learning defining functions right now btw\n\nYes, the same thing could be done with a function that takes in a type of soap. The `soap` variable in the function definition would be the parameter. The specific soap passed to the function would be the argument.\n\nThe terms are generally used specifically with functions. Your example doesn't really include functions, so I would say all those are just variables, and not parameters.\n\noh ok, thank you.\n\n    def foam(soap):\n        print(\"I'm adding\", soap, \"and water to make some foam.\")\n    foam(showergel)\n\nthis should be the right one\n\nbut now I'm not understanding another thing. Why does:\n\n    def hello(target):\n        print(\"Hello\", target)\n    name = \"Alan\" \n    hello(name)\n\ngives the output `Hello Alan`? Shouldn't the parameter `target` and the variable we assign to it be the same? Why can I use `target` and `name` interchangeably?\n\nYour indentation got messed up, so I'll try to rewrite it.\n\n    def hello(target):\n      print(\"Hello\", target)\n    \n    name = \"Alan\"\n    hello(name)\n\nWhat's going on here is that the value `\"Alan\"` is assigned to the variable `name`. When you call `hello(name)`, what you're telling Python to do is take the value from `name` and pass it to `hello`. The value of `name` is now an _argument_ being passed into the `hello` function. The _parameter_ `target` takes on the value of that _argument_.\n\nTake a look at this. It might clear things up for you.\n\n    def hello(target):\n      print(\"Hello\", target)\n    \n    name1 = \"Alan\"\n    name2 = \"Betty\"\n    name3 = \"Colin\"\n\n    hello(name1)\n    hello(name2)\n    hello(name3)\n\n    hello(\"Deborah\")\n\nname = \"Alan\" hello(name)\n\nthis does not compile/run, if you meant writing it on two lines:\n\nthe first line `name=\"alan\"` set the variable \"name\" with the value \"alan\"\n\nthe second one calls the function `hello` that you declared before with the value stored in the variable \"name\" as argument, so it is called with \"alan\"\n\nhello(name) becomes hello(\"alan\") .\n\nyou need to think functions like isolated block: imagine like it's a phone call:\n\nyour main program makes a \"phone call\" to the \"hello\" service, the \"hello service\" require \"one word\", you use name wich contains alan so you call at phone Mr. Hello and tell him \"i'm using your service with the first argument \"alan\".\n\nthe guy on the other side reads what he is supposed to do with that string and the definition suggests that this string goes inside \"target\" variable, right aftert there is \"print(target)\" so it print \"alan\".\n\nthe core idea of functions is to group parts of code that that you might need to use many times, for example in real life a function might be \"give me  water\" which is composed by many actions: stand up, walk, pick it up, give it to me\", that's a lot of stuff! so we define this function \"give me water\" that has all those instructions inside so that i can just say \"give me water\" every time i need it.\n\nbut the main program and what is inside the function are two different things and they don't know eachother, they don't communicate except for the arguments.  \n\nthe value that you pass to a function can be a copy of the original variable (pass by value) or can be a reference to the original variable (pass by reference)\n\nsearch for \"variable scope\"\n\nWhen a name is given as an argument, Python looks up the value associated with the name, and gives that value to the function. `target` and `name` are referring to the same object.\n\nThe order of lookups/stores:\n\n - The `\"Alan\"` object is associated with the name `name`.\n - `name` is given as an argument to `hello`. Its value, `\"Alan\"`, is looked up and given to `hello`.\n - The function is called, and it associates the `\"Alan\"` object that was given as an argument with the name `target`.\n - `target` is given as an argument to `print`. Its value, again `\"Alan\"`, is looked up and given to `print`.\n\nSo, it's basically as if `target = name` was run when the function was called (not actually true, but it may be helpful when thinking about simple cases).\n\noh ok, thank you, i didnt know we could also do that. thanks for your availability!\n\nThank you a lot!!\n\nthank you!!\n\nThat's what functions are all about! They let you write little reuseable pieces of code.\n\nDid you happen to notice that `input` and `print` are basically just functions provided by Python that you're calling?\n\nOooohh right\u2026 I already heard that before but I collected all the dots now. So, by using the argument in the function definition and in the indented block we\u2019re just telling the program how to act with a certain input\u2026\n\nExactly.\n\nThe indentation is how we tell Python which lines are part of the function and which aren't.\n\nThen, you can think of a function as a little program all to itself, and you can cause that little program to run by _calling_ the function. You can make it run with different input each time.", "id": "jlz7gow", "owner_tier": 0.7, "score": 0.9999999995652173}, {"content": "Nope. Parameters are what you have as, well parameters in your function. Arguments are what you call a function with. \n\n    def foobar(bar): # bar is a parameter\n        print(bar)\n\n    foobar(\"what\") # we are passing \"what\" as an argument to function foobar\n\nSo we are calling function foobar with argument \u201dwhat\u201d which in this case is assigned to parameter bar.\n\nok, so we use the arguments and parameter classification only when it comes to defining a function, don't we?", "id": "jlz7ho9", "owner_tier": 0.5, "score": -4.3478260605327347e-10}], "link": "https://www.reddit.com/r/learnprogramming/comments/13u7xu0/difference_between_arguments_and_parameters/", "question": {"content": "I'm learning Python, and to get better some concepts I'm using the Feynman technique. I hope that what I'm about to say won't sound too silly.\n\nI'm deepening the concept of arguments and parameters. From the course I'm following, I know that they're used interchangeably and that a possible definition of the difference between the two may be this:\n\n>The distinction is that while *argument* is used with the data passed to the function when the function is called, *inside* the function the arguments are assigned to variables called *parameters*.\n\nI'm trying to understand this better. If I ask someone how to make foam, that person may answer: You can make foam by adding water and soap. Now, in the actual world, I don't just use *some* water and *some* soap: I can use tap water, rainwater, bottled water... as well as dish soap, shower gel, soap powder, and so on.\n\n    foam = water + soap #These are the parameters\n    \n    water = input(\"What kind of water are you using? \") \n    soap = input(\"What kind of soap are you using? \") \n    \n    #The inputs will be \"Tap water\" and \"Showergel\", which are, I guess, the arguments\n\nDid I get this right?\n\n&#x200B;\n\nP.S. I promise you I also have friends and a social life", "id": "13u7xu0", "title": "Difference between arguments and parameters.", "traffic_rate": 759.40625}, "saved_time": 1721101432, "source": "reddit", "tags": []}, {"answers": [{"content": "Why do you keep asking the same questions over and over again?\n\nI'm asking different questions about the same subject.", "id": "huuh4hn", "owner_tier": 0.5, "score": 0.49999999875}, {"content": "Let's be clear:\n\n    def my_function($id):\n        //do stuff with $id\n    \n    my_function(3);\n\n$id is the parameter, 3 is the argument.\n\n[From W3schools:](https://www.w3schools.com/python/python_functions.asp)\n\n>The terms parameter and argument can be used for the same thing: information that are passed into a function.  \n>  \n>From a function's perspective:  \n>  \n>A parameter is the variable listed inside the parentheses in the function definition.  \n>  \n>An argument is the value that is sent to the function when it is called.", "id": "huue5yl", "owner_tier": 0.7, "score": 0.99999999875}, {"content": "Parameters and arguments are not the same.\nparameter is a named variable passed into a function\nArgument is the value passed in the parameter.", "id": "huudqu2", "owner_tier": 0.5, "score": 0.62499999875}, {"content": "The terms \"argument\" and \"parameter\" are interchangeable.\n\nAnd why is that?\n\nBecause the great gods of Python have decreed it to be so.\n\nAnd can you explain how they can be interchangeable in terms of python?\n\nHe means that they are called the same thing. They literally are the same thing.", "id": "huud3kk", "owner_tier": 0.9, "score": -1.2499999924031613e-09}], "link": "https://www.reddit.com/r/learnpython/comments/sg7p3j/what_is_a_function_parameter_and_what_is_its/", "question": {"content": "And what is it's purpose with function arguments?", "id": "sg7p3j", "title": "What is a function parameter. And what is it's purpose with function arguments?", "traffic_rate": 153.12444444444444}, "saved_time": 1721101432, "source": "reddit", "tags": []}, {"answers": [{"content": "So, taking a swing at it....the parameter(s) in Python are just a way of telling the function that it should be receiving one or more objects/pieces of information.  How you write the function determines what type of object those things need to be.\n\nPer your example,  \ndef funct(param):  \nprint(param)\n\nCan be used with any type of object that can be printed out to the console; like:  \n\n\nfunc(23)  \nfunc(\"Hello, Timmy\")\n\nwill print out the value 23, and then the string \"Hello, Timmy\"\n\nWhat this, also, means is that you can assign things to variables and pass those variables in to the parameter spot (referred to as an argument when calling the function) and they will still be the object/type of object that you assigned earlier.\n\na = \\[2, 5, 7, 9\\]  \nfunc(a)\n\nwill print \\[2, 5, 7, 9\\] out to the console.\n\n&#x200B;\n\nDoes that help?\n\nI think this has helped. I'm going to go play around in the Python console with this.\nI think my confusion is when the function is the same, but I use different parameters...\nI'm such a novice that I'm extreme difficulty explaining my self.\n\nI'm so sorry everyone.\n\nThere's some confusion that comes from Python not being strongly typed, I suspect.  And, it's a small semantic difference but still an important one to understanding functions:\n\n  \n\"parameter\" is the definition of what data the function works with  \n\"argument\" is the actual data you pass in to the function when you call it  \n\n\nAs a programmer, you \\*define\\* parameters and you \\*use\\* (\"pass\") arguments.\n\nOk?\n\nAhh. Okay.\nSo I'm at my console now.\n\n    def display(message):\n        print(message)\n\n    def display(notice):\n        print(notice)\n\n    display(\"This is my message.\")\n\nAnd what comes out is a single line.\n\nSo... even though I am using different names/parameters.. the function uses the same argument for both... even though though it's two different variables, one argument...\nUm.\nSo it's not complicated is it? It's just I am wondering what good is that?\nIn my example, if I call display, I'm only calling the function, not the parameter, the parameter is just assigned the argument, and doesn't actually affect what the function does? Right?\n\nNo, not complicated; but, can be confusing to start with.\n\nOHHHHHH....ok, I see where I think you're getting confused....it's a common misunderstanding.\n\nNo.  The parameter and the argument do not have to use the same name.  Again, the parameter is something you define, as if you're saying \"Hey function, you're going to get one piece of information that I want you to do something with\".  So you can do  \n\n\ndef func(notice):  \nprint(notice)\n\nor \n\ndef func(a\\_thing):  \nprint(a\\_thing)  \n\n\nand as long as you pass a valid object as an \\*argument\\* when you call the function, it will do whatever it has been written to do.  if you call the function with an argument of 23,\n\nfunc(23)\n\nboth of the functions will work just fine because the value 23 is a valid object for print() to work on.\n\nSince Python is not a strictly typed language, you don't specify the type of data that your parameters will use; but, once you get further along, it is a good practice to name your parameters in such a way as anyone trying to call the function knows what data to use.  Like:  \n\n\nstudent = \"Billy Goat\"  \ndef who\\_is\\_that(name):  \nprint(f\"That is {name}, and he's eating the grass.\")\n\nwho\\_is\\_that(student)\n\nIn the definition, that parameter tells whoever is looking at it that the function takes one argument when it is called, and one can assume they should expect that argument to be a string.  In \\*this\\* case, there is nothing that requires a particular data type, so you would need additional logic to filter out other inputs, but it should serve as another example you can walk through.\n\nEven farther along, there's a push for using type hints in order to make reading, using and debugging functions simpler, which simply means adding an annotation of the 'type' of each of your parameters, like:\n\ndef func(name: str)  \n....\n\nThe ': str' part of that has no functional purpose, but it tells the reader that whomever wrote the function expects you to use it with a string object.\n\nSo..\n\n     def display(message):\n        print(message)\nAnd\n\n    def display(notice):\n        print(notice)\n\nAre not the same..\n\nBut if I call the funcrion\n\n    display(\"this is my message\")\n\nIt appears display(message) runs,\nWhile display(notice) is undefined.\n\nwherever you are assigning that string to 'message', you would have to assign it to 'notice' instead.\n\nIn this case, the variable names you are using are just placeholders for the string you're assigning to them.  If the value you have assigned to those variables is the same, then the output will be the same.\n\nnotice = \"this is my message\"  \nmessage = \"this is my message\n\ndef display(a\\_string):  \nprint(a\\_string)\n\n&#x200B;\n\ndisplay(notice)\n\ndisplay(message)\n\nwill output the same thing.  But, if you started with\n\nnotice = \"this is my message\"  \nmessage = 42\n\nand made those same function calls, the output would be\n\n\"this is my message\"  \n42\n\nOkay, and these are called default parameter values..\nClearly I am over complicating this.\nI just was thinking that by changing the parameter, that my function could be used for separate types of arguments.. Idk why...\n\nOverthinking a little bit, probably.  But, no, these would not be default parameters, those are slightly different.  This is just a parameter.\n\nSecondly, the function is what controls what kind of parameters you can pass. Dealing with this part first, consider this:\n\nnotice = \"This is my message\"  \nmessage = 42\n\ndef func(a\\_thing):  \nresult = a\\_thing - a\\_thing  \nprint(result)\n\nfunc(notice)  \nfunc(message)\n\nYou will get an error on the first one because you cannot subtract strings, whereas the second one would print out '0' in the console.\n\n&#x200B;\n\nFor default parameters, those are where you set a value, in the definition, that will be used \\*if the user does not supply an argument themselves\\*.  So,\n\n&#x200B;\n\nnotice = \"This is a user supplied argument\"\n\ndef message( a\\_thing = \"This is a default parameter\"):  \nprint(a\\_thing)\n\nmessage()  \nmessage(notice)\n\nHere, the person calling message (me) has not supplied any argument, themselves, so the default message is used in the first instance.  But, since I gave it my own value in the second instance, the default message is overridden and my message is used instead.", "id": "j73oroh", "owner_tier": 0.5, "score": 0.9999999992857143}, {"content": "1. Everything in Python is an object (including integers, lists, functions, classes, etc)\n2. Variables are just names that refer to objects\n3. An object can have several names that refer to it, but each name can only directly refer to a single object (although that object can be a collection of other objects, like in a list or tuple)\n4. An area of code where a set of names is accessible is called a namespace (modules (files) and functions both hold a local namespace, and a function can access its local namespace as well as the global namespace of the module it\u2019s being called in)\n5. When defining a function, the parameters define the names of the objects that get passed in to its local namespace (regardless of any extra names that may refer to those objects outside a function call), so those names can be used throughout the function (but are not accessible from outside the function)\n6. When calling a function the parameters are used to pass in objects\n    - this can be positionally, as in your example, or as keyword-arguments that specify which parameter name should be assigned to which object (e.g. `my_func(a, 3, param=[], param8=var)`) \n    - it doesn\u2019t matter if the objects are passed in as literals (e.g. 3, \"string\") or variables - just the object (the \u201cvalue\u201d) is passed in and bound to the relevant parameter name\n6. Python interprets code from top to bottom\n7. If you define a new function with the same name as some other object, then that name now refers to that function, and has no memory of what it used to refer to (just like if you do `a=3` and then later in your code do `a=4`)\n\nThank you so much,\nwith number 8\n\nWould you say that\n\n    def display(notice):\n        print(notice)\n\nAnd\n\n    def display(message):\n        print(message)\n\nAre the same?\n\nThey both define a function with a single parameter that gets printed when the function is called, and both definitions bind the created function to the name \u201cdisplay\u201d, so those definitions are at least very similar.\n\nSemantically, the different parameter names may make a difference to the implied expected usage for someone calling the function, and if the user wanted to pass in the parameter as a keyword argument they would need to use the relevant name per the function definition (so there\u2019s a minor difference in how the functions can be called).", "id": "j74e0g9", "owner_tier": 0.3, "score": -7.142857099446636e-10}, {"content": "Could you please explain your question further? I'm not sure i understand what was the problem with the srcond one or what you didnt understand in it.\n\nWhen I define the function and use a parameter, let's say I use two different parameters on the same function.\n\n    def display(message):\n        print(message)\n\n    display(\"this is your message.\")\n\n    def display(notice)\n        print(notice)\n\nDisplay, when called, just runs the same message.\n\nNot sure i understood. But if I did, yes, a paramater is essentialy a variable that only works inside the function. Did I understand correctly? Maybe explain what you expect?\n\nDefention of paramater in python - Parameters in python are\u00a0variables \u2014 placeholders for the actual values the function needs. When the function is called, these values are passed in as arguments. For example, the arguments passed into the function .\n\n    def display(message): # here message is a parameter\n        print(message)\n\n    display(\"hello\") # here you're calling the function with \"hello\" as argument\n\n    notice = \"me too\" # assign the value of \"me too\" to notice\n\n    display(notice) # call display function passing the argument notice\n\nline 6 function is missing `:` & `notice` is a parameter. each function should have a unique name, so there shouldn't be another function `display` in line 6.\n\nOkay, so.. the function has to have a unique parameter?\n\nWhich is why\n\n    def display(message):\n        print(message)\n\nAnd\n\n    def display(notice):\n        print(notice)\n\nProduced only one line?\nI saw I had a weak warning indicating notice wasn't defined.\nI thought I was using a unique function name by using an unique parameter.\n\nunique function name if it's in the same source code. example\n\n    def foo(msg):\n        print('hello', msg)\n\n    def foo(lol):\n        print('hi', lol)\n\n    foo('confused')\n\nwhich `foo` are you calling? it's same reason why variable names should be unique.\n\nSo the parameters are unique, but that doesn't matter..\nWhen I write a function, it needs to be unique.. so I gotta write the same function twice, with unique names    foo1(msg) and    foo2(lol)\n\nparameters are still variables & follow scope. \n\ntry this. note were using same parameter name but different function name.\n\n    def foo1(msg):\n        print('hello', msg)\n\n    def foo2(msg):\n        print('hi', msg)\n\n    foo1('not confused')\n\ne: \n\n> so I gotta write the same function twice, with unique names foo1(msg) and foo2(lol)\n\nusing your original code as example. if 2 functions does the same thing, why write 2 functions? why not use only 1 function?\n\nusing my code as example, parameters can be the same. search \"variable scope\".\n\nAlright, I will.\nI'll let you know in about 12 hrs.\n\nThanks again.", "id": "j73bkie", "owner_tier": 0.1, "score": 0.3571428564285714}, {"content": "It doesn't always have to be *named* \"parameter\", if that's what you're asking.\n\nA parameter is just a value sent to a function that the function can then do something with.  You can give it any legal Python name you choose.  It doesn't even have to match the name of the parameter in the part of the program that calls it, as long as you keep naming in the function consistent.  For example, this will work:\n\n    def multiply_by_seven(n):\n        print(7*n)\n\n    multiply_by_seven(6)\n    a = 20\n    multiply_by_seven(a)\n\nDoes this answer your question?\n\nI think I've failed at explaining my misunderstanding.\n\n    def display(message):\n        print(message)\n\n    display(\"this is your message.\")\n\nSo I defined the function, naming it, and I named the parameter.\nWhen we name the parameter, whatever value it receives always going to be named message?\nI just don't get the point or is there something I'm missing?\nA parameter is just a variable name, right?\nSo what if I have..\n\n    def display(notice)\n        print(notice)\n\nBut when I call display, what happens is it just runs  the parameters message and notice. Maybe this book is poor at explaining it...\n\nYes that's all parameters are, variables that are locally scoped to the function definition that get their value from the call site (or if there's a default specified, like `def display(msg = \"default\")`).\n\nBut, what \"point\" are you expecting that you don't understand?\n\nThe function gets some stuff as \u201cinput\u201d and presumably, you\u2019re gonna mention that stuff during the course of the function. So you should give it a name. That\u2019s all a parameter is, and once it\u2019s there, it works exactly the same as a name you\u2019d created with an equals.", "id": "j73brqk", "owner_tier": 0.3, "score": 0.2142857135714286}], "link": "https://www.reddit.com/r/learnpython/comments/10st3b6/please_help_me_understand_functions_and_parameters/", "question": {"content": "I am trying really hard to understand  specifically parameters.\nParticularly, when I define a function I.e.\n    def function(parameter):\n        print(parameter)\nAnd then call it\n    function(\"a simple string\")\nIs the parameter always going to be parameter?\nIt's receiving a value, right? So... Maybe I'm like mentally deficit... or overthinking this, but what if I do..\n\n    def function(parameter0, parameter1, parameter3)\n        print(parameter0, parameter1, parameter3)\n\nAnd then call the function\n\n    function(\"Does this cause an error?\", \"Must have exact values\", \"for each parameter?\")\n\n\nAm I over thinking this?\nI'm just following lessons from a PDF.\nPython for the absolute beginner\n\nI'm must confused and I'm not even sure how or why I'm confused.\n* Edit: formatting and typos\n* Update:\nThanks everyone for your help.\nI think I am understanding it. I believe I'm overthinking it, and over reacting.\nSorry for being difficult.", "id": "10st3b6", "title": "Please help me understand functions and parameters..", "traffic_rate": 153.12444444444444}, "saved_time": 1721101432, "source": "reddit", "tags": []}, {"answers": [{"content": "> Why do developers seem mix up the names when they mean different things?\n\nWhat's the distinction you draw between them?\n\nEdit:\n\nI looked it up. It looks like the parameter is the variable and the argument is the value.\n\nI'll be honest, I've been a programmer for almost two decades and that's the first time I've run across that distinction. Yes, those are two different things, but that's honestly not a hair I've ever found useful to split. Although, I'm sure there are specific contexts where it's important.\n\nIf I want to be specific, I will say \"variable\" or \"value\".\n\nYa it seems not to be a big deal for programmers. I\u2019m still learning and can be overly pedantic with everything. Any advice on not sweating unnecessary details as one is learning? Let alone, how to identify extra details not necessary for learning in the early stages?", "id": "jdf784j", "owner_tier": 0.7, "score": 0.9999999966666667}, {"content": ">Why do developers seem mix up the names when they mean different things?\n\nBecause the difference is subtle and can usually be inferred from context. A context where you would require a distinction between the two is rare enough that it really doesn't matter *most of the time* to use them interchangeably.", "id": "jdf1m31", "owner_tier": 0.3, "score": 0.33333333000000004}, {"content": "It's common to use them interchangeably likely because it's usually obvious from the context which is being referred to.\n\nBut it annoys me too, even if it's petty.\n\nAlso, keep in mind that some languages have them backward, so in that case, it's the language's fault, not the programmer's.\n\nThank you!", "id": "jdf21j4", "owner_tier": 0.9, "score": 0.33333333000000004}, {"content": "Many C++ IDEs would name the parameters to main argc and argv.\n\nThat's right the parameters were named... Argument Count and Argument Array!\n\nThat's because we think of the parameter values as being the arguments passed in from externally.\n\nSimilarly, JavaScript functions have a special variable called \"arguments\" that stores all the arguments included in the function call.\n\nIn some languages, they are called formal parameter and actual parameter (rather than argument.)\n\nI actually prefer parameter and parameter value but nobody will ever change the name and argument is the stronger name than parameter. (In which case, argument value and argument variable would be better names.)", "id": "jdgl7ut", "owner_tier": 0.9, "score": -3.3333333130750966e-09}], "link": "https://www.reddit.com/r/learnprogramming/comments/11zzxgj/arguments_and_parameters/", "question": {"content": "Is it a common thing for developers to use arguments and parameters interchangeably? Like I am studying callback functions and I have read several articles or YouTube videos where people are calling arguments as parameters when they are arguments\n\nEx element.addEventListener(param1, param2) when the correct way is \n\nEx element.addEventListener(arg1 arg2)\n\nWhy do developers seem mix up the names when they mean different things?", "id": "11zzxgj", "title": "Arguments and parameters", "traffic_rate": 759.40625}, "saved_time": 1721101432, "source": "reddit", "tags": []}, {"answers": [{"content": "Parameter = the name of the variable in the scope.\nArgument = the value assigned to the parameter.", "id": "janh364", "owner_tier": 0.5, "score": 0.9999999997222222}, {"content": "Just summing up everything everyone has said here:\n\nA function has parameters and takes arguments. The parameters are what are defined in the function definition (like in `def foo(bar):`, where `bar` is the parameter of the function), and arguments are passed into functions (like in `foo(69)`).\n\nThe difference here is really between definition semantics and use semantics.\n\nIn practice, you'll hear them used interchangeably without anyone batting an eye.\n\nThis. It's largely a distinction without a difference. If anyone makes a fuss over it, they are bordering on pedantry\n\nHey I learned something today :D Ty!", "id": "janibnx", "owner_tier": 0.3, "score": 0.3888888886111111}, {"content": "I've been programming for about a decade now, including university and career, and generally I'm actually fairly interested in linguistics and etymology.\n\nI have always heard arguments and parameters used interchangeable. There is no difference in usage nor meaning as far as I'm aware. Any difference would be purely etymological (ie historical).", "id": "jand536", "owner_tier": 0.7, "score": 0.05555555527777778}, {"content": "Toe-may-to, toe-mah-to IMHO.  I generally use args because that is what is commonly used here.", "id": "jandhrh", "owner_tier": 0.1, "score": -2.7777777917354424e-10}, {"content": "> Why is it \"parameters\" passed to function definitions but \"arguments\" passed to class definitions?\n\nIt's not.\n\nIn practice, there is no difference between the terms.\n\nAccording to the Python docs, functions are defined with a list of *parameters* that *arguments* are passed into.\n\nhttps://docs.python.org/3/tutorial/controlflow.html#defining-functions\n\n> but I don't understand why in the grammar specification of class definitions The inheritance is specified to be an enclosed argument_list, as opposed to the parameter_list like in function definitions \n\nBecause that's a list of values, not a list of placeholder names\n\n> Are class definitions considered as actual calls?\n\nNo, but calls are made by the interpreter as part of class definition. The parentheses are just syntax--just like any other syntax, they don't always mean the exact same thing--their behavior depends on context. You *can* define a class by making a call to a type, but in this case, \"arguments\" is used generically--as some value that defines the code operation.\n\n> parameters and arguments both appear inside a pair of parenthesis(()), and I've always thought them as synonyms\n\nSo to tuples and mathematical operations. Sharing syntax characters does not mean sharing behaviors.", "id": "janeukw", "owner_tier": 0.7, "score": 0.05555555527777778}, {"content": "Parameters are what\u2019s used inside the function, arguments are what are passed to it from outside the function. Of course, they are often the same.", "id": "janhqtx", "owner_tier": 0.1, "score": 0.05555555527777778}], "link": "https://www.reddit.com/r/learnpython/comments/11g8wal/parameters_vs_arguments_why_is_it_parameters/", "question": {"content": "**parameters** and **arguments** both appear inside a pair of parenthesis(`()`), and I've always thought them as synonyms until recently when I read their glossary entries. So I am reading through the official docs trying to understand more about the differences between these two terms.\n\nSo far my understanding is: parameters appear in definitions (which are compound statements) specifying what kind of arguments can be passed in the actual calls (which are primary expressions), but I don't understand why in the grammar specification of [class definitions](https://docs.python.org/3/reference/compound_stmts.html#class-definitions) The `inheritance` is specified to be an enclosed `argument_list`, as opposed to the `parameter_list` like in [function definitions](https://docs.python.org/3/reference/compound_stmts.html#function-definitions) . Are class definitions considered as actual calls? If so, where are the parameters of these calls defined? Since at least there's one possible keyword argument `metaclass`, they must be defined somewhere? It is said class objects are constructed by the built-in `type`, which is also the default metaclass, so I thought maybe `type` rather than the class being defined is the callable being called here, but I've found no luck trying out things like `type.__code__`, `type.__dict__`, nor with the `dis` module.\n\nSoo.. to summarize my questions, why do class definitions and function definitions differ in this way? Is class definition secretly a function call when `()` is used? Also, are there any other legal keyword arguments than `metaclass`? Thanks for reading.\n\nBelow are some relevant pages in the official docs for quick references:\n\n* [grammar spec: function definition](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-funcdef)\n* [grammar spec: class definition](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-classdef)\n* [grammar spec: calls](https://docs.python.org/3/reference/expressions.html#calls)\n* [glossary: argument](https://docs.python.org/3/glossary.html#term-argument)\n* [glossary: parameter](https://docs.python.org/3/glossary.html#term-parameter)\n* [using metaclasses](https://docs.python.org/3/reference/datamodel.html#metaclasses)", "id": "11g8wal", "title": "Parameters vs. Arguments: Why is it \"parameters\" passed to function definitions but \"arguments\" passed to class definitions?", "traffic_rate": 153.12444444444444}, "saved_time": 1721101432, "source": "reddit", "tags": []}, {"answers": [{"content": "The 'few resources online' are correct. Arguments are the actual values, parameters are the placeholders that take arguments as their value. The terms are often used interchangeably because it's obvious what is meant from the context. Don't stress over the difference.\n\nThanks a ton for clarifying this.", "id": "cyz38fk", "owner_tier": 0.5, "score": 0.9999999998550726}, {"content": "A parameter represents a requirement.  An argument represents an attempt to satisfy the requirement.  Try visualizing it outside the context of programming.\n\n* I want a pizza with 3 toppings or less - Parameter.\n* Here's a pizza with pepperoni, sausage, and onion - Argument\n\nWhen you define a function, its definition may have parameters.  When you call a function, you supply arguments according to the parameters in the definition.\n\nYour example does serve the need, but I think this would be more realistic:\n\n* I can serve a pizza with 3 toppings or less. - Parameter\n* Serve me a pizza with pepperoni, sausage and onion - Argument\n\nMade me chuckle though :)\n\n> Here's a pizza with pepperoni, sausage, and onion - Argument\n\nThat's definitely an argument because you **never** combine pepperoni and onions. Ne-Ver! \n\n:)", "id": "cyz4ws1", "owner_tier": 0.7, "score": 0.17391304333333332}, {"content": "Arguments is what you have with your parents  \nParameters are the settings you need to calibrate your ship guns.\n\nWait, am I in the wrong subreddit?\n\nNo, no... You're think of /r/ships.\n\nHere, arguments are what you have with your friends when you disagree.  \nParameters are the set of physical properties of the atmosphere, like temperature, pressure, and density.", "id": "cyz4oqn", "owner_tier": 0.5, "score": 0.1014492752173913}, {"content": "I'd go with the parameter is placeholder and argument is a placeholders value.\n\nA definition of an object has parameters whereas an instance of an   object has arguments.\nIn that sense both arguments and parameters can be passed. Because for example a function inside a class can be passed the parameters of the class. \n\nParameters are like the connectors on the back of a PC, arguments are the signals that pass from the connecting wire through the connector inside the PC.\n\nMy2c \n\nThanks for your input, the analogies helped :)", "id": "cyzknn4", "owner_tier": 0.3, "score": 0.04347826072463768}, {"content": "Arguments are used by the Klingon to conquer random software.", "id": "cyz4fvk", "owner_tier": 0.7, "score": 0.01449275347826087}, {"content": "1 You could have Wikipedia-ed this. The arg is the data you send. The parameter is the var inside the func that holds the arg.\n\n2 No-one cares if get the two mixed up. No-one even knows the difference (apart from Wikipedia) anyway. Really no-one cares and this is why the words are used inconsistently.\n\n3 You guys should cooperate on making an awesome app and stop worrying about this. \n\nHaha, thanks. My colleague and I did have a look through quite a few resources, but I decided that a consensus would put our minds as ease. Thanks again :)", "id": "cyz38ho", "owner_tier": 0.3, "score": 0.04347826072463768}, {"content": "Test", "id": "cyzko3k", "owner_tier": 0.3, "score": -1.4492753535109117e-10}], "link": "https://www.reddit.com/r/Python/comments/412q22/difference_between_arguments_and_parameters/", "question": {"content": "Hi guys, myself and a colleague have had some issues figuring out the differences between Arguments and Parameters. Coming from a highschool-IT background I was always told that the term is \"Parameter passing\". My colleague has always been taught \"Argument passing\" and we can't quite figure out amongst ourselves if one of us has an incorrect understanding.\n\n ie:\n\n    def Calculate(x,y) #I believe the () items are *parameters*\n        z = x + y\n        return z\n\n    Calculate(5,6) # I believe the () elements are *Arguments*\n        *returns 11*\n\nA few resources online have outlined the difference between Arguments and Parameters as:\n\nArguments: The actual value passed, ie. Calculate(**5**,**3**). *Actual Arguments*\n\nParameters: The *placeholders* ie. Calculate(**x**,**y**). *Formal Parameters*\n\nOthers have designated parameters and Arguments as interchangeable terms. My experience with a tutorial (LPTHW, my bad!) are that arguments are passed on a program-by-program basis and that parameters are passing in-program.\n\n    ie. $ python MyScript.py arg1 arg2 arg3\n\nIf someone could end this dilemma or provide tutorials outlining the difference, I would be very grateful!", "id": "412q22", "title": "Difference between Arguments and Parameters", "traffic_rate": 207.9358484294499}, "saved_time": 1721101432, "source": "reddit", "tags": []}, {"answers": [{"content": "They're pretty much used interchangeably afaik. However the difference is that the parameter is the name of the variable you create along with the function:\n\n`def myFunction(a, b, c):`\n\n`a`, `b`, and `c` are the parameters here. \n\nArguments are the data that you pass in to that function when the function is called:\n\n`result = myFunction(\"yes, \"no\", \"maybe\")`\n\n`\"yes\"`, `\"no\"`, and `\"maybe\"` are the arguments you pass in to the function. Whilst in the scope of that function, `a` will be equal to `\"yes\"`, `b` will be equal to `\"no\"`, and `c` will be equal to `\"maybe\"`.\n\nHere is a realistic example that takes two numbers and multiplies them together:\n\n    def multiplication(x, y):\n        return x * y\n    \n    result = multiplication(2, 5)\n    print(result)\n    >>> 10\n\nSo if I am understanding correctly, `def multiplication (x, y)`, `x` and `y` are the parameters, and `result = multiplication(2, 5)`, `2` and `5` are the arguments that are being passed to the function. \n\nCorrect.\n\nA function receives parameters.\n\nYou pass arguments to a function.\n\n><insert football joke here>\n\nno", "id": "e19aesw", "owner_tier": 0.7, "score": 0.9999999999487179}, {"content": "Yes! Parameters are just placeholders for arguments.\n\nWhen you call a function like range(0,10), you are passing through arguments. Range() is configured to accept three arguments, but always default to 0 if left empty.\n\nFor instance, if we were to look at the built-in function, it would something like \"def range(x,y=0,z=0):\"\n\nIf we call the range function, with no values, we get an error\n\nIf we call the range function with one argument, it will perform the function, because y and z are defaulted to zero until you pass through a different value like range(1,10,2)\n\nAfaik z=1?\n\nYes, yes. You're right. When i wrote the explanation, first cup of coffee was not consumed. lol\n\nIt's ok. I've already had 3 cups. It's 12 pm here ", "id": "e19ahkt", "owner_tier": 0.3, "score": 0.09230769225641025}, {"content": "Thanks for asking this question, also a total noob and this helped make jargon clearer.\n\nDitto, been developing for over 20 years and TIL :-p\n\nSomeone had asked me to explain the difference between the two, but I couldn't put it into words. That's when I realized I didn't fully understand it", "id": "e19im72", "owner_tier": 0.5, "score": 0.056410256358974356}, {"content": "Parameters are the idea of what is being passed into a function. X and Y are pretty common. The argument is what IS actually being passed into a function. Such as 1, 1.0, or 'one'.", "id": "e19e3ma", "owner_tier": 0.1, "score": 0.015384615333333334}, {"content": "Just think of parameters as the place holders for arguments. So when making a function you put parameters that will later be replaced with actual arguments. \n\nEx. \ndef my_func(x,y):\n        return x+ y\n\nprint(my_func(2,3))\n\nIn this example when writing the function definition your \"parameters\" (place holders) are x and y. Then when you call your function your \"arguments\" are 2 and 3. ", "id": "e19nqd9", "owner_tier": 0.1, "score": 0.010256410205128205}, {"content": "When you write your function declaration you define it's parameters. When you call a function you pass it arguments. ", "id": "e19tvzd", "owner_tier": 0.5, "score": 0.010256410205128205}, {"content": "In short:\n\nThey hypothetical is the parameter. The thing that's actually passed to the function in practice is the argument.\n\nExample:\n\nWith the formula `2x + y = z` , `x` and `y` are ***parameters***. \n\nNow let's say you're asked \"find z at `x = 3` and `y = 1`.\" 3 and 1 are ***arguments*** being passed to the function `2x + y`\n\nso simple, thanks u/ImSuperSerialGuys. \n\nNothing like simple math to help one understand something. Thanks!\n\nHappy to help!", "id": "e1a7kwm", "owner_tier": 0.7, "score": 0.03076923071794872}, {"content": "Just adding to what others have said, you also have arguments and keyword arguments. You may want to also peak at asterisk and double asterisk special options when defining your functions", "id": "e1aimhw", "owner_tier": 0.3, "score": 0.0051282050769230775}, {"content": "Probably one of the best python questions I have read thus far.", "id": "e1adxlc", "owner_tier": 0.1, "score": 0.0051282050769230775}, {"content": "You pass IN the argument, and the parameter receives that value (or string)  from what passed it in. ", "id": "e19pfqr", "owner_tier": 0.9, "score": -5.1282050970386105e-11}], "link": "https://www.reddit.com/r/learnpython/comments/8tq074/noob_here_what_is_the_difference_between_a/", "question": {"content": "Just getting back into python and I'm really trying to understand the fundamentals so that I can develop a good solid understanding of python, in which I can build on. So my question is, what is the difference between an argument and a parameter? Both sound the same to me when I read it. Is a parameter just a place holder for an argument?", "id": "8tq074", "title": "Noob here. What is the difference between a parameter and an argument?", "traffic_rate": 153.12444444444444}, "saved_time": 1721101432, "source": "reddit", "tags": []}, {"answers": [{"content": "**PROGRAMMING**\n\nImagine you define a simple function to give you a sum. Such a code might look something like this (in javascript, other languages will look similar):\n\n.\n\nfunction sum(addend1, addend2) {\n\nreturn addend1 + addend2;\n\n}\n\n.\n\naddend1 and addend2 would be the *parameters* of this function.\n\nNow, when I call that function elsewhere in the code with something like this...\n\ntotal = sum(40, 2);\n\n40 and 2 are the particular *arguments* passed to the sum function.\n\nIf I instead did something like this...\n\n.\n\nvalue1 = 40;\n\nvalue2 = 2;\n\ntotal = sum(value1, value2);\n\n.\n\n...then value1 and value2 are *variables* that get passed to the sum function. Here, 40 and 2 are still the *arguments* that get passed.\n\nIn strict programming definitions, a parameter is a variable used in defining the function, while arguments are the particular values (not just numbers, but strings, too) that are passed. In common usage, it's not uncommon to hear them used interchangeably.\n\n**MATH**\n\nSimilar to programming, a parameter is a value that defines a particular function.\n\nThink of the line formula: y=mx+b\n\nAs written, that's just a general formula. If we define m (the slope) and b (the y-intercept, or where the line crosses the y axis), then we define the parameters for a particular line.\n\nAdding the parameters m=5 and b=12 defines a function for a particular line, [y=5x+12](http://www.wolframalpha.com/input/?i=y%3D5x%2B12). Notice that defining the parameters has changed this from a general formula to a specific line. That's what parameters do.\n\nx itself is a variable, as is y (and y is dependent on x, of course), so any numbers can be passed to them.\n\nWhen you pass a particular value to a variable, that value is called an *argument*. [If I put x=9 into the formula y=5x+12, then I get y=5(9)+12=45+12=57, or y=57 for short](http://www.wolframalpha.com/input/?i=x%3D9%2C+y%3D5x%2B12). x is the variable, but 9 is the argument passed to that variable.\n\nThank you, especially for the seperation of programming and math. It helped a lot.\n\nJust to expand a little bit, in practice the terms *parameter* and *argument* get thrown around interchangeably when talking to programmers, even if it is not completely correct to do so.\n\nOther terminology you might hear is *formal parameter*, which means the same thing as *parameter*, and *actual parameter*, which means the same thing as *argument*.", "id": "c74y3bi", "owner_tier": 0.5, "score": 0.9999999980000001}, {"content": "Note: I program more in Java, and typing this quick, so the examples here are Java-based. It's perfectly understandable in Python, just that there'll be different uses of \"(){}[];\"\n\nParameters: When you call a function like this:\n\ndo_something(foo,bar)\n\nfoo and bar are both parameters to the function. They define things that can be brought into the function to be worked on. So, for instance, if do_something() did addition, you could have the function add foo and bar, and return it. (using the \"return\" keyword, i.e. \"return foo + bar\")\n\nArguments: This is a method to make it a bit more flexible when it comes to calling a function. If I change the above to be:\n\ndo_something(foo = 5, bar = 10)\n\nI can now call that function in some interesting ways:\n\ndo_something() // just use the default values\ndo_something(15,20) // provide my own values, in the order they're listed in the function definition\ndo_something(bar = 15) // Use the foo default, but provide my own bar\ndo_something(bar = 20, foo = 10) // Give values to them backwards\n\nI had to look this one up, as we don't quite have an equivalent in Java. I would look [here](http://docs.python.org/release/1.5.1p1/tut/keywordArgs.html), though, to see some of the other cool things that you could do with this idea.\n\n\nThanks, made it simple and helped my confusion, both you and gmsc. Am I right in thinking it is like a temporary variable?\n\nThat's partially correct, but for the purposes of programming, it's necessary to understand the concepts of variable scope.\n\nThe ELI5 version:\n\nWhen the computer is running your code, it looks at it as several chunks, typically known as blocks. You can stick blocks of code inside each other as much as you want, and any variables inside one block are kept until you finish the block it was made in. Blocks of code inside others can see and do stuff with the variables from the block they're inside of (their parents), but not other blocks at the same level (their siblings). Once the computer finishes a block of code, everything inside it that wasn't given back to its parents before or as it finished is gone. This is known as the \"scope\" of a variable - from when it is created to when it is destroyed, at which point it's gone. Common blocks are things like loops, conditionals, methods, etc.\n\nELINQ5 and slightly more applicable version:\n\nIn the case of a method parameter, this is essentially creating a new variable that has a scope of the method - it is created as soon as the method is called, and ends as soon as the method ends. When you call that method elsewhere in your code with actual values, you're setting the value of that variable and then executing it. In many languages (I don't recall if python is one of them) if you pass an existing variable to a method, and then alter it inside the method, then the variable outside is also changed, because it still exists in the outside method.", "id": "c74xwyj", "owner_tier": 0.5, "score": 0.599999998}, {"content": "First, parameters and arguments are pretty much the same thing...different language prefer different words.\n\nLet say you want to so some task over and over...say convert feet to meters.  Instead of cutting an pasting the same code over and over, you might create a *function*.  That takes feet, multiplies by 0.305, and spits out meters.\n\nYou might write your function like this:\n\n    float feet_to_meters(float f)\n    {\n        float m\n\n        m = f * 0.305\n\n        return f\n    }\n\n(note this isn't Python, just C-ish pseudocode)\n\nThen you use it like:\n\nFirst, you have to tell your function how many feet you are starting with:\n\n    result = feet_to_meters(22.5)\n\nSo you are passing 22.5 to your function as a parameter, and it is *returning* the new value, and storing it in the variable result.", "id": "c74xzb0", "owner_tier": 0.9, "score": -1.999999987845058e-09}], "link": "https://www.reddit.com/r/explainlikeimfive/comments/13la80/eli5_what_are_parameters_and_arguments/", "question": {"content": "The title explains it, it will help if you can explain it in computer programming terms too. I'm asking this because I'm self-teaching myself Python and I'm confused on what Parameters and Arguments are.", "id": "13la80", "title": "ELI5: What are parameters and arguments? (programming and math)", "traffic_rate": 4831.919763513513}, "saved_time": 1721101432, "source": "reddit", "tags": []}, {"answers": [], "link": "https://www.reddit.com/r/learnpython/comments/d8vlij/what_are_parameters_and_arguments_in_python/", "question": {"content": "Hello everyone,\n\nI do not understand what parameters are and arguments are. What are they used for, why do we have to use them, and when do we use them? If you know please comment down in the description.", "id": "d8vlij", "title": "What are Parameters And Arguments In Python?", "traffic_rate": 153.1714814814815}, "saved_time": 1721101432, "source": "reddit", "tags": []}, {"answers": [{"content": "\r\n    The order of evaluation in the case of multiple function arguments is undefined! According to your tests, arguments were evaluated right to left, but you cannot count on that to be the case at all times: different compilers, or even different versions of the same compiler may behave differently, and thus produce different results!\n\nDo not rely on a specific order of evaluation of function arguments!\n\r\nHaving said, that, I can only agree to pwassers comment above.\n\r\nP.S.: http://stackoverflow.com/questions/2934904/order-of-evaluation-in-c-function-parameters[^]\r\n", "id": "2_752360_2", "owner_tier": 0.3, "score": 5.0}], "link": "https://www.codeproject.com/Questions/752235/function-parameter-treatment", "question": {"content": "\r\n\t\t\t    I tested this code in vs2013\n\r\n#include <iostream>\r\nvoid test(int a, int b,int c)\r\n{\r\n\tstd::cout << \"\\n\" << a << \"-\" << b<<\"-\"<<c;\r\n}\r\nvoid main()\r\n{\r\n\tint a = 1;\r\n\ttest(a++, ++a, a);\r\n\ta = 1;\r\n\ttest(a++, a++, a++);\r\n\ta = 1;\r\n\ttest(++a, ++a, ++a);\r\n\ta = 1;\r\n\ttest(a++, ++a, a++);\r\n}\r\nand out put was\r\n2-3-3\r\n3-2-1\r\n4-4-4\r\n3-4-1\r\nthen I tested this code in bc\r\n#include <iostream.h>\r\nvoid test(int a, int b,int c)\r\n{\r\ncout << \"\\n\" << a << \"-\" << b<<\"-\"<<c;\r\n}\r\nvoid main()\r\n{\r\n\tint a = 1;\r\n\ttest(a++, ++a, a);\r\n\ta = 1;\r\n\ttest(a++, a++, a++);\r\n\ta = 1;\r\n\ttest(++a, ++a, ++a);\r\n\ta = 1;\r\n\ttest(a++, ++a, a++);\r\n}\r\nthen the output was\r\n2-2-1\r\n3-2-1\r\n4-3-2\r\n3-3-1\r\nif we think that arguments are sent from right hand to function the output of second code in bc is undestandable but I can't understand the output of first code.\r\nwho can help me?\r\n\t\t    ", "id": "752235", "title": "function parameter treatment", "traffic_rate": 0}, "saved_time": 1721101432, "source": "codeproject", "tags": ["C++"]}, {"answers": [{"content": "\r\n    Hello Ashu,\n\r\nPlease have a look at this[^] tutorial.\n\r\nBasically you need to use createScope method to create the scope within which the script is going to run and then set the variables (scope.SetVariable(Key, Value)) you want to pass to the script in it. The script can refer to these variables using the key specified in setVariable call.\n\r\nRegards,\r\n", "id": "2_624498_1", "owner_tier": 0.3, "score": 0}], "link": "https://www.codeproject.com/Questions/624464/Passing-parameter-in-python-script-from-Csharp", "question": {"content": "\r\n\t\t\t    Hi,\n\r\nI am using Ironpython with C#\n\r\nI wrote below code to access test.py script file which will process the input and return the output. But I don't know how can I pass the parameter in it? \n\r\nAnyone familiar with C#, Ironpython, kindly respond.\n\n\nC#\n\r\nScriptEngine pyEngine = Python.CreateEngine();\r\n                int _ans = pyEngine.Execute(@\"test.py\");\n", "id": "624464", "title": "Passing parameter in python script from C#", "traffic_rate": 0}, "saved_time": 1721101432, "source": "codeproject", "tags": ["C#", "Python", "IronPython"]}, {"answers": [{"content": "\r\n    The difference the two programs behave differently is probably because of the parameter you are passing to the program.\r\nCheck your parameters in both cases.\r\n", "id": "2_1014556_1", "owner_tier": 0.5, "score": 0}, {"content": "\r\n    The possible reason is that the callee's environment is different in the two ways of launching. In case of launching it from another c# program, the callee may think it resides on the folder same as the caller.\r\nI moved the caller into the folder of the callee and then the callee launched and runs as expected.\r\n", "id": "2_1014583_1", "owner_tier": 0.1, "score": 1.0}], "link": "https://www.codeproject.com/Questions/1014530/Whats-difference-between-launching-a-program-via-c", "question": {"content": "\r\n\t\t\t    In my opinion, it should have the same result between launching a program from command line as:\r\n    <program path=\"\"> <a-parameter>\n\r\nand launching from another c# program by calling\n\nC#\n\r\nProcess p = new Process();\r\np.StartInfo.FileName = @\"D:\\programs\\cctv-workstation-sim\\Release\\CCTV Workstation.exe\";\r\np.StartInfo.Arguments = wksSID;\r\np.Start();\n\n\r\nBut the fact is that the two ways of launching causes different result. In the beginning of program execution, the two launching is the same. But, in the latter stage, they act differently.\n\r\nThe launched & launching programs are in c#.\n\r\nI should trace to understand what's wrong with it. But if anyone tells me the possible cause, it's more efficient.\r\n\t\t    ", "id": "1014530", "title": "What's difference between launching a program via command line & via calling c# API?", "traffic_rate": 0}, "saved_time": 1721101432, "source": "codeproject", "tags": ["C#5.0"]}, {"answers": [{"content": "\r\n    Further to the other solutions but picking up on your comment Quote:I heard the phrase the best function are those without parametersI suspect someone has said this in respect of using classes. They were probably trying to get over that you should use the (internal) properties of the class within it's methods and functions rather than relying on external data passed into (the class).\n\r\nThis is a very narrow view of the use of functions and would usually mean that you have to have an instance of the class in order to do anything with the functions. But having static \"helper\" classes can also bring its own problems. There is a good discussion on that topic here[^] - see the solution by Mark Rasmussen.\n\r\nThere is no one-size-fits-all solution and what one person thinks of as \"best\" in one scenario may not be the best for another scenario. Your ability to judge this for yourself will increase with practise\r\n", "id": "2_1264054_1", "owner_tier": 0.5, "score": 3.0}, {"content": "\r\n    Your question is tagged with \"PHP\" but I think this is a generic question, not dependend on a special programming language.\n\r\nIf you don't use the parameters in your function, it is very \"static\" so to say.\r\nBy using the parameters you can use your function more versatile.\n\r\nJusat imagine, you want to write a function that adds two integers.\r\nIs it not simple, to use this two integers as the parameters of the function?\r\n", "id": "2_1264009_3", "owner_tier": 0.3, "score": 0}, {"content": "\r\n    Simple: a function with parameters can work on data entirely internally, it doesn't rely on external values. \r\nThink of it like this - if you wrote an addition function writing it without parameters makes it clumsy to use:\r\n1) Load left value into variable1\r\n2) Load right value into variable2\r\n3) Call function.\r\nWith parameters, it's a lot cleaner:\r\n1) Call function passing left and right values.\n\r\nIt also means that recursive functions can work: where a function is defined in terms of itself:\n \n\r\nfactorial (n): where n > 1 then n * factorial(n - 1) else 1To do that with variables is a lot more complex, because you need to save the value of n in a stack of some form yourself to prevent you messing up previous incarnations.\r\n", "id": "2_1264010_1", "owner_tier": 0.9, "score": 0}], "link": "https://www.codeproject.com/Questions/1264007/What-is-the-difference-between-function-with-param", "question": {"content": "\r\n\t\t\t    Examples:\n\nPHP\n\r\n//function with Parameters\r\n\r\n  public function Name($fname, $lname) {\r\n\r\n     return $fname . ' ' . $lname;\r\n\r\n  }\r\n\r\n\r\n//function without Parameters\r\n\r\n  public $fname;\r\n  public $lname;\r\n\r\n\r\n  public function Name() {\r\n\r\n    return $this->fname . ' ' . $this->lname;\r\n\r\n  }\n\nWhat I have tried:\n\r\nplease Just answer my question, It's quite hurtful to be ignored so please it doesn't matter if its accurate or not, I just want the idea's, concepts about it. so please don't be a arrogant prideful ass. [EDITED]\r\n\t\t    ", "id": "1264007", "title": "What is the difference between function with parameter and function without parameter, and what are their benefits?", "traffic_rate": 0}, "saved_time": 1721101432, "source": "codeproject", "tags": ["PHP"]}, {"answers": [{"content": "\r\n    Optional parameters have to be the last parameters in the signature. Put differently: All parameters after the first optional parameter have to be optional as well. So in your given example you would have to move the parameters 1 and 4 to the end of the signature of the method in order to be able to call it with arg2, arg3, arg5 only:\nC#\n\r\nvoid Method(int arg2, int arg3, int arg5, int arg1=0, int arg4=0)(Where the default values of 0 can be different of course.)\n\r\nSomewhat related, though not a solution here, is the named argument syntax. If you declared all of your parameters as optional, you could call the method like this:\nC#\n\r\nMethod(arg2: 1, arg3: 2, arg5: 3);\n\r\nFor further reading, take a look here: Named and Optional Arguments[^]\n\nEdit: Addendum to named arguments: You could use them for method calls that have or have none optional parameters. Just like with optional parameters, those arguments following the first named argument also have to be named.\r\nMost often named arguments are used to be able to skip optional parameters: Without named arguments, if you wanted to provide a value for, say, the second optional parameter of a method, you would have to specify a value for the first one, too. Named arguments allow you to provide values only for those optional parameters that you want to.\r\n", "id": "2_1075285_2", "owner_tier": 0.3, "score": 1.2}, {"content": "\r\n    In addition to Solution 1.\n\r\nThere are two alternatives. The optional parameters feature has been added to C# later, and before it happened, there was the older opportunity, related to the fact that it's allowed to have more than one method under the same name. Usually it's called by quite a confusing term \"method overloading\". (Yes, many beginners have been badly confused and asked questions on this forum.) So, alternatively, you could write:\nC#\n\r\nvoid Method(int first, int second) { /* ... */ }\r\nvoid Method(int first) {\r\n   Method(first, 0); // 0 is the same very default value for \"second\" here\r\n   // use also the parameter \"first\" now\r\n   // ...\r\n}I would say that the newer approach based on optional parameters is better, more explicit, but some prefer the older style described above. Some do it because they use VS 2008 (with the latest target of .NET v.3.5) or earlier.\n\r\nNote that always there are cases where the code at the call is ambiguous, then using exact types helps, say, using explicitly typed variable/members/constants instead of immediate constants, such as 0.\n\r\nAs to the newer approach, it's important to understand that the arguments with default values can be not only optional but also named, which is event better feature. The named mechanism is opposed to the positional one; the order of arguments at call may vary. Please see: Named and Optional Arguments (C# Programming Guide)[^].\n\n\u2014SA\n", "id": "2_1075295_7", "owner_tier": 0.7, "score": 2.0}, {"content": "\r\n    What to do ?\n\r\nWhen trying to decide whether to use optional parameters, or define multiple methods with the same name, but different parameter lists (method overloading): consider optional parameters in one method definition when it doesn't matter if that optional parameter has a value defined ... in other words, the code that executes is the same. However, if you have methods that use different Types of parameters, use method overloading. See: [^].\n\r\nWhat not to do ?\n\r\nA potential problem with optional parameters is that certain Types used as parameters will be auto-initialized to non-null values, and you may have trouble distinguishing whether the caller passed you a valid value, or not.\n\r\nFor example:\n\nprivate void MyMethod(int int1, string string1 = \"\", int int2 = 0)\n\r\nIn the body of this method, how will you know if the values of 'string1, and 'int1 have been explicitly set by the caller, rather than having been set by default ? That can lead to quirky code work-arounds like this:C#\n\r\nprivate void MyMethod(int int1, string string1 = null, int? int2 = null)\r\n{\r\n    Console.WriteLine(\"{0}, {1}, {2}\", int1, string1, int2);\r\n\r\n    if(string1 != null) // do something with 'string1\r\n\r\n    if(int2 != null) // do something with 'int2\r\n}Where you take advantage of the fact that Type 'String can be 'null, and you use a nullable-Int parameter to allow the integer entry to be null. I consider this a \"code-smell.\"\n\r\nAnother strategy, if all your parameters are the same Type, is to use the 'params keyword to allow a variable length Array of parameters:C#\n\r\nprivate void MyMethodWithVariableParams(params int[] intParams)\r\n{\r\n    foreach(int theInt in intParams)\r\n    {\r\n        // do something with 'theInt\r\n    }\r\n}This is most useful when you really want to iterate over the parameter Array. It is less useful, when you have to write if/else statements, or a switch statement, to handle different lengths of the parameter Array.\n\r\nIn my opinion, I think it best to minimize use of optional parameters, but, if you do, you can take advantage of how the calling syntax that uses Named Parameters allows you to skip parameters you don't want to set in a given method call.\n\r\nI find it \"unfortunate\" that many people refer to \"Named Parameters\" as if they were another type of parameter that can be used in declaring a Method, when, in fact, this is only an optional syntax for calling a Method.\n\r\nAn interesting essay on possible drawbacks of using optional arguments: [^].\n\r\nI prefer to see method-overloading when there are distinct parameter-configurations that will be called frequently ... as long as: code common to all method-overloads is factored out into a separate method.\n\r\nIf you are using .NET 4.0 or later, and you really want to make your code smell good, you can use the 'OptionalParameter Attribute:\n\r\nusing System.Runtime.InteropServices;\r\n\r\nprivate void MyMethod(int int1, [OptionalParameter] string1, [OptionalParameter] int2)\r\n{\r\n    // whatever\r\n}To use this attribute, you must reference the System.Runtime.InteropServices library: however, the variables will be initialized in the same way that optional variables defined without the Attribute are. Using this Attribute has no run-time performance penalty.\r\n", "id": "2_1075398_4", "owner_tier": 0.5, "score": 5.0}], "link": "https://www.codeproject.com/Questions/1075279/Optional-parameter-Using-a-Method-with-arguments-u", "question": {"content": "\r\n\t\t\t    I have a Method with 5 arguments:\r\nMethod(arg1, arg2, arg3, arg4, arg5);\n\r\nIn a situation I have to use same method with 3 arguments\r\nMethod(arg2, arg3, arg5);\n\r\nOptional Parameter is something I found! But, here other arguments have no defaults.\n\nC# Corner : Error Display[^]\n\r\nDo we have any other ways in C# for situations like this. \r\nPlease, ignore if this is a stupid question and my knowledge is way worse to discuss.\n\r\nThanks!\r\n\t\t    ", "id": "1075279", "title": "Optional parameter: Using a Method with 3 arguments, using the same Method with 2 arguments", "traffic_rate": 0}, "saved_time": 1721101432, "source": "codeproject", "tags": ["C#"]}, {"answers": [{"content": "\r\n    Read the error message: it contains useful info: \n\n\r\n  File \"main.py\", line 10, in <module>\r\n    point_dist = math.sqrt((math.pow(x2 - x1), 2.0) + (math.pow(y2 - y1), 2.0))\r\nTypeError: pow expected 2 arguments, got 1 So, it shows you the line and says that the function pow expects two parameters and got one.\r\nWhich is true:\nPython\n\r\n(math.pow(x2 - x1), 2.0)\nPython\n\r\n(math.pow(y2 - y1), 2.0)Both of those calls only send the first parameter to the function.\n\r\nLook at the documentation: Python pow() Function[^] - it tells you what a call to pow should look like.\n\r\nYou need to learn how to fix these problems for yourself, you are going to meet them every day, often many times a day - and it's much, much faster to learn how to fix them yourself instead of \"guessing and hoping\", or asking others to fix them! This may help you next time you get a compilation error: How to Write Code to Solve a Problem, A Beginner's Guide Part 2: Syntax Errors[^]\r\n", "id": "2_5331180_2", "owner_tier": 0.9, "score": 5.0}, {"content": "\nQuote:ive tried rewriting the code with everypossible symbol for power but im so lost now anyhelp will be greatly appreciated.\r\nWriting code is not a matter of luck.\nPython\n\r\n# the syntax of pow is this :\r\nY= math.pow(Value, Power)\r\n# in your case, the value is x2 - x1 and the power is 2\r\nWhich make the code\r\nY= math.pow(x2 - x1, 2.0)\r\nsee the difference ?\n\r\nAdvice, use a programmer's text editor, one of the features is that is highlight what is inside a matching pair of parenthesis.\nPython\n\r\npoint_dist = math.sqrt((math.pow(x2 - x1), 2.0) + (math.pow(y2 - y1), 2.0))\r\n#                                ^^^^^^^                    ^^^^^^^\r\n#                       ^^^^^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^\r\n#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", "id": "2_5331187_1", "owner_tier": 0.5, "score": 0}, {"content": "\r\n    As the error shown here (TypeError): pow expected 2 arguments, got 1.\r\nLook for the expression \r\n---> Python\n\r\nmath.sqrt((math.pow(x2 - x1), 2.0) + (math.pow(y2 - y1), 2.0))\n\n\r\nHere, math.pow function expect 2 arguments but here it is given only one i.e. (x2 - x1).\n\r\nNow after correcting this, your code look like:\n\n\nPython\n\r\nimport math\r\n\r\npoint_dist = 0.0\r\n\r\nx1 = float(input())\r\ny1 = float(input())\r\nx2 = float(input())\r\ny2 = float(input())\r\n\r\npoint_dist = math.sqrt(math.pow((x2 - x1), 2.0) + math.pow((y2 - y1), 2.0))\r\n\r\nprint('Points distance:', point_dist)\n\r\nFor more details visit : https://www.w3schools.com/python/ref_func_pow.asp\n", "id": "2_5331290_1", "owner_tier": 0.1, "score": 1.0}], "link": "https://www.codeproject.com/Questions/5331172/I-need-help-with-this-error-message", "question": {"content": "\r\n\t\t\t    I'm new to coding and I'm trying to do this challenge in my schoolwork and it keeps giving me this error message:\n\r\nThis is the instructions for the challenge:\n\r\nAssign point_dist with the distance between point (x1, y1) and point (x2, y2). The calculation is: Distance = SquareRootOf( (x2 - x1)2 + (y2 - y1)2 ).\n\r\nHere's my code:\n\nPython\n\r\nimport math\r\n\r\npoint_dist = 0.0\r\n\r\nx1 = float(input())\r\ny1 = float(input())\r\nx2 = float(input())\r\ny2 = float(input())\r\n\r\npoint_dist = math.sqrt((math.pow(x2 - x1), 2.0) + (math.pow(y2 - y1), 2.0))\r\n\r\nprint('Points distance:', point_dist) \n\r\nand this is the error message:\n\n \n\r\nExited with return code 1.\r\nTraceback (most recent call last):\r\n  File \"main.py\", line 10, in <module>\r\n    point_dist = math.sqrt((math.pow(x2 - x1), 2.0) + (math.pow(y2 - y1), 2.0))\r\nTypeError: pow expected 2 arguments, got 1\n\r\nWhat am I doing wrong??\n\nWhat I have tried:\n\r\nI've tried rewriting the code with every possible symbol for power, but I'm so lost now. Any help will be greatly appreciated.\r\n\t\t    ", "id": "5331172", "title": "I need help with this error message! !", "traffic_rate": 0}, "saved_time": 1721101432, "source": "codeproject", "tags": ["Python"]}, {"answers": [{"content": "\r\n    The names of variables outside the function aren't passed to the function in C or C++ - all that is passed is the content.\r\nIn your case, what is passed is a pointer - a memory address - and it does not have a name.\r\nWorse, if your calling function stored the data in a local variable, it is quite likely that it never had a name once the app was compiled, as many optimisers would use machine registers instead of storing anything in memory.\r\n", "id": "2_5271818_1", "owner_tier": 0.9, "score": 0}], "link": "https://www.codeproject.com/Questions/5271816/How-to-give-a-name-to-function-arguments-in-C-API", "question": {"content": "\r\n\t\t\t    Hello.\r\nI'm trying to solve this problem but still in pycharm, when i'm looking at my function argument\r\nname i see only \"*args\" and \"**kwargs\" despite \"labels_list\" which i set while defining my function in\r\nC++.\r\nI can pass argument with keyword \"labels_list\" or without it, but i can't see this argument name\r\nin function arguments list in PyCharm.\n\r\nHere is my code:\n\nC++\n\r\nstatic PyObject* encode_one_hot(PyObject* self, PyObject* args, PyObject* kwargs) {\r\n \r\n    PyArrayObject* labels = NULL;\r\n    PyArrayObject* one_hot;\r\n \r\n    npy_intp dims[2];\r\n \r\n    map<int, int> classes_map;\r\n \r\n    int current_label;\r\n    int labels_size;\r\n \r\n    int new_numeration = 0;\r\n \r\n    void* ptr;\r\n \r\n    static char* kwlist[] = { (char*)\"labels_list\", NULL };\r\n \r\n    if (!PyArg_ParseTupleAndKeywords(args, kwargs, \"O\", kwlist, &labels))\r\n        return NULL;\r\n \r\n \r\n    PyArray_Sort(labels, 0, NPY_QUICKSORT);\r\n \r\n    labels_size = PyArray_SIZE(labels);\r\n \r\n    for (int i = 0; i < labels_size; i++) {\r\n        ptr = PyArray_GETPTR1(labels, i);\r\n        current_label = PyLong_AsLong(PyArray_GETITEM(labels, ptr));\r\n \r\n        if (classes_map.find(current_label) == classes_map.end()) {\r\n            classes_map[current_label] = new_numeration;\r\n            new_numeration++;\r\n        }\r\n    }\r\n \r\n    dims[0] = labels_size;\r\n    dims[1] = (int)classes_map.size();\r\n \r\n    one_hot = (PyArrayObject*)PyArray_ZEROS(2, dims, NPY_INT, 0);\r\n \r\n    for (int i = 0; i < labels_size; i++) {\r\n        current_label = classes_map[PyLong_AsLong(PyArray_GETITEM(labels, PyArray_GETPTR1(labels, i)))];\r\n        ptr = PyArray_GETPTR2(one_hot, i, current_label);\r\n \r\n        PyArray_SETITEM(one_hot, ptr, PyLong_FromLong(1));\r\n    }\r\n     \r\n    return PyArray_Return(one_hot);\r\n}\r\nI'll be very grateful for help :)\n\nWhat I have tried:\n\r\nI've tried to look on google for any answer and read documentation.\r\n\t\t    ", "id": "5271816", "title": "How to give a name to function arguments in C-API?", "traffic_rate": 0}, "saved_time": 1721101432, "source": "codeproject", "tags": ["C++", "Python"]}, {"answers": [{"content": "\r\n    What I do is \n\n\n\n\r\nAnd he enters a search term \"<rate>\"\n\r\nAnd in the .py\n\nPython\n\r\n@when('he enters a search term \"(.*)\"')\r\ndef step_he_enters_searchterm(context,text):\r\n    context.driver.find_element_by_id(\"cludoquery\").send_keys(text)\n\n\r\nThis uses regex to find the variable, and it assigns that variable to text.\n\n\r\nMake sure that you place this at the top of your .py so that you can use the regex.\n\nPython\n\r\nuse_step_matcher('re')\n", "id": "2_1260752_1", "owner_tier": 0.1, "score": 0}, {"content": "\r\n    For this:\r\n@when('he enters search term \"{text}\"')\r\ndef step_he_enters_searchterm(context,text):\r\n    context.driver.find_element_by_id(\"cludoquery\").send_keys(text)\n\r\nYou need to write this:\r\nAnd he enters search term \"rate\"\n\r\nAnd if you get undefined step implementations maybe your files are not in correct order.\r\nYou need order something like this:\r\n<features>\r\n-- <steps>\r\n-- -- pageSteps(When then etc.)\r\n-- environment.py\r\n-- something.feature\r\n", "id": "2_5344407_2", "owner_tier": 0.1, "score": 1.0}], "link": "https://www.codeproject.com/Questions/1246030/Pass-parameters-from-a-cucumber-feature-to-Python", "question": {"content": "\r\n\t\t\t    I writing a simple BDD script using Cucumber(Behave), python and selenium.\r\nThe first two steps of my feature and script work but I having trouble getting a parameter from my Behave feature to my Python script.\n\r\nI keep getting this error when I runt the behave feature:\n\n\r\nYou can implement step definitions for undefined steps with these snippets:\r\n\r\n@when(u'he enters search term rate')\r\ndef step_impl(context):\r\n    raise NotImplementedError(u'STEP: When he enters search term rate')\n\r\nCucumber/Behave feature:\n\n\n\r\nScenario: Valid Payee\r\n       Given the user is on a Page\r\n       When he clicks the search field\r\n       And he enters search term 'rate'\n\r\nPython script:\n\n\n\r\nfrom behave import given, when, then\r\nxurl =''\r\n\r\n@given('the user is on a Page')\r\ndef step_user_is_on_fund_transfer_page(context):\r\n    context.driver.get(\"#\")\r\n\r\n@when('he clicks the search field')\r\ndef step_he_clicks_search_field(context):\r\n    context.driver.find_element_by_id(\"cludoquery\").click()\r\n\r\n\r\n@when('he enters search term \"{text}\"')\r\ndef step_he_enters_searchterm(context,text):\r\n    context.driver.find_element_by_id(\"cludoquery\").send_keys(text)\n\r\nSelenium env:\n\n\n\r\nfrom selenium import webdriver\r\ndef before_all(context):\r\n    context.driver = webdriver.Chrome()\r\n\r\ndef after_all(context):\r\n    context.driver.quit()\n\nWhat I have tried:\n\r\nI've tried using 'rate' and <rate> in my feature file for the parameter and ive tried using {text}, \"{text}\" in the python script but no success.\n\r\nAny ideas?\r\n\t\t    ", "id": "1246030", "title": "Pass parameters from a cucumber feature to Python script?", "traffic_rate": 0}, "saved_time": 1721101432, "source": "codeproject", "tags": ["Python", "testing", "automation"]}, {"answers": [{"content": "\r\n    The reason for the error is that the method signature of the BrewMethod states that it expects five string arguments called power, flavour, lid, s and water.\n\n\n\r\npublic void BrewMethod(string power, string flavor, string lid, string s, string water)\n\r\nHowever when you call the BrewMethod method from other methods you only call it with one argument.\n\n\n\r\npublic void PowerMethod()\r\n{\r\n    string power = \"on\";\r\n    Console.WriteLine(\"Coffee Maker is now on.\");\r\n    BrewMethod(power);    <------ Called with one argument whereas fivearguments are expected\r\n    CupMethod(power);\r\n    WaterMethod(power);\r\n    SizeMethod(power);\r\n}\r\n\n\r\nYou must therefore provide the missing arguments to the BrewMethod wherever you call it.\r\n", "id": "2_5261685_1", "owner_tier": 0.3, "score": 0}, {"content": "\r\n    Your BrewMethod definition includes four parameters that are not used. Redefine it as:\nC#\n\r\npublic void BrewMethod(string power)\r\n{\r\n    if (power != \"on\")\r\n        Console.WriteLine(\"Lid has been closed.\");    \r\n}\n\r\n[edit]\r\nHowever, after looking more closely, you have other methods calling BrewMethod with different value types. That will not work since BrewMethod can only handle a single parameter. You need to change it to handle the different types (try a set of enums), so it will need an enum type and its value. Something like:\nC#\n\r\nenum brewtypes{ power, water, ... etc.};\r\n\r\npublic void BrewMethod(brewtypes type, string value)\r\n{\r\n    if (type == brewtypes.power && value != \"on\")\r\n        Console.WriteLine(\"Lid has been closed.\");    \r\n}\n\r\n[/edit]\r\n", "id": "2_5261717_3", "owner_tier": 0.7, "score": 0}], "link": "https://www.codeproject.com/Questions/5261679/There-is-no-argument-that-corresponds-to-the-forma", "question": {"content": "\r\n\t\t\t    I am getting multiple \"there is no argument that corresponds to the formal parameter errors and I can't figure out why. Most are related to my 'BrewMethod'\n\r\nHere is the code\n\n\r\n<pre>public class CoffeeMaker\r\n{\r\n\tpublic string flavor;\r\n\tpublic string power;\r\n\tpublic string s;\r\n\tpublic string lid;\r\n\tpublic string water;\r\n\tpublic void PowerMethod()\r\n\t{ \r\n\r\n\t\tstring power = \"on\";\r\n\t\tConsole.WriteLine(\"Coffee Maker is now on.\");\r\n\t\tBrewMethod(power);\r\n\t\tCupMethod(power);\r\n\t\tWaterMethod(power);\r\n\t\tSizeMethod(power);\r\n\t}\r\n\tpublic void CupMethod(string power)\r\n\t{\r\n\t\tif (power == \"on\")\r\n\t\t{\r\n\t\t\tConsole.WriteLine(\"Enter flavor of the pod.\");\r\n\t\t\tstring flavor = Console.ReadLine();\r\n\r\n\t\t\tBrewMethod(flavor);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tConsole.WriteLine(\"Please turn on coffee maker\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic void WaterMethod(string power)\r\n\t{\r\n\r\n\t\tif (power == \"on\")\r\n\t\t{\r\n\t\t\tint waterAmount;\r\n\r\n\t\t\tConsole.WriteLine(\"In ounces between 6 and 42, enter the amount of water that will be put in.\");\r\n\t\t\twaterAmount = int.Parse(Console.ReadLine());\r\n\r\n\t\t\tif (waterAmount > 42 || waterAmount < 6)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine(\"Enter a valid amount.\");\r\n\t\t\t}\r\n\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tstring water = \"enough\";\r\n\t\t\t\tBrewMethod(water);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tConsole.WriteLine(\"Please turn on coffee maker\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tpublic void SizeMethod(string power)\r\n\t{ \r\n\t\tif (power == \"on\")\r\n\t\t{\r\n\t\t\tint size;\r\n\r\n\t\t\tConsole.WriteLine(\"What size coffee?\");\r\n\t\t\tConsole.WriteLine(\"- Enter 1 for small\");\r\n\t\t\tConsole.WriteLine(\"- Enter 2 for medium\");\r\n\t\t\tConsole.WriteLine(\"- Enter 3 for large\");\r\n\r\n\t\t\tsize = int.Parse(Console.ReadLine());\r\n\r\n\r\n\t\t\tif (size < 1 || size > 3)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine(\"Enter a valid size.\");\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (size == 1)\r\n\t\t\t{\r\n\t\t\t\tstring s = \"small\";\r\n\t\t\t\tBrewMethod(s);\r\n\t\t\t}\r\n\r\n\t\t\tif (size == 2)\r\n\t\t\t{\r\n\t\t\t\tstring s = \"medium\";\r\n\t\t\t\tBrewMethod(s);\r\n\t\t\t}\r\n\r\n\t\t\tif (size == 3)\r\n\t\t\t{\r\n\t\t\t\tstring s = \"large\";\r\n\t\t\t\tBrewMethod(s);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tConsole.WriteLine(\"Please turn on coffee maker.\");\r\n\t\t}\r\n\t}\r\n\t\tpublic void LidMethod()\r\n\t\t{\r\n\t\t\t\tConsole.WriteLine(\"Lid has been closed.\");\r\n\t\t\t\tstring lid = \"closed\";\r\n\t\t\t\tBrewMethod(lid);\r\n\t}\r\n\r\n\tpublic void BrewMethod(string power, string flavor, string lid, string s, string water)\r\n\t{\r\n\t\tif (power != \"on\")\r\n\r\n\t\tConsole.WriteLine(\"Lid has been closed.\");\r\n\t\t\r\n\t}\r\n\r\n}\n\n\n\nWhat I have tried:\n\r\nusing base but it just throws an 'unexpected character' error and doesn't do anything about the other errors.\r\n\t\t    ", "id": "5261679", "title": "There is no argument that corresponds to the formal parameter", "traffic_rate": 0}, "saved_time": 1721101432, "source": "codeproject", "tags": ["C#", "Visual-Studio"]}, {"answers": [{"content": "\r\n    Hello Everyone, hello Tom,\r\nI got this solved and the link you gave me was very uselfull (the for delegates in MSDN)\n\r\nThe solution for this was that I passed delegate to the function instead of passing the function name. And before that I assign the function to delegate like this:\n\nC#\n\r\nprivate delegate void my_delegate(string name); //create delegate that takes string as an argument\r\n\r\nClass_A class_instance = new Class_A(); //create class instance\r\nmy_delegate = class_instance.Function_I_want_to_Pass; //assign the delegate\r\n\r\n//now I can use this:\r\nprivate void Function_Caller(argument_1, argument_2, my_delegate)\r\n{\r\n    //do something with argument #1 and argument #2\r\n    //.......\r\n    //call the function (delegated)\r\n    my_delegate(\"Modestas\");\r\n}\r\n//closing the class instance\r\nclass_instance.Close();\n\r\nnow I can pass the delegate to the function (so it's just like passing the function name).\r\nOf course - this way I create few more lines in the code but this does not bother as I can still achieve the goal of universal function caller.\n\r\nHope this helps anyone.\r\nThanks a lot!\n\r\nModestas.\r\n", "id": "2_612964_3", "owner_tier": 0.1, "score": 2.5}, {"content": "\r\n    Hi,\n\r\nI do not know if this will help, but you could use reflection to execute a method off of a class.\n\nhttp://stackoverflow.com/questions/2202381/reflection-how-to-invoke-method-with-parameters[^]\n\r\nSo if you instantiate an instance of class b then use reflection to find which ever method name has been passed into the method on class A it might achieve what you want. \n\r\nAlthough it's performance hit might be substantial.\r\n", "id": "2_612213_1", "owner_tier": 0.1, "score": 0}, {"content": "\r\n    In ClassB\nC#\n\r\npublic static void doStuffInB()\r\n       {\r\n       //do some really cool stuff.\r\n       }\r\n\n\r\nin ClassA:\nC#\n\r\nprivate void Form1_Load(object sender, EventArgs e)\r\n        {\r\n\r\n            ClassB.doStuffInB();\r\n        }\n", "id": "2_612386_1", "owner_tier": 0.1, "score": 0}], "link": "https://www.codeproject.com/Questions/612200/Passing-a-function-name-as-parameter-to-function", "question": {"content": "\r\n\t\t\t    Hello Guys,\r\nI am having a hard time with passing a function name as a parameter to another function.\r\nI have the following setup:\r\n1. There are 2 classes (A and B)\r\n2. I am trying to write a function in class A which would be executing methods from class B.\n\r\nI know I can pass a class instance and then run the method from that instantiated class... but I just can find a way to also pass a method name as well (don't want to type the name manually).\r\nI found a good example over here:\nhttp://stackoverflow.com/questions/2082615/pass-method-as-parameter-using-c-sharp[^]\r\nBut the problem is that this example shows how to pass method name of the same class (in other words you can access the method directly without having to instantiate the class).... in my case it's a bit different story - I have to instantiate the class....\n\r\nThank you in advance guys!\n\r\nModestas\r\n\t\t    ", "id": "612200", "title": "Passing a function name as parameter to function", "traffic_rate": 0}, "saved_time": 1721101432, "source": "codeproject", "tags": ["C#", "delegates"]}, {"answers": [{"content": "", "id": 61764546, "owner_tier": 0.9, "score": -7.283321194464676e-12}, {"content": "Let's say you're an airline. You build an airplane. You install seats in it. Then, you fill the plane up with passengers and send it somewhere. The passengers disembark. Next day, you re-use the same plane, and same seats, but with different passengers this time. The plane is your function. The parameters are the seats. The arguments are the passengers that go in those seats.", "id": 21067354, "owner_tier": 0.5, "score": 0.02403495993445011}, {"content": "I'm still not happy with all these answers. They all start talking about \"function declarations\" and my monkey brain has already wandered off and started thinking about unicorns. That doesn't help me remember at all, it's just the definition. I want something that I can immediately and forever hold in my head. The only answer here that I quickly understand is: \"Arguments are actual values that are passed in\". Arguments are easier to define and as long as you know what they are then you know parameters are the other. The other way I can think of it is: Simplified down to: Arguments outside, parameters inside If any one wants to disagree with me, you can leave your arguments outside ;)", "id": 72799457, "owner_tier": 0.5, "score": 0.003641660589949017}, {"content": "Arguments are actual values passed to parameters.", "id": 74946446, "owner_tier": 0.3, "score": 0.003641660589949017}, {"content": "According to Joseph's Alabahari book \"C# in a Nutshell\" (C# 7.0, p. 49) : In some human languages (afaik Italian, Russian) synonyms are widely used for these terms. In my university professors use both kind of names.", "id": 48330590, "owner_tier": 0.5, "score": 0.0021849963510560816}, {"content": "I thought it through and realized my previous answer was wrong. Here's a much better definition {Imagine a carton of eggs: A pack of sausage links: And a maid } These represent elements of a Function needed for preparation called : (use any name: Lets say Cooking is the name of my function).  A Maid is a method .  ( You must __call_ or ask this method to make breakfast)(The act of making breakfast is a Function called Cooking)_ Eggs and sausages are Parameters : (because the number of eggs and the number of sausages you want to eat is __variable_ .)_ Your decision is an Argument :  It represents the __Value_ of the chosen number of eggs and/or sausages you are Cooking ._ {Mnemonic} _\" When you call the maid and ask her to make breakfast, she __argues_ with you about how many eggs and sausages you should eating. She's concerned about your cholesterol\" __ ( Arguments , then,  are the values for the combination of Parameters you have declared and decided to pass to your Function )", "id": 47738789, "owner_tier": 0.1, "score": 0.001456664231609614}, {"content": "Simple:", "id": 43602455, "owner_tier": 0.5, "score": 0.14712308812090313}, {"content": "Parameters are variables that are used to store the data that's passed into a function for the function to use. Arguments are the actual data that's passed into a function when it is invoked:", "id": 45325837, "owner_tier": 0.1, "score": 0.0007283321121631463}, {"content": "Yes! Parameters and Arguments have different meanings, which can be easily explained as follows: Function Parameters are the names listed in the function definition. Function Arguments are the real values passed to (and received by) the function.", "id": 44798271, "owner_tier": 0.5, "score": 0.004369992709395485}, {"content": "The formal parameters for a function are listed in the function declaration and are used in the body of the function definition. A formal parameter (of any sort) is a kind of blank or placeholder that is filled in with something when the function is called. An argument is something that is used to fill in a formal parameter. When you write down a function call, the arguments are listed in parentheses after the function name. When the function call is executed, the arguments are plugged in for the formal parameters. The terms call-by-value and call-by-reference refer to the mechanism that is used in the plugging-in process. In the call-by-value method only the value of the argument is used. In this call-by-value mechanism, the formal parameter is a local variable that is initialized to the value of the corresponding argument. In the call-by-reference mechanism the argument is a variable and the entire variable is used. In the call- by-reference mechanism the argument variable is substituted for the formal parameter so that any change that is made to the formal parameter is actually made to the argument variable.", "id": 44516192, "owner_tier": 0.1, "score": 0.0007283321121631463}, {"content": "Logically speaking,we're actually talking about the same thing.\nBut I think a simple metaphor would be helpful to solve this dilemma.  If the metaphors can be called various connection point we can equate them to plug points on a wall.\nIn this case we can consider parameters and arguments as follows; Parameters are the sockets of the plug-point which may take various different shapes. But only certain types of plugs fit them.\nArguments will be the actual plugs that would be plugged into the plug points/sockets to activate certain equipments.", "id": 43695598, "owner_tier": 0.3, "score": 0.002913328470502549}, {"content": "Parameters and Arguments All the different terms that have to do with parameters and arguments\n  can be confusing. However, if you keep a few simple points in mind,\n  you will be able to easily handle these terms. Source: Absolute C++, Walter Savitch That is, ", "id": 43252753, "owner_tier": 0.7, "score": 0.0058266569482884195}, {"content": "Parameters are the variables received by a function.Hence they are visible in function declaration.They contain the variable name with their data type.\nArguments are actual values which are passed to another function. thats why we can see them in function call. They are just values without their datatype ", "id": 40832360, "owner_tier": 0.3, "score": 0.0007283321121631463}, {"content": "When we create the method (function) in Java, the method like this.. data-type name of the method (data-type variable-name) In the parenthesis, these are the parameters, and when we call the method (function) we pass the value of this parameter, which are called the arguments.", "id": 36172609, "owner_tier": 0.1, "score": 0.0021849963510560816}, {"content": "Oracle's Java tutorials define this distinction thusly:\n\"Parameters refers to the list of variables in a method declaration. Arguments are the actual values that are passed in when the method is invoked. When you invoke a method, the arguments used must match the declaration's parameters in type and order.\" A more detailed discussion of parameters and arguments: \nhttps://docs.oracle.com/javase/tutorial/java/javaOO/arguments.html", "id": 35923448, "owner_tier": 0.1, "score": 0.002913328470502549}, {"content": "In editing, I'm often put off at how people forget: structure languages are based on natural languages.  A \"parameter\" is a placeholder. They set the response format, in spoken language. By definition, it's party to the call, limiting the response. An \"argument\" is a position that is being considered. You argue your opinion: you consider an argument.  The thematic role of an argument is agent.  The thematic role of parameter is recipient.  Think of the argument as the male part, making the parameter the female part. The argument goes into the parameter.  A parameter is usually used in definitions. An argument is usually used in invocations.  Finish the sentence to make it less dissonant. (A) Speaking of a definition: (B) Speaking of an invocation: (A)  (B)  As you can imagine, after answering: in spoken language, these words will sometimes produce identical responses!  So, as a rule:  Usually if someone wants parameter information, they want to know more about the type, the variable name, etc. They may become confused if you only give example arguments. ", "id": 23992345, "owner_tier": 0.5, "score": 0.009468317545520757}, {"content": "An argument is an instantiation of a parameter.", "id": 22472316, "owner_tier": 0.5, "score": 0.004369992709395485}, {"content": "They both dont have much difference in usage in C, both the terms are used\nin practice.\n    Mostly arguments are often used with functions. The value passed with the function calling statement is called the argument, And the parameter would be the variable which copies the value in the function definition (called as formal parameter).     In the above code num1 and num2 are formal parameters and a and b are actual arguments.", "id": 19619127, "owner_tier": 0.1, "score": 0.002913328470502549}, {"content": "This example might help.", "id": 18447280, "owner_tier": 0.5, "score": 0.008011653306627821}, {"content": "Or even simpler... Arguments in ! Parameters out !", "id": 17120743, "owner_tier": 0.5, "score": 0.0021849963510560816}, {"content": "A parameter is a variable in a method definition. When a method is called, the arguments are the data you pass into the method's parameters.", "id": 156787, "owner_tier": 0.5, "score": 0.9999999999927167}, {"content": "There is already a Wikipedia entry on the subject (see Parameter) that defines and distinguishes the terms parameter and argument. In short, a parameter is part of the function/procedure/method signature and an argument is the actual value supplied at run-time and/or call-site for the parameter.  The Wikipedia article also states that the two terms are often used synonymously (especially when reasoning about code informally): Although parameters are also commonly\n  referred to as arguments, arguments\n  are more properly thought of as the\n  actual values or references assigned\n  to the parameter variables when the\n  subroutine is called at runtime. Given the following example function in C that adds two integers, x and y would be referred to as its parameters: At a call-site using add, such as the example shown below, 123 and 456 would be referred to as the arguments of the call. Also, some language specifications (or formal documentation) choose to use parameter or argument exclusively and use adjectives like formal and actual instead to disambiguate between the two cases. For example, C/C++ documentation often refers to function parameters as formal arguments and function call arguments as actual arguments. For an example, see \u201cFormal and Actual Arguments\u201d in the Visual C++ Language Reference. ", "id": 156859, "owner_tier": 0.9, "score": 0.06627822286234523}, {"content": "The terms are somewhat interchangeable. The distinction described in other answers is more properly expressed with the terms formal parameter for the name used inside the body of the function and parameter for the value supplied at the call site (formal argument and argument are also common). Also note that, in mathematics, the term argument is far more common and parameter usually means something quite different (though the parameter in a parametric equation is essentially the argument to two or more functions).", "id": 156875, "owner_tier": 0.9, "score": 0.005098324828841952}, {"content": "A parameter is something you have to fill in when you call a function. What you put in it is the argument.  Simply set: the argument goes into the parameter, an argument is the value of the parameter. A bit more info on:\nhttp://en.wikipedia.org/wiki/Parameter_(computer_science)#Parameters_and_arguments", "id": 156785, "owner_tier": 0.5, "score": 0.02621995629278951}], "link": "https://stackoverflow.com/questions/156767/whats-the-difference-between-an-argument-and-a-parameter", "question": {"content": "When verbally talking about methods, I'm never sure whether to use the word argument or parameter or something else. Either way the other people know what I mean, but what's correct, and what's the history of the terms? I'm a C# programmer, but I also wonder whether people use different terms in different languages. For the record I'm self-taught without a background in Computer Science. (Please don't tell me to read Code Complete because I'm asking this for the benefit of other people who don't already have a copy of Steve McConnell's marvelous book.)", "id": 156767, "title": "What&#39;s the difference between an argument and a parameter?", "traffic_rate": 78}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "stackoverflow", "tags": ["parameters", "language-agnostic", "arguments", "terminology"]}, {"answers": [{"content": "An argument is a value passed to the function during the function call which is received in corresponding parameter defined in function header. For example:-\n#Program to find the sum of first n natural numbers", "id": 76362108, "owner_tier": 0.1, "score": -5e-09}, {"content": "Parameters are the variables that accept within the function definition. Arguments are the values that pass into the function when it is called. For example, In above function, param_1 and param_2 are considered as parameters. The arg_1 and arg_2 are the arguments. Usually when we call a function with passing arguments it is called as Argument parsing but sometimes it is also referred as parameter passing.", "id": 76362105, "owner_tier": 0.1, "score": 0.999999995}], "link": "https://stackoverflow.com/questions/76362069/what-is-the-difference-between-argument-and-parameter-in-python-functions-with-r", "question": {"content": "are these two terms argument and parameter same or they have different meanings in python functions? Please help me with some examples also. can we call actual parameter or actual argument?\ncan we call formal parameter or formal argument?", "id": 76362069, "title": "what is the difference between argument and parameter in python functions with reference of actual and formal parameter", "traffic_rate": 525}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "stackoverflow", "tags": ["python", "parameters", "arguments"]}, {"answers": [{"content": "Generally when people say parameter/argument they mean the same thing, but the main difference between them is that the parameter is what is declared in the function, while an argument is what is passed through when calling the function. Here, the parameters are a and b, and the arguments being passed through are 5 and 4. Since Python is a dynamically typed language, we do not need to declare the types of the parameters when declaring a function (unlike in other languages such as C). Thus, we can not control what exact type is passed through as an argument to the function. For example, in the above function, we could do add(\"hello\", \"hi\"). This is where functions such as isinstance() are helpful because they can determine the type of an object. For example, if you do isinstance(\"hello\", int), it will return False since \"hello\" is a string.", "id": 47169062, "owner_tier": 0.9, "score": 0.9999999998076923}], "link": "https://stackoverflow.com/questions/47169033/parameter-vs-argument-python", "question": {"content": "So I'm still pretty new to Python and I am still confused about using a parameter vs an argument. For example, how would I write a function that accepts a string as an argument?", "id": 47169033, "title": "Parameter vs Argument Python", "traffic_rate": 27}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "stackoverflow", "tags": ["python", "string", "function", "parameters", "arguments"]}, {"answers": [], "link": "https://stackoverflow.com/questions/63941547/what-is-the-difference-between-a-variable-and-a-parameter", "question": {"content": "I am learning python 3 and programming in general for the first time, but I can't seem to distinguish a parameter and a variable?", "id": 63941547, "title": "What is the difference between a variable and a parameter", "traffic_rate": 12049}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "stackoverflow", "tags": ["python", "python-3.x", "variables", "parameters"]}, {"answers": [{"content": "A parameter is the variable which is part of the method\u2019s signature (method declaration).  An argument is an expression used when calling the method. Consider the following code: Here i and f are the parameters, and anInt and 2.0 are the arguments.", "id": 1788926, "owner_tier": 0.5, "score": 0.9999999999919421}], "link": "https://stackoverflow.com/questions/1788923/parameter-vs-argument", "question": {"content": "I got parameter and argument kind of mixed up and did not really pay attention to when to use one and when to use the other.   Can you please tell me? ", "id": 1788923, "title": "&quot;Parameter&quot; vs &quot;Argument&quot;", "traffic_rate": 103}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "stackoverflow", "tags": ["function", "parameters", "language-agnostic", "arguments", "terminology"]}, {"answers": [], "link": "https://stackoverflow.com/questions/51054490/how-do-i-differentiate-parameters-and-arguments-in-python", "question": {"content": "I just started self-learning python and have encountered these two problems:\n\n To my understanding, an argument is a value to a function and a parameter is a variable whose value will be supplied when the function is called.  My answer to question #10 was incorrect and I wasn't clear about #8 either. It would be greatly appreciated if anyone could clarify my confusions about an argument and a parameter using these problems.", "id": 51054490, "title": "How do I differentiate parameters and arguments in python?", "traffic_rate": 4172}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "stackoverflow", "tags": ["python", "python-3.x"]}, {"answers": [{"content": "whenever you call a function suppose the above values 'x', 'y' are arguments and 'a', 'b' are parameters. During function/method calling those variables are called as arguments because you can pass anything like 'x', 'y' or maybe 'p', 'q' etc. But at the function definition those variables are called parameters because they would just be for that function only that is like a limit to that function.  In Python there is concept of position arguments, default arguments, non-default arguments, keyword arguments and named arguments. Here in above function 'b' is a default parameter its value by default would be 10, if whenever the function f2 is called and only 1 value of 'a' is going to come up like f2(x) and variable would 'b' be 10 and for 'a' = 10. And in the f2(x, y) the f2 function's parameters 'a', 'b' will be 10, 20 respectively.  Always remember that at function call position arguments come first then keyword/named parameters must be later on, because the position matters. Same at the function definition first non-default parameters then default ones. The non-defaults one would correspond to positional ones and rest one would correspond to remaining depending on your function call. At case 1 of function call f2(x), here 'x' is the positional argument during function call and 'a' at the function definition is positional parameter and 'y' is the default parameter. At case 2 of function call f2(x, y), both 'x' and 'y' are positional arguments and at function definition 'a' and 'b' both are positional parameters now, as 'y' would be passing value 20 to parameter 'b'. The default value of any function definition would be took only if no argument is passed for that parameter at any function call like case 1 f1(x) or f1(p) then default would be took that is 'b' = 10 and 'a' would be 'x' or 'p'. Next suppose, the above call f3, its arguments 'a' as 5 and 'b' as 15 are keyword/named arguments because they have name/key associated for its value. 'a' is linked as a name/key to value 5 and same for 'b' as 'b' is linked as a name/key to value '15'. Same you can think of like a dictionary. Here during function call make sure names/keys must be same as function definition else we would get an error. Also ensure that no repetition of same arguments/parameters at function call or at function definition will also give us error. And you can specify these keyword/named based arguments in any order.\nlike in case 2 we have f3(b=100, a=200). At function definition the name/key 'a' would correspond to value 200 and the name/key 'b' would correspond to value 100. Here in f4 function definition 'a' and 'b' are having default values 1 and 2.  At case 1 the defaults values would be took. At case 2 only 'b' as name/key value 20 is passed which would correspond to 'b' at function definition, 'a' and 'b' would be 1, 20 respectively. At case 3 only 'a' as name/key value 10 is passed which would correspond to 'a' at function definition, 'a' and 'b' would be 10, 2 respectively. At case 4 both 'a' and 'b' as passed as name/key values 50, 75 which would correspond to both 'a' and 'b' at function definition, 'a' and 'b' would be 75 and 50 respectively. Remember that the name/key arguments only applies during function calling like f4(a=3, b=4). And during function definition def f5(a, b=20) here 'a' is non-default parameter or positional parameter, and 'b' is the default parameter as default value would be took if no value for 'b' is passed during the function call f5.", "id": 48048161, "owner_tier": 0.3, "score": 0.9999999966666667}, {"content": "Technically, parameters are variables in a function definition and arguments are the actual values given to the variables at the point of call. For example: The variable arg in the function definition is the parameter and the value Python in the function call is an argument to that parameter. Wikipedia has a nice description: Parameters and arguments", "id": 48048951, "owner_tier": 0.5, "score": -3.3333333333333334e-09}], "link": "https://stackoverflow.com/questions/48047865/what-is-the-difference-between-argument-and-parameter-in-python-perspective-not", "question": {"content": "I heard that argument means the method arguments, ( for example in below code) a and b are arguments and c and d are parameters. Correct me if I am wrong? Then in the below code  The error message is: SyntaxError: non-default argument follows default argument And also in below code The error message is: SyntaxError: non-keyword arg after keyword arg In both error messaeges, 'no-default argument follows default argument' and 'non-keyword arg after keyword arg', why there is no mention of paramter?  It caused the confusion to me many times with both the error messages so aksing this question. Is there any specific reason for error message to be like this. and also could you let me know how to remember the correct error message corresponding to that error. Thank you.", "id": 48047865, "title": "What is the difference between argument and parameter in python perspective [not duplicate :) ]?", "traffic_rate": 1434}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "stackoverflow", "tags": ["python", "python-2.7"]}, {"answers": [{"content": "Per the official documentation: Parameters are defined by the names that appear in a function definition, whereas arguments are the values actually passed to a function when calling it. Parameters define what types of arguments a function can accept. For example, given the function definition: foo, bar and kwargs are parameters of func. However, when calling func, for example: the values 42, 314, and somevar are arguments. The glossary defines them as: Python doesn't really have \"variables\" like some other languages - it has \"names\" referring to \"objects\". See e.g. \"Code like a Pythonista\" and \"Facts and myths about Python names and values\".", "id": 24367845, "owner_tier": 0.9, "score": 0.9999999980000001}, {"content": "Take it this way: Parameter:\nA parameter represents a value that the procedure expects you to pass when you call it. The procedure's declaration defines its parameters. Argument:\nAn argument represents the value that you pass to a procedure parameter when you call the procedure. The calling code supplies the arguments when it calls the procedure. Example: Now while calling the function Same goes with Python, while declaration, they are parameters, while calling they are arguments. Some may differ with what i have written, but this is how it is actually known in programming world.", "id": 24367918, "owner_tier": 0.5, "score": -1.999999987845058e-09}], "link": "https://stackoverflow.com/questions/24367715/parameter-vs-arguments-finally-what-are-they", "question": {"content": "I am a beginner in python programming and recently i came across functions,parameters,arguments and... I have done a lot of research on Parameters and Arguments(Even checked the answers of similar past questions on StackOverflow)but i couldn't get their meanings. Some say,parameters are variables which we give them to functions while we are defining them and arguments are values that are passed in function once we given them to the function in order to run the function.While some other say no,it's not like that.Parameters and Arguments are same and do the same task... Can anyone tell me the meaning Parameters and Arguments in a clear way? Are Parameters and Arguments considered variables? For what kind of purpose do we use them? Please don't explain too much complicated,i am a beginner. Thank you so much.", "id": 24367715, "title": "Parameter vs Arguments ? finally,what are they?", "traffic_rate": 1160}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "stackoverflow", "tags": ["python", "parameters", "arguments"]}, {"answers": [{"content": "", "id": 61764546, "owner_tier": 0.9, "score": -7.283321194464676e-12}, {"content": "Let's say you're an airline. You build an airplane. You install seats in it. Then, you fill the plane up with passengers and send it somewhere. The passengers disembark. Next day, you re-use the same plane, and same seats, but with different passengers this time. The plane is your function. The parameters are the seats. The arguments are the passengers that go in those seats.", "id": 21067354, "owner_tier": 0.5, "score": 0.02403495993445011}, {"content": "I'm still not happy with all these answers. They all start talking about \"function declarations\" and my monkey brain has already wandered off and started thinking about unicorns. That doesn't help me remember at all, it's just the definition. I want something that I can immediately and forever hold in my head. The only answer here that I quickly understand is: \"Arguments are actual values that are passed in\". Arguments are easier to define and as long as you know what they are then you know parameters are the other. The other way I can think of it is: Simplified down to: Arguments outside, parameters inside If any one wants to disagree with me, you can leave your arguments outside ;)", "id": 72799457, "owner_tier": 0.5, "score": 0.003641660589949017}, {"content": "Arguments are actual values passed to parameters.", "id": 74946446, "owner_tier": 0.3, "score": 0.003641660589949017}, {"content": "An argument is an instantiation of a parameter.", "id": 22472316, "owner_tier": 0.5, "score": 0.004369992709395485}, {"content": "They both dont have much difference in usage in C, both the terms are used\nin practice.\n    Mostly arguments are often used with functions. The value passed with the function calling statement is called the argument, And the parameter would be the variable which copies the value in the function definition (called as formal parameter).     In the above code num1 and num2 are formal parameters and a and b are actual arguments.", "id": 19619127, "owner_tier": 0.1, "score": 0.002913328470502549}, {"content": "This example might help.", "id": 18447280, "owner_tier": 0.5, "score": 0.008011653306627821}, {"content": "Or even simpler... Arguments in ! Parameters out !", "id": 17120743, "owner_tier": 0.5, "score": 0.0021849963510560816}, {"content": "A parameter is a variable in a method definition. When a method is called, the arguments are the data you pass into the method's parameters.", "id": 156787, "owner_tier": 0.5, "score": 0.9999999999927167}, {"content": "There is already a Wikipedia entry on the subject (see Parameter) that defines and distinguishes the terms parameter and argument. In short, a parameter is part of the function/procedure/method signature and an argument is the actual value supplied at run-time and/or call-site for the parameter.  The Wikipedia article also states that the two terms are often used synonymously (especially when reasoning about code informally): Although parameters are also commonly\n  referred to as arguments, arguments\n  are more properly thought of as the\n  actual values or references assigned\n  to the parameter variables when the\n  subroutine is called at runtime. Given the following example function in C that adds two integers, x and y would be referred to as its parameters: At a call-site using add, such as the example shown below, 123 and 456 would be referred to as the arguments of the call. Also, some language specifications (or formal documentation) choose to use parameter or argument exclusively and use adjectives like formal and actual instead to disambiguate between the two cases. For example, C/C++ documentation often refers to function parameters as formal arguments and function call arguments as actual arguments. For an example, see \u201cFormal and Actual Arguments\u201d in the Visual C++ Language Reference. ", "id": 156859, "owner_tier": 0.9, "score": 0.06627822286234523}, {"content": "The terms are somewhat interchangeable. The distinction described in other answers is more properly expressed with the terms formal parameter for the name used inside the body of the function and parameter for the value supplied at the call site (formal argument and argument are also common). Also note that, in mathematics, the term argument is far more common and parameter usually means something quite different (though the parameter in a parametric equation is essentially the argument to two or more functions).", "id": 156875, "owner_tier": 0.9, "score": 0.005098324828841952}, {"content": "A parameter is something you have to fill in when you call a function. What you put in it is the argument.  Simply set: the argument goes into the parameter, an argument is the value of the parameter. A bit more info on:\nhttp://en.wikipedia.org/wiki/Parameter_(computer_science)#Parameters_and_arguments", "id": 156785, "owner_tier": 0.5, "score": 0.02621995629278951}], "link": "https://stackoverflow.com/questions/156767/whats-the-difference-between-an-argument-and-a-parameter", "question": {"content": "When verbally talking about methods, I'm never sure whether to use the word argument or parameter or something else. Either way the other people know what I mean, but what's correct, and what's the history of the terms? I'm a C# programmer, but I also wonder whether people use different terms in different languages. For the record I'm self-taught without a background in Computer Science. (Please don't tell me to read Code Complete because I'm asking this for the benefit of other people who don't already have a copy of Steve McConnell's marvelous book.)", "id": 156767, "title": "What&#39;s the difference between an argument and a parameter?", "traffic_rate": 78}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "stackoverflow", "tags": ["parameters", "language-agnostic", "arguments", "terminology"]}, {"answers": [], "link": "https://www.reddit.com/r/learnpython/comments/170i8vf/please_eli5_how_functions_parametersarguments_work/", "question": {"content": "[deleted]", "id": "170i8vf", "title": "Please ELI5, how function's parameters/arguments work", "traffic_rate": 153.12444444444444}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "reddit"}, {"answers": [{"content": "The relationship between a parameter and an argument is like the relationship between a variable and a value.\n\nHave you learned how to write your own functions in Python yet? When you write a function, it looks like this.\n\n    def say_hi_to(person):\n      print(\"Hello, \" + person)\n\nIn this example, the `person` variable is the _parameter_ of the function. When someone calls this function with the string `\"Alice\"`, that string is the _argument_ passed in to the function.\n\nEdit: Important note, people often use the two terms interchangeably. It's usually clear from context what they mean, so don't get confused if someone gets the terms wrong.\n\nexactly, and `person` is a variable that is given a value by the user, in your case, `\"Alice\"`. right? I wanted to use the example of soaps because we have different types of soaps. just like names\n\nI'm learning defining functions right now btw\n\nYes, the same thing could be done with a function that takes in a type of soap. The `soap` variable in the function definition would be the parameter. The specific soap passed to the function would be the argument.\n\nThe terms are generally used specifically with functions. Your example doesn't really include functions, so I would say all those are just variables, and not parameters.\n\noh ok, thank you.\n\n    def foam(soap):\n        print(\"I'm adding\", soap, \"and water to make some foam.\")\n    foam(showergel)\n\nthis should be the right one\n\nbut now I'm not understanding another thing. Why does:\n\n    def hello(target):\n        print(\"Hello\", target)\n    name = \"Alan\" \n    hello(name)\n\ngives the output `Hello Alan`? Shouldn't the parameter `target` and the variable we assign to it be the same? Why can I use `target` and `name` interchangeably?\n\nYour indentation got messed up, so I'll try to rewrite it.\n\n    def hello(target):\n      print(\"Hello\", target)\n    \n    name = \"Alan\"\n    hello(name)\n\nWhat's going on here is that the value `\"Alan\"` is assigned to the variable `name`. When you call `hello(name)`, what you're telling Python to do is take the value from `name` and pass it to `hello`. The value of `name` is now an _argument_ being passed into the `hello` function. The _parameter_ `target` takes on the value of that _argument_.\n\nTake a look at this. It might clear things up for you.\n\n    def hello(target):\n      print(\"Hello\", target)\n    \n    name1 = \"Alan\"\n    name2 = \"Betty\"\n    name3 = \"Colin\"\n\n    hello(name1)\n    hello(name2)\n    hello(name3)\n\n    hello(\"Deborah\")\n\nname = \"Alan\" hello(name)\n\nthis does not compile/run, if you meant writing it on two lines:\n\nthe first line `name=\"alan\"` set the variable \"name\" with the value \"alan\"\n\nthe second one calls the function `hello` that you declared before with the value stored in the variable \"name\" as argument, so it is called with \"alan\"\n\nhello(name) becomes hello(\"alan\") .\n\nyou need to think functions like isolated block: imagine like it's a phone call:\n\nyour main program makes a \"phone call\" to the \"hello\" service, the \"hello service\" require \"one word\", you use name wich contains alan so you call at phone Mr. Hello and tell him \"i'm using your service with the first argument \"alan\".\n\nthe guy on the other side reads what he is supposed to do with that string and the definition suggests that this string goes inside \"target\" variable, right aftert there is \"print(target)\" so it print \"alan\".\n\nthe core idea of functions is to group parts of code that that you might need to use many times, for example in real life a function might be \"give me  water\" which is composed by many actions: stand up, walk, pick it up, give it to me\", that's a lot of stuff! so we define this function \"give me water\" that has all those instructions inside so that i can just say \"give me water\" every time i need it.\n\nbut the main program and what is inside the function are two different things and they don't know eachother, they don't communicate except for the arguments.  \n\nthe value that you pass to a function can be a copy of the original variable (pass by value) or can be a reference to the original variable (pass by reference)\n\nsearch for \"variable scope\"\n\nWhen a name is given as an argument, Python looks up the value associated with the name, and gives that value to the function. `target` and `name` are referring to the same object.\n\nThe order of lookups/stores:\n\n - The `\"Alan\"` object is associated with the name `name`.\n - `name` is given as an argument to `hello`. Its value, `\"Alan\"`, is looked up and given to `hello`.\n - The function is called, and it associates the `\"Alan\"` object that was given as an argument with the name `target`.\n - `target` is given as an argument to `print`. Its value, again `\"Alan\"`, is looked up and given to `print`.\n\nSo, it's basically as if `target = name` was run when the function was called (not actually true, but it may be helpful when thinking about simple cases).\n\noh ok, thank you, i didnt know we could also do that. thanks for your availability!\n\nThank you a lot!!\n\nthank you!!\n\nThat's what functions are all about! They let you write little reuseable pieces of code.\n\nDid you happen to notice that `input` and `print` are basically just functions provided by Python that you're calling?\n\nOooohh right\u2026 I already heard that before but I collected all the dots now. So, by using the argument in the function definition and in the indented block we\u2019re just telling the program how to act with a certain input\u2026\n\nExactly.\n\nThe indentation is how we tell Python which lines are part of the function and which aren't.\n\nThen, you can think of a function as a little program all to itself, and you can cause that little program to run by _calling_ the function. You can make it run with different input each time.", "id": "jlz7gow", "owner_tier": 0.7, "score": 0.9999999995652173}, {"content": "Nope. Parameters are what you have as, well parameters in your function. Arguments are what you call a function with. \n\n    def foobar(bar): # bar is a parameter\n        print(bar)\n\n    foobar(\"what\") # we are passing \"what\" as an argument to function foobar\n\nSo we are calling function foobar with argument \u201dwhat\u201d which in this case is assigned to parameter bar.\n\nok, so we use the arguments and parameter classification only when it comes to defining a function, don't we?", "id": "jlz7ho9", "owner_tier": 0.5, "score": -4.3478260605327347e-10}], "link": "https://www.reddit.com/r/learnprogramming/comments/13u7xu0/difference_between_arguments_and_parameters/", "question": {"content": "I'm learning Python, and to get better some concepts I'm using the Feynman technique. I hope that what I'm about to say won't sound too silly.\n\nI'm deepening the concept of arguments and parameters. From the course I'm following, I know that they're used interchangeably and that a possible definition of the difference between the two may be this:\n\n>The distinction is that while *argument* is used with the data passed to the function when the function is called, *inside* the function the arguments are assigned to variables called *parameters*.\n\nI'm trying to understand this better. If I ask someone how to make foam, that person may answer: You can make foam by adding water and soap. Now, in the actual world, I don't just use *some* water and *some* soap: I can use tap water, rainwater, bottled water... as well as dish soap, shower gel, soap powder, and so on.\n\n    foam = water + soap #These are the parameters\n    \n    water = input(\"What kind of water are you using? \") \n    soap = input(\"What kind of soap are you using? \") \n    \n    #The inputs will be \"Tap water\" and \"Showergel\", which are, I guess, the arguments\n\nDid I get this right?\n\n&#x200B;\n\nP.S. I promise you I also have friends and a social life", "id": "13u7xu0", "title": "Difference between arguments and parameters.", "traffic_rate": 759.40625}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "reddit"}, {"answers": [{"content": "Why do you keep asking the same questions over and over again?\n\nI'm asking different questions about the same subject.", "id": "huuh4hn", "owner_tier": 0.5, "score": 0.49999999875}, {"content": "Let's be clear:\n\n    def my_function($id):\n        //do stuff with $id\n    \n    my_function(3);\n\n$id is the parameter, 3 is the argument.\n\n[From W3schools:](https://www.w3schools.com/python/python_functions.asp)\n\n>The terms parameter and argument can be used for the same thing: information that are passed into a function.  \n>  \n>From a function's perspective:  \n>  \n>A parameter is the variable listed inside the parentheses in the function definition.  \n>  \n>An argument is the value that is sent to the function when it is called.", "id": "huue5yl", "owner_tier": 0.7, "score": 0.99999999875}, {"content": "Parameters and arguments are not the same.\nparameter is a named variable passed into a function\nArgument is the value passed in the parameter.", "id": "huudqu2", "owner_tier": 0.5, "score": 0.62499999875}, {"content": "The terms \"argument\" and \"parameter\" are interchangeable.\n\nAnd why is that?\n\nBecause the great gods of Python have decreed it to be so.\n\nAnd can you explain how they can be interchangeable in terms of python?\n\nHe means that they are called the same thing. They literally are the same thing.", "id": "huud3kk", "owner_tier": 0.9, "score": -1.2499999924031613e-09}], "link": "https://www.reddit.com/r/learnpython/comments/sg7p3j/what_is_a_function_parameter_and_what_is_its/", "question": {"content": "And what is it's purpose with function arguments?", "id": "sg7p3j", "title": "What is a function parameter. And what is it's purpose with function arguments?", "traffic_rate": 153.12444444444444}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "reddit"}, {"answers": [{"content": "So, taking a swing at it....the parameter(s) in Python are just a way of telling the function that it should be receiving one or more objects/pieces of information.  How you write the function determines what type of object those things need to be.\n\nPer your example,  \ndef funct(param):  \nprint(param)\n\nCan be used with any type of object that can be printed out to the console; like:  \n\n\nfunc(23)  \nfunc(\"Hello, Timmy\")\n\nwill print out the value 23, and then the string \"Hello, Timmy\"\n\nWhat this, also, means is that you can assign things to variables and pass those variables in to the parameter spot (referred to as an argument when calling the function) and they will still be the object/type of object that you assigned earlier.\n\na = \\[2, 5, 7, 9\\]  \nfunc(a)\n\nwill print \\[2, 5, 7, 9\\] out to the console.\n\n&#x200B;\n\nDoes that help?\n\nI think this has helped. I'm going to go play around in the Python console with this.\nI think my confusion is when the function is the same, but I use different parameters...\nI'm such a novice that I'm extreme difficulty explaining my self.\n\nI'm so sorry everyone.\n\nThere's some confusion that comes from Python not being strongly typed, I suspect.  And, it's a small semantic difference but still an important one to understanding functions:\n\n  \n\"parameter\" is the definition of what data the function works with  \n\"argument\" is the actual data you pass in to the function when you call it  \n\n\nAs a programmer, you \\*define\\* parameters and you \\*use\\* (\"pass\") arguments.\n\nOk?\n\nAhh. Okay.\nSo I'm at my console now.\n\n    def display(message):\n        print(message)\n\n    def display(notice):\n        print(notice)\n\n    display(\"This is my message.\")\n\nAnd what comes out is a single line.\n\nSo... even though I am using different names/parameters.. the function uses the same argument for both... even though though it's two different variables, one argument...\nUm.\nSo it's not complicated is it? It's just I am wondering what good is that?\nIn my example, if I call display, I'm only calling the function, not the parameter, the parameter is just assigned the argument, and doesn't actually affect what the function does? Right?\n\nNo, not complicated; but, can be confusing to start with.\n\nOHHHHHH....ok, I see where I think you're getting confused....it's a common misunderstanding.\n\nNo.  The parameter and the argument do not have to use the same name.  Again, the parameter is something you define, as if you're saying \"Hey function, you're going to get one piece of information that I want you to do something with\".  So you can do  \n\n\ndef func(notice):  \nprint(notice)\n\nor \n\ndef func(a\\_thing):  \nprint(a\\_thing)  \n\n\nand as long as you pass a valid object as an \\*argument\\* when you call the function, it will do whatever it has been written to do.  if you call the function with an argument of 23,\n\nfunc(23)\n\nboth of the functions will work just fine because the value 23 is a valid object for print() to work on.\n\nSince Python is not a strictly typed language, you don't specify the type of data that your parameters will use; but, once you get further along, it is a good practice to name your parameters in such a way as anyone trying to call the function knows what data to use.  Like:  \n\n\nstudent = \"Billy Goat\"  \ndef who\\_is\\_that(name):  \nprint(f\"That is {name}, and he's eating the grass.\")\n\nwho\\_is\\_that(student)\n\nIn the definition, that parameter tells whoever is looking at it that the function takes one argument when it is called, and one can assume they should expect that argument to be a string.  In \\*this\\* case, there is nothing that requires a particular data type, so you would need additional logic to filter out other inputs, but it should serve as another example you can walk through.\n\nEven farther along, there's a push for using type hints in order to make reading, using and debugging functions simpler, which simply means adding an annotation of the 'type' of each of your parameters, like:\n\ndef func(name: str)  \n....\n\nThe ': str' part of that has no functional purpose, but it tells the reader that whomever wrote the function expects you to use it with a string object.\n\nSo..\n\n     def display(message):\n        print(message)\nAnd\n\n    def display(notice):\n        print(notice)\n\nAre not the same..\n\nBut if I call the funcrion\n\n    display(\"this is my message\")\n\nIt appears display(message) runs,\nWhile display(notice) is undefined.\n\nwherever you are assigning that string to 'message', you would have to assign it to 'notice' instead.\n\nIn this case, the variable names you are using are just placeholders for the string you're assigning to them.  If the value you have assigned to those variables is the same, then the output will be the same.\n\nnotice = \"this is my message\"  \nmessage = \"this is my message\n\ndef display(a\\_string):  \nprint(a\\_string)\n\n&#x200B;\n\ndisplay(notice)\n\ndisplay(message)\n\nwill output the same thing.  But, if you started with\n\nnotice = \"this is my message\"  \nmessage = 42\n\nand made those same function calls, the output would be\n\n\"this is my message\"  \n42\n\nOkay, and these are called default parameter values..\nClearly I am over complicating this.\nI just was thinking that by changing the parameter, that my function could be used for separate types of arguments.. Idk why...\n\nOverthinking a little bit, probably.  But, no, these would not be default parameters, those are slightly different.  This is just a parameter.\n\nSecondly, the function is what controls what kind of parameters you can pass. Dealing with this part first, consider this:\n\nnotice = \"This is my message\"  \nmessage = 42\n\ndef func(a\\_thing):  \nresult = a\\_thing - a\\_thing  \nprint(result)\n\nfunc(notice)  \nfunc(message)\n\nYou will get an error on the first one because you cannot subtract strings, whereas the second one would print out '0' in the console.\n\n&#x200B;\n\nFor default parameters, those are where you set a value, in the definition, that will be used \\*if the user does not supply an argument themselves\\*.  So,\n\n&#x200B;\n\nnotice = \"This is a user supplied argument\"\n\ndef message( a\\_thing = \"This is a default parameter\"):  \nprint(a\\_thing)\n\nmessage()  \nmessage(notice)\n\nHere, the person calling message (me) has not supplied any argument, themselves, so the default message is used in the first instance.  But, since I gave it my own value in the second instance, the default message is overridden and my message is used instead.", "id": "j73oroh", "owner_tier": 0.5, "score": 0.9999999992857143}, {"content": "1. Everything in Python is an object (including integers, lists, functions, classes, etc)\n2. Variables are just names that refer to objects\n3. An object can have several names that refer to it, but each name can only directly refer to a single object (although that object can be a collection of other objects, like in a list or tuple)\n4. An area of code where a set of names is accessible is called a namespace (modules (files) and functions both hold a local namespace, and a function can access its local namespace as well as the global namespace of the module it\u2019s being called in)\n5. When defining a function, the parameters define the names of the objects that get passed in to its local namespace (regardless of any extra names that may refer to those objects outside a function call), so those names can be used throughout the function (but are not accessible from outside the function)\n6. When calling a function the parameters are used to pass in objects\n    - this can be positionally, as in your example, or as keyword-arguments that specify which parameter name should be assigned to which object (e.g. `my_func(a, 3, param=[], param8=var)`) \n    - it doesn\u2019t matter if the objects are passed in as literals (e.g. 3, \"string\") or variables - just the object (the \u201cvalue\u201d) is passed in and bound to the relevant parameter name\n6. Python interprets code from top to bottom\n7. If you define a new function with the same name as some other object, then that name now refers to that function, and has no memory of what it used to refer to (just like if you do `a=3` and then later in your code do `a=4`)\n\nThank you so much,\nwith number 8\n\nWould you say that\n\n    def display(notice):\n        print(notice)\n\nAnd\n\n    def display(message):\n        print(message)\n\nAre the same?\n\nThey both define a function with a single parameter that gets printed when the function is called, and both definitions bind the created function to the name \u201cdisplay\u201d, so those definitions are at least very similar.\n\nSemantically, the different parameter names may make a difference to the implied expected usage for someone calling the function, and if the user wanted to pass in the parameter as a keyword argument they would need to use the relevant name per the function definition (so there\u2019s a minor difference in how the functions can be called).", "id": "j74e0g9", "owner_tier": 0.3, "score": -7.142857099446636e-10}, {"content": "Could you please explain your question further? I'm not sure i understand what was the problem with the srcond one or what you didnt understand in it.\n\nWhen I define the function and use a parameter, let's say I use two different parameters on the same function.\n\n    def display(message):\n        print(message)\n\n    display(\"this is your message.\")\n\n    def display(notice)\n        print(notice)\n\nDisplay, when called, just runs the same message.\n\nNot sure i understood. But if I did, yes, a paramater is essentialy a variable that only works inside the function. Did I understand correctly? Maybe explain what you expect?\n\nDefention of paramater in python - Parameters in python are\u00a0variables \u2014 placeholders for the actual values the function needs. When the function is called, these values are passed in as arguments. For example, the arguments passed into the function .\n\n    def display(message): # here message is a parameter\n        print(message)\n\n    display(\"hello\") # here you're calling the function with \"hello\" as argument\n\n    notice = \"me too\" # assign the value of \"me too\" to notice\n\n    display(notice) # call display function passing the argument notice\n\nline 6 function is missing `:` & `notice` is a parameter. each function should have a unique name, so there shouldn't be another function `display` in line 6.\n\nOkay, so.. the function has to have a unique parameter?\n\nWhich is why\n\n    def display(message):\n        print(message)\n\nAnd\n\n    def display(notice):\n        print(notice)\n\nProduced only one line?\nI saw I had a weak warning indicating notice wasn't defined.\nI thought I was using a unique function name by using an unique parameter.\n\nunique function name if it's in the same source code. example\n\n    def foo(msg):\n        print('hello', msg)\n\n    def foo(lol):\n        print('hi', lol)\n\n    foo('confused')\n\nwhich `foo` are you calling? it's same reason why variable names should be unique.\n\nSo the parameters are unique, but that doesn't matter..\nWhen I write a function, it needs to be unique.. so I gotta write the same function twice, with unique names    foo1(msg) and    foo2(lol)\n\nparameters are still variables & follow scope. \n\ntry this. note were using same parameter name but different function name.\n\n    def foo1(msg):\n        print('hello', msg)\n\n    def foo2(msg):\n        print('hi', msg)\n\n    foo1('not confused')\n\ne: \n\n> so I gotta write the same function twice, with unique names foo1(msg) and foo2(lol)\n\nusing your original code as example. if 2 functions does the same thing, why write 2 functions? why not use only 1 function?\n\nusing my code as example, parameters can be the same. search \"variable scope\".\n\nAlright, I will.\nI'll let you know in about 12 hrs.\n\nThanks again.", "id": "j73bkie", "owner_tier": 0.1, "score": 0.3571428564285714}, {"content": "It doesn't always have to be *named* \"parameter\", if that's what you're asking.\n\nA parameter is just a value sent to a function that the function can then do something with.  You can give it any legal Python name you choose.  It doesn't even have to match the name of the parameter in the part of the program that calls it, as long as you keep naming in the function consistent.  For example, this will work:\n\n    def multiply_by_seven(n):\n        print(7*n)\n\n    multiply_by_seven(6)\n    a = 20\n    multiply_by_seven(a)\n\nDoes this answer your question?\n\nI think I've failed at explaining my misunderstanding.\n\n    def display(message):\n        print(message)\n\n    display(\"this is your message.\")\n\nSo I defined the function, naming it, and I named the parameter.\nWhen we name the parameter, whatever value it receives always going to be named message?\nI just don't get the point or is there something I'm missing?\nA parameter is just a variable name, right?\nSo what if I have..\n\n    def display(notice)\n        print(notice)\n\nBut when I call display, what happens is it just runs  the parameters message and notice. Maybe this book is poor at explaining it...\n\nYes that's all parameters are, variables that are locally scoped to the function definition that get their value from the call site (or if there's a default specified, like `def display(msg = \"default\")`).\n\nBut, what \"point\" are you expecting that you don't understand?\n\nThe function gets some stuff as \u201cinput\u201d and presumably, you\u2019re gonna mention that stuff during the course of the function. So you should give it a name. That\u2019s all a parameter is, and once it\u2019s there, it works exactly the same as a name you\u2019d created with an equals.", "id": "j73brqk", "owner_tier": 0.3, "score": 0.2142857135714286}], "link": "https://www.reddit.com/r/learnpython/comments/10st3b6/please_help_me_understand_functions_and_parameters/", "question": {"content": "I am trying really hard to understand  specifically parameters.\nParticularly, when I define a function I.e.\n    def function(parameter):\n        print(parameter)\nAnd then call it\n    function(\"a simple string\")\nIs the parameter always going to be parameter?\nIt's receiving a value, right? So... Maybe I'm like mentally deficit... or overthinking this, but what if I do..\n\n    def function(parameter0, parameter1, parameter3)\n        print(parameter0, parameter1, parameter3)\n\nAnd then call the function\n\n    function(\"Does this cause an error?\", \"Must have exact values\", \"for each parameter?\")\n\n\nAm I over thinking this?\nI'm just following lessons from a PDF.\nPython for the absolute beginner\n\nI'm must confused and I'm not even sure how or why I'm confused.\n* Edit: formatting and typos\n* Update:\nThanks everyone for your help.\nI think I am understanding it. I believe I'm overthinking it, and over reacting.\nSorry for being difficult.", "id": "10st3b6", "title": "Please help me understand functions and parameters..", "traffic_rate": 153.12444444444444}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "reddit"}, {"answers": [{"content": "> Why do developers seem mix up the names when they mean different things?\n\nWhat's the distinction you draw between them?\n\nEdit:\n\nI looked it up. It looks like the parameter is the variable and the argument is the value.\n\nI'll be honest, I've been a programmer for almost two decades and that's the first time I've run across that distinction. Yes, those are two different things, but that's honestly not a hair I've ever found useful to split. Although, I'm sure there are specific contexts where it's important.\n\nIf I want to be specific, I will say \"variable\" or \"value\".\n\nYa it seems not to be a big deal for programmers. I\u2019m still learning and can be overly pedantic with everything. Any advice on not sweating unnecessary details as one is learning? Let alone, how to identify extra details not necessary for learning in the early stages?", "id": "jdf784j", "owner_tier": 0.7, "score": 0.9999999966666667}, {"content": ">Why do developers seem mix up the names when they mean different things?\n\nBecause the difference is subtle and can usually be inferred from context. A context where you would require a distinction between the two is rare enough that it really doesn't matter *most of the time* to use them interchangeably.", "id": "jdf1m31", "owner_tier": 0.3, "score": 0.33333333000000004}, {"content": "It's common to use them interchangeably likely because it's usually obvious from the context which is being referred to.\n\nBut it annoys me too, even if it's petty.\n\nAlso, keep in mind that some languages have them backward, so in that case, it's the language's fault, not the programmer's.\n\nThank you!", "id": "jdf21j4", "owner_tier": 0.9, "score": 0.33333333000000004}, {"content": "Many C++ IDEs would name the parameters to main argc and argv.\n\nThat's right the parameters were named... Argument Count and Argument Array!\n\nThat's because we think of the parameter values as being the arguments passed in from externally.\n\nSimilarly, JavaScript functions have a special variable called \"arguments\" that stores all the arguments included in the function call.\n\nIn some languages, they are called formal parameter and actual parameter (rather than argument.)\n\nI actually prefer parameter and parameter value but nobody will ever change the name and argument is the stronger name than parameter. (In which case, argument value and argument variable would be better names.)", "id": "jdgl7ut", "owner_tier": 0.9, "score": -3.3333333130750966e-09}], "link": "https://www.reddit.com/r/learnprogramming/comments/11zzxgj/arguments_and_parameters/", "question": {"content": "Is it a common thing for developers to use arguments and parameters interchangeably? Like I am studying callback functions and I have read several articles or YouTube videos where people are calling arguments as parameters when they are arguments\n\nEx element.addEventListener(param1, param2) when the correct way is \n\nEx element.addEventListener(arg1 arg2)\n\nWhy do developers seem mix up the names when they mean different things?", "id": "11zzxgj", "title": "Arguments and parameters", "traffic_rate": 759.40625}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "reddit"}, {"answers": [{"content": "Parameter = the name of the variable in the scope.\nArgument = the value assigned to the parameter.", "id": "janh364", "owner_tier": 0.5, "score": 0.9999999997222222}, {"content": "Just summing up everything everyone has said here:\n\nA function has parameters and takes arguments. The parameters are what are defined in the function definition (like in `def foo(bar):`, where `bar` is the parameter of the function), and arguments are passed into functions (like in `foo(69)`).\n\nThe difference here is really between definition semantics and use semantics.\n\nIn practice, you'll hear them used interchangeably without anyone batting an eye.\n\nThis. It's largely a distinction without a difference. If anyone makes a fuss over it, they are bordering on pedantry\n\nHey I learned something today :D Ty!", "id": "janibnx", "owner_tier": 0.3, "score": 0.3888888886111111}, {"content": "I've been programming for about a decade now, including university and career, and generally I'm actually fairly interested in linguistics and etymology.\n\nI have always heard arguments and parameters used interchangeable. There is no difference in usage nor meaning as far as I'm aware. Any difference would be purely etymological (ie historical).", "id": "jand536", "owner_tier": 0.7, "score": 0.05555555527777778}, {"content": "Toe-may-to, toe-mah-to IMHO.  I generally use args because that is what is commonly used here.", "id": "jandhrh", "owner_tier": 0.1, "score": -2.7777777917354424e-10}, {"content": "> Why is it \"parameters\" passed to function definitions but \"arguments\" passed to class definitions?\n\nIt's not.\n\nIn practice, there is no difference between the terms.\n\nAccording to the Python docs, functions are defined with a list of *parameters* that *arguments* are passed into.\n\nhttps://docs.python.org/3/tutorial/controlflow.html#defining-functions\n\n> but I don't understand why in the grammar specification of class definitions The inheritance is specified to be an enclosed argument_list, as opposed to the parameter_list like in function definitions \n\nBecause that's a list of values, not a list of placeholder names\n\n> Are class definitions considered as actual calls?\n\nNo, but calls are made by the interpreter as part of class definition. The parentheses are just syntax--just like any other syntax, they don't always mean the exact same thing--their behavior depends on context. You *can* define a class by making a call to a type, but in this case, \"arguments\" is used generically--as some value that defines the code operation.\n\n> parameters and arguments both appear inside a pair of parenthesis(()), and I've always thought them as synonyms\n\nSo to tuples and mathematical operations. Sharing syntax characters does not mean sharing behaviors.", "id": "janeukw", "owner_tier": 0.7, "score": 0.05555555527777778}, {"content": "Parameters are what\u2019s used inside the function, arguments are what are passed to it from outside the function. Of course, they are often the same.", "id": "janhqtx", "owner_tier": 0.1, "score": 0.05555555527777778}], "link": "https://www.reddit.com/r/learnpython/comments/11g8wal/parameters_vs_arguments_why_is_it_parameters/", "question": {"content": "**parameters** and **arguments** both appear inside a pair of parenthesis(`()`), and I've always thought them as synonyms until recently when I read their glossary entries. So I am reading through the official docs trying to understand more about the differences between these two terms.\n\nSo far my understanding is: parameters appear in definitions (which are compound statements) specifying what kind of arguments can be passed in the actual calls (which are primary expressions), but I don't understand why in the grammar specification of [class definitions](https://docs.python.org/3/reference/compound_stmts.html#class-definitions) The `inheritance` is specified to be an enclosed `argument_list`, as opposed to the `parameter_list` like in [function definitions](https://docs.python.org/3/reference/compound_stmts.html#function-definitions) . Are class definitions considered as actual calls? If so, where are the parameters of these calls defined? Since at least there's one possible keyword argument `metaclass`, they must be defined somewhere? It is said class objects are constructed by the built-in `type`, which is also the default metaclass, so I thought maybe `type` rather than the class being defined is the callable being called here, but I've found no luck trying out things like `type.__code__`, `type.__dict__`, nor with the `dis` module.\n\nSoo.. to summarize my questions, why do class definitions and function definitions differ in this way? Is class definition secretly a function call when `()` is used? Also, are there any other legal keyword arguments than `metaclass`? Thanks for reading.\n\nBelow are some relevant pages in the official docs for quick references:\n\n* [grammar spec: function definition](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-funcdef)\n* [grammar spec: class definition](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-classdef)\n* [grammar spec: calls](https://docs.python.org/3/reference/expressions.html#calls)\n* [glossary: argument](https://docs.python.org/3/glossary.html#term-argument)\n* [glossary: parameter](https://docs.python.org/3/glossary.html#term-parameter)\n* [using metaclasses](https://docs.python.org/3/reference/datamodel.html#metaclasses)", "id": "11g8wal", "title": "Parameters vs. Arguments: Why is it \"parameters\" passed to function definitions but \"arguments\" passed to class definitions?", "traffic_rate": 153.12444444444444}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "reddit"}, {"answers": [{"content": "The 'few resources online' are correct. Arguments are the actual values, parameters are the placeholders that take arguments as their value. The terms are often used interchangeably because it's obvious what is meant from the context. Don't stress over the difference.\n\nThanks a ton for clarifying this.", "id": "cyz38fk", "owner_tier": 0.5, "score": 0.9999999998550726}, {"content": "A parameter represents a requirement.  An argument represents an attempt to satisfy the requirement.  Try visualizing it outside the context of programming.\n\n* I want a pizza with 3 toppings or less - Parameter.\n* Here's a pizza with pepperoni, sausage, and onion - Argument\n\nWhen you define a function, its definition may have parameters.  When you call a function, you supply arguments according to the parameters in the definition.\n\nYour example does serve the need, but I think this would be more realistic:\n\n* I can serve a pizza with 3 toppings or less. - Parameter\n* Serve me a pizza with pepperoni, sausage and onion - Argument\n\nMade me chuckle though :)\n\n> Here's a pizza with pepperoni, sausage, and onion - Argument\n\nThat's definitely an argument because you **never** combine pepperoni and onions. Ne-Ver! \n\n:)", "id": "cyz4ws1", "owner_tier": 0.7, "score": 0.17391304333333332}, {"content": "Arguments is what you have with your parents  \nParameters are the settings you need to calibrate your ship guns.\n\nWait, am I in the wrong subreddit?\n\nNo, no... You're think of /r/ships.\n\nHere, arguments are what you have with your friends when you disagree.  \nParameters are the set of physical properties of the atmosphere, like temperature, pressure, and density.", "id": "cyz4oqn", "owner_tier": 0.5, "score": 0.1014492752173913}, {"content": "I'd go with the parameter is placeholder and argument is a placeholders value.\n\nA definition of an object has parameters whereas an instance of an   object has arguments.\nIn that sense both arguments and parameters can be passed. Because for example a function inside a class can be passed the parameters of the class. \n\nParameters are like the connectors on the back of a PC, arguments are the signals that pass from the connecting wire through the connector inside the PC.\n\nMy2c \n\nThanks for your input, the analogies helped :)", "id": "cyzknn4", "owner_tier": 0.3, "score": 0.04347826072463768}, {"content": "Arguments are used by the Klingon to conquer random software.", "id": "cyz4fvk", "owner_tier": 0.7, "score": 0.01449275347826087}, {"content": "1 You could have Wikipedia-ed this. The arg is the data you send. The parameter is the var inside the func that holds the arg.\n\n2 No-one cares if get the two mixed up. No-one even knows the difference (apart from Wikipedia) anyway. Really no-one cares and this is why the words are used inconsistently.\n\n3 You guys should cooperate on making an awesome app and stop worrying about this. \n\nHaha, thanks. My colleague and I did have a look through quite a few resources, but I decided that a consensus would put our minds as ease. Thanks again :)", "id": "cyz38ho", "owner_tier": 0.3, "score": 0.04347826072463768}, {"content": "Test", "id": "cyzko3k", "owner_tier": 0.3, "score": -1.4492753535109117e-10}], "link": "https://www.reddit.com/r/Python/comments/412q22/difference_between_arguments_and_parameters/", "question": {"content": "Hi guys, myself and a colleague have had some issues figuring out the differences between Arguments and Parameters. Coming from a highschool-IT background I was always told that the term is \"Parameter passing\". My colleague has always been taught \"Argument passing\" and we can't quite figure out amongst ourselves if one of us has an incorrect understanding.\n\n ie:\n\n    def Calculate(x,y) #I believe the () items are *parameters*\n        z = x + y\n        return z\n\n    Calculate(5,6) # I believe the () elements are *Arguments*\n        *returns 11*\n\nA few resources online have outlined the difference between Arguments and Parameters as:\n\nArguments: The actual value passed, ie. Calculate(**5**,**3**). *Actual Arguments*\n\nParameters: The *placeholders* ie. Calculate(**x**,**y**). *Formal Parameters*\n\nOthers have designated parameters and Arguments as interchangeable terms. My experience with a tutorial (LPTHW, my bad!) are that arguments are passed on a program-by-program basis and that parameters are passing in-program.\n\n    ie. $ python MyScript.py arg1 arg2 arg3\n\nIf someone could end this dilemma or provide tutorials outlining the difference, I would be very grateful!", "id": "412q22", "title": "Difference between Arguments and Parameters", "traffic_rate": 207.9358484294499}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "reddit"}, {"answers": [{"content": "They're pretty much used interchangeably afaik. However the difference is that the parameter is the name of the variable you create along with the function:\n\n`def myFunction(a, b, c):`\n\n`a`, `b`, and `c` are the parameters here. \n\nArguments are the data that you pass in to that function when the function is called:\n\n`result = myFunction(\"yes, \"no\", \"maybe\")`\n\n`\"yes\"`, `\"no\"`, and `\"maybe\"` are the arguments you pass in to the function. Whilst in the scope of that function, `a` will be equal to `\"yes\"`, `b` will be equal to `\"no\"`, and `c` will be equal to `\"maybe\"`.\n\nHere is a realistic example that takes two numbers and multiplies them together:\n\n    def multiplication(x, y):\n        return x * y\n    \n    result = multiplication(2, 5)\n    print(result)\n    >>> 10\n\nSo if I am understanding correctly, `def multiplication (x, y)`, `x` and `y` are the parameters, and `result = multiplication(2, 5)`, `2` and `5` are the arguments that are being passed to the function. \n\nCorrect.\n\nA function receives parameters.\n\nYou pass arguments to a function.\n\n><insert football joke here>\n\nno", "id": "e19aesw", "owner_tier": 0.7, "score": 0.9999999999487179}, {"content": "Yes! Parameters are just placeholders for arguments.\n\nWhen you call a function like range(0,10), you are passing through arguments. Range() is configured to accept three arguments, but always default to 0 if left empty.\n\nFor instance, if we were to look at the built-in function, it would something like \"def range(x,y=0,z=0):\"\n\nIf we call the range function, with no values, we get an error\n\nIf we call the range function with one argument, it will perform the function, because y and z are defaulted to zero until you pass through a different value like range(1,10,2)\n\nAfaik z=1?\n\nYes, yes. You're right. When i wrote the explanation, first cup of coffee was not consumed. lol\n\nIt's ok. I've already had 3 cups. It's 12 pm here ", "id": "e19ahkt", "owner_tier": 0.3, "score": 0.09230769225641025}, {"content": "Thanks for asking this question, also a total noob and this helped make jargon clearer.\n\nDitto, been developing for over 20 years and TIL :-p\n\nSomeone had asked me to explain the difference between the two, but I couldn't put it into words. That's when I realized I didn't fully understand it", "id": "e19im72", "owner_tier": 0.5, "score": 0.056410256358974356}, {"content": "Parameters are the idea of what is being passed into a function. X and Y are pretty common. The argument is what IS actually being passed into a function. Such as 1, 1.0, or 'one'.", "id": "e19e3ma", "owner_tier": 0.1, "score": 0.015384615333333334}, {"content": "Just think of parameters as the place holders for arguments. So when making a function you put parameters that will later be replaced with actual arguments. \n\nEx. \ndef my_func(x,y):\n        return x+ y\n\nprint(my_func(2,3))\n\nIn this example when writing the function definition your \"parameters\" (place holders) are x and y. Then when you call your function your \"arguments\" are 2 and 3. ", "id": "e19nqd9", "owner_tier": 0.1, "score": 0.010256410205128205}, {"content": "When you write your function declaration you define it's parameters. When you call a function you pass it arguments. ", "id": "e19tvzd", "owner_tier": 0.5, "score": 0.010256410205128205}, {"content": "In short:\n\nThey hypothetical is the parameter. The thing that's actually passed to the function in practice is the argument.\n\nExample:\n\nWith the formula `2x + y = z` , `x` and `y` are ***parameters***. \n\nNow let's say you're asked \"find z at `x = 3` and `y = 1`.\" 3 and 1 are ***arguments*** being passed to the function `2x + y`\n\nso simple, thanks u/ImSuperSerialGuys. \n\nNothing like simple math to help one understand something. Thanks!\n\nHappy to help!", "id": "e1a7kwm", "owner_tier": 0.7, "score": 0.03076923071794872}, {"content": "Just adding to what others have said, you also have arguments and keyword arguments. You may want to also peak at asterisk and double asterisk special options when defining your functions", "id": "e1aimhw", "owner_tier": 0.3, "score": 0.0051282050769230775}, {"content": "Probably one of the best python questions I have read thus far.", "id": "e1adxlc", "owner_tier": 0.1, "score": 0.0051282050769230775}, {"content": "You pass IN the argument, and the parameter receives that value (or string)  from what passed it in. ", "id": "e19pfqr", "owner_tier": 0.9, "score": -5.1282050970386105e-11}], "link": "https://www.reddit.com/r/learnpython/comments/8tq074/noob_here_what_is_the_difference_between_a/", "question": {"content": "Just getting back into python and I'm really trying to understand the fundamentals so that I can develop a good solid understanding of python, in which I can build on. So my question is, what is the difference between an argument and a parameter? Both sound the same to me when I read it. Is a parameter just a place holder for an argument?", "id": "8tq074", "title": "Noob here. What is the difference between a parameter and an argument?", "traffic_rate": 153.12444444444444}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "reddit"}, {"answers": [{"content": "**PROGRAMMING**\n\nImagine you define a simple function to give you a sum. Such a code might look something like this (in javascript, other languages will look similar):\n\n.\n\nfunction sum(addend1, addend2) {\n\nreturn addend1 + addend2;\n\n}\n\n.\n\naddend1 and addend2 would be the *parameters* of this function.\n\nNow, when I call that function elsewhere in the code with something like this...\n\ntotal = sum(40, 2);\n\n40 and 2 are the particular *arguments* passed to the sum function.\n\nIf I instead did something like this...\n\n.\n\nvalue1 = 40;\n\nvalue2 = 2;\n\ntotal = sum(value1, value2);\n\n.\n\n...then value1 and value2 are *variables* that get passed to the sum function. Here, 40 and 2 are still the *arguments* that get passed.\n\nIn strict programming definitions, a parameter is a variable used in defining the function, while arguments are the particular values (not just numbers, but strings, too) that are passed. In common usage, it's not uncommon to hear them used interchangeably.\n\n**MATH**\n\nSimilar to programming, a parameter is a value that defines a particular function.\n\nThink of the line formula: y=mx+b\n\nAs written, that's just a general formula. If we define m (the slope) and b (the y-intercept, or where the line crosses the y axis), then we define the parameters for a particular line.\n\nAdding the parameters m=5 and b=12 defines a function for a particular line, [y=5x+12](http://www.wolframalpha.com/input/?i=y%3D5x%2B12). Notice that defining the parameters has changed this from a general formula to a specific line. That's what parameters do.\n\nx itself is a variable, as is y (and y is dependent on x, of course), so any numbers can be passed to them.\n\nWhen you pass a particular value to a variable, that value is called an *argument*. [If I put x=9 into the formula y=5x+12, then I get y=5(9)+12=45+12=57, or y=57 for short](http://www.wolframalpha.com/input/?i=x%3D9%2C+y%3D5x%2B12). x is the variable, but 9 is the argument passed to that variable.\n\nThank you, especially for the seperation of programming and math. It helped a lot.\n\nJust to expand a little bit, in practice the terms *parameter* and *argument* get thrown around interchangeably when talking to programmers, even if it is not completely correct to do so.\n\nOther terminology you might hear is *formal parameter*, which means the same thing as *parameter*, and *actual parameter*, which means the same thing as *argument*.", "id": "c74y3bi", "owner_tier": 0.5, "score": 0.9999999980000001}, {"content": "Note: I program more in Java, and typing this quick, so the examples here are Java-based. It's perfectly understandable in Python, just that there'll be different uses of \"(){}[];\"\n\nParameters: When you call a function like this:\n\ndo_something(foo,bar)\n\nfoo and bar are both parameters to the function. They define things that can be brought into the function to be worked on. So, for instance, if do_something() did addition, you could have the function add foo and bar, and return it. (using the \"return\" keyword, i.e. \"return foo + bar\")\n\nArguments: This is a method to make it a bit more flexible when it comes to calling a function. If I change the above to be:\n\ndo_something(foo = 5, bar = 10)\n\nI can now call that function in some interesting ways:\n\ndo_something() // just use the default values\ndo_something(15,20) // provide my own values, in the order they're listed in the function definition\ndo_something(bar = 15) // Use the foo default, but provide my own bar\ndo_something(bar = 20, foo = 10) // Give values to them backwards\n\nI had to look this one up, as we don't quite have an equivalent in Java. I would look [here](http://docs.python.org/release/1.5.1p1/tut/keywordArgs.html), though, to see some of the other cool things that you could do with this idea.\n\n\nThanks, made it simple and helped my confusion, both you and gmsc. Am I right in thinking it is like a temporary variable?\n\nThat's partially correct, but for the purposes of programming, it's necessary to understand the concepts of variable scope.\n\nThe ELI5 version:\n\nWhen the computer is running your code, it looks at it as several chunks, typically known as blocks. You can stick blocks of code inside each other as much as you want, and any variables inside one block are kept until you finish the block it was made in. Blocks of code inside others can see and do stuff with the variables from the block they're inside of (their parents), but not other blocks at the same level (their siblings). Once the computer finishes a block of code, everything inside it that wasn't given back to its parents before or as it finished is gone. This is known as the \"scope\" of a variable - from when it is created to when it is destroyed, at which point it's gone. Common blocks are things like loops, conditionals, methods, etc.\n\nELINQ5 and slightly more applicable version:\n\nIn the case of a method parameter, this is essentially creating a new variable that has a scope of the method - it is created as soon as the method is called, and ends as soon as the method ends. When you call that method elsewhere in your code with actual values, you're setting the value of that variable and then executing it. In many languages (I don't recall if python is one of them) if you pass an existing variable to a method, and then alter it inside the method, then the variable outside is also changed, because it still exists in the outside method.", "id": "c74xwyj", "owner_tier": 0.5, "score": 0.599999998}, {"content": "First, parameters and arguments are pretty much the same thing...different language prefer different words.\n\nLet say you want to so some task over and over...say convert feet to meters.  Instead of cutting an pasting the same code over and over, you might create a *function*.  That takes feet, multiplies by 0.305, and spits out meters.\n\nYou might write your function like this:\n\n    float feet_to_meters(float f)\n    {\n        float m\n\n        m = f * 0.305\n\n        return f\n    }\n\n(note this isn't Python, just C-ish pseudocode)\n\nThen you use it like:\n\nFirst, you have to tell your function how many feet you are starting with:\n\n    result = feet_to_meters(22.5)\n\nSo you are passing 22.5 to your function as a parameter, and it is *returning* the new value, and storing it in the variable result.", "id": "c74xzb0", "owner_tier": 0.9, "score": -1.999999987845058e-09}], "link": "https://www.reddit.com/r/explainlikeimfive/comments/13la80/eli5_what_are_parameters_and_arguments/", "question": {"content": "The title explains it, it will help if you can explain it in computer programming terms too. I'm asking this because I'm self-teaching myself Python and I'm confused on what Parameters and Arguments are.", "id": "13la80", "title": "ELI5: What are parameters and arguments? (programming and math)", "traffic_rate": 4831.919763513513}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "reddit"}, {"answers": [], "link": "https://www.reddit.com/r/learnpython/comments/d8vlij/what_are_parameters_and_arguments_in_python/", "question": {"content": "Hello everyone,\n\nI do not understand what parameters are and arguments are. What are they used for, why do we have to use them, and when do we use them? If you know please comment down in the description.", "id": "d8vlij", "title": "What are Parameters And Arguments In Python?", "traffic_rate": 153.1714814814815}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "reddit"}, {"answers": [{"content": "\r\n    The order of evaluation in the case of multiple function arguments is undefined! According to your tests, arguments were evaluated right to left, but you cannot count on that to be the case at all times: different compilers, or even different versions of the same compiler may behave differently, and thus produce different results!\n\nDo not rely on a specific order of evaluation of function arguments!\n\r\nHaving said, that, I can only agree to pwassers comment above.\n\r\nP.S.: http://stackoverflow.com/questions/2934904/order-of-evaluation-in-c-function-parameters[^]\r\n", "id": "2_752360_2", "owner_tier": 0.3, "score": 5.0}], "link": "https://www.codeproject.com/Questions/752235/function-parameter-treatment", "question": {"content": "\r\n\t\t\t    I tested this code in vs2013\n\r\n#include <iostream>\r\nvoid test(int a, int b,int c)\r\n{\r\n\tstd::cout << \"\\n\" << a << \"-\" << b<<\"-\"<<c;\r\n}\r\nvoid main()\r\n{\r\n\tint a = 1;\r\n\ttest(a++, ++a, a);\r\n\ta = 1;\r\n\ttest(a++, a++, a++);\r\n\ta = 1;\r\n\ttest(++a, ++a, ++a);\r\n\ta = 1;\r\n\ttest(a++, ++a, a++);\r\n}\r\nand out put was\r\n2-3-3\r\n3-2-1\r\n4-4-4\r\n3-4-1\r\nthen I tested this code in bc\r\n#include <iostream.h>\r\nvoid test(int a, int b,int c)\r\n{\r\ncout << \"\\n\" << a << \"-\" << b<<\"-\"<<c;\r\n}\r\nvoid main()\r\n{\r\n\tint a = 1;\r\n\ttest(a++, ++a, a);\r\n\ta = 1;\r\n\ttest(a++, a++, a++);\r\n\ta = 1;\r\n\ttest(++a, ++a, ++a);\r\n\ta = 1;\r\n\ttest(a++, ++a, a++);\r\n}\r\nthen the output was\r\n2-2-1\r\n3-2-1\r\n4-3-2\r\n3-3-1\r\nif we think that arguments are sent from right hand to function the output of second code in bc is undestandable but I can't understand the output of first code.\r\nwho can help me?\r\n\t\t    ", "id": "752235", "title": "function parameter treatment", "traffic_rate": 0}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "codeproject", "tags": ["C++"]}, {"answers": [{"content": "\r\n    Hello Ashu,\n\r\nPlease have a look at this[^] tutorial.\n\r\nBasically you need to use createScope method to create the scope within which the script is going to run and then set the variables (scope.SetVariable(Key, Value)) you want to pass to the script in it. The script can refer to these variables using the key specified in setVariable call.\n\r\nRegards,\r\n", "id": "2_624498_1", "owner_tier": 0.3, "score": 0}], "link": "https://www.codeproject.com/Questions/624464/Passing-parameter-in-python-script-from-Csharp", "question": {"content": "\r\n\t\t\t    Hi,\n\r\nI am using Ironpython with C#\n\r\nI wrote below code to access test.py script file which will process the input and return the output. But I don't know how can I pass the parameter in it? \n\r\nAnyone familiar with C#, Ironpython, kindly respond.\n\n\nC#\n\r\nScriptEngine pyEngine = Python.CreateEngine();\r\n                int _ans = pyEngine.Execute(@\"test.py\");\n", "id": "624464", "title": "Passing parameter in python script from C#", "traffic_rate": 0}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "codeproject", "tags": ["C#", "Python", "IronPython"]}, {"answers": [{"content": "\r\n    The difference the two programs behave differently is probably because of the parameter you are passing to the program.\r\nCheck your parameters in both cases.\r\n", "id": "2_1014556_1", "owner_tier": 0.5, "score": 0}, {"content": "\r\n    The possible reason is that the callee's environment is different in the two ways of launching. In case of launching it from another c# program, the callee may think it resides on the folder same as the caller.\r\nI moved the caller into the folder of the callee and then the callee launched and runs as expected.\r\n", "id": "2_1014583_1", "owner_tier": 0.1, "score": 1.0}], "link": "https://www.codeproject.com/Questions/1014530/Whats-difference-between-launching-a-program-via-c", "question": {"content": "\r\n\t\t\t    In my opinion, it should have the same result between launching a program from command line as:\r\n    <program path=\"\"> <a-parameter>\n\r\nand launching from another c# program by calling\n\nC#\n\r\nProcess p = new Process();\r\np.StartInfo.FileName = @\"D:\\programs\\cctv-workstation-sim\\Release\\CCTV Workstation.exe\";\r\np.StartInfo.Arguments = wksSID;\r\np.Start();\n\n\r\nBut the fact is that the two ways of launching causes different result. In the beginning of program execution, the two launching is the same. But, in the latter stage, they act differently.\n\r\nThe launched & launching programs are in c#.\n\r\nI should trace to understand what's wrong with it. But if anyone tells me the possible cause, it's more efficient.\r\n\t\t    ", "id": "1014530", "title": "What's difference between launching a program via command line & via calling c# API?", "traffic_rate": 0}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "codeproject", "tags": ["C#5.0"]}, {"answers": [{"content": "\r\n    Further to the other solutions but picking up on your comment Quote:I heard the phrase the best function are those without parametersI suspect someone has said this in respect of using classes. They were probably trying to get over that you should use the (internal) properties of the class within it's methods and functions rather than relying on external data passed into (the class).\n\r\nThis is a very narrow view of the use of functions and would usually mean that you have to have an instance of the class in order to do anything with the functions. But having static \"helper\" classes can also bring its own problems. There is a good discussion on that topic here[^] - see the solution by Mark Rasmussen.\n\r\nThere is no one-size-fits-all solution and what one person thinks of as \"best\" in one scenario may not be the best for another scenario. Your ability to judge this for yourself will increase with practise\r\n", "id": "2_1264054_1", "owner_tier": 0.5, "score": 3.0}, {"content": "\r\n    Your question is tagged with \"PHP\" but I think this is a generic question, not dependend on a special programming language.\n\r\nIf you don't use the parameters in your function, it is very \"static\" so to say.\r\nBy using the parameters you can use your function more versatile.\n\r\nJusat imagine, you want to write a function that adds two integers.\r\nIs it not simple, to use this two integers as the parameters of the function?\r\n", "id": "2_1264009_3", "owner_tier": 0.3, "score": 0}, {"content": "\r\n    Simple: a function with parameters can work on data entirely internally, it doesn't rely on external values. \r\nThink of it like this - if you wrote an addition function writing it without parameters makes it clumsy to use:\r\n1) Load left value into variable1\r\n2) Load right value into variable2\r\n3) Call function.\r\nWith parameters, it's a lot cleaner:\r\n1) Call function passing left and right values.\n\r\nIt also means that recursive functions can work: where a function is defined in terms of itself:\n \n\r\nfactorial (n): where n > 1 then n * factorial(n - 1) else 1To do that with variables is a lot more complex, because you need to save the value of n in a stack of some form yourself to prevent you messing up previous incarnations.\r\n", "id": "2_1264010_1", "owner_tier": 0.9, "score": 0}], "link": "https://www.codeproject.com/Questions/1264007/What-is-the-difference-between-function-with-param", "question": {"content": "\r\n\t\t\t    Examples:\n\nPHP\n\r\n//function with Parameters\r\n\r\n  public function Name($fname, $lname) {\r\n\r\n     return $fname . ' ' . $lname;\r\n\r\n  }\r\n\r\n\r\n//function without Parameters\r\n\r\n  public $fname;\r\n  public $lname;\r\n\r\n\r\n  public function Name() {\r\n\r\n    return $this->fname . ' ' . $this->lname;\r\n\r\n  }\n\nWhat I have tried:\n\r\nplease Just answer my question, It's quite hurtful to be ignored so please it doesn't matter if its accurate or not, I just want the idea's, concepts about it. so please don't be a arrogant prideful ass. [EDITED]\r\n\t\t    ", "id": "1264007", "title": "What is the difference between function with parameter and function without parameter, and what are their benefits?", "traffic_rate": 0}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "codeproject", "tags": ["PHP"]}, {"answers": [{"content": "\r\n    Optional parameters have to be the last parameters in the signature. Put differently: All parameters after the first optional parameter have to be optional as well. So in your given example you would have to move the parameters 1 and 4 to the end of the signature of the method in order to be able to call it with arg2, arg3, arg5 only:\nC#\n\r\nvoid Method(int arg2, int arg3, int arg5, int arg1=0, int arg4=0)(Where the default values of 0 can be different of course.)\n\r\nSomewhat related, though not a solution here, is the named argument syntax. If you declared all of your parameters as optional, you could call the method like this:\nC#\n\r\nMethod(arg2: 1, arg3: 2, arg5: 3);\n\r\nFor further reading, take a look here: Named and Optional Arguments[^]\n\nEdit: Addendum to named arguments: You could use them for method calls that have or have none optional parameters. Just like with optional parameters, those arguments following the first named argument also have to be named.\r\nMost often named arguments are used to be able to skip optional parameters: Without named arguments, if you wanted to provide a value for, say, the second optional parameter of a method, you would have to specify a value for the first one, too. Named arguments allow you to provide values only for those optional parameters that you want to.\r\n", "id": "2_1075285_2", "owner_tier": 0.3, "score": 1.2}, {"content": "\r\n    In addition to Solution 1.\n\r\nThere are two alternatives. The optional parameters feature has been added to C# later, and before it happened, there was the older opportunity, related to the fact that it's allowed to have more than one method under the same name. Usually it's called by quite a confusing term \"method overloading\". (Yes, many beginners have been badly confused and asked questions on this forum.) So, alternatively, you could write:\nC#\n\r\nvoid Method(int first, int second) { /* ... */ }\r\nvoid Method(int first) {\r\n   Method(first, 0); // 0 is the same very default value for \"second\" here\r\n   // use also the parameter \"first\" now\r\n   // ...\r\n}I would say that the newer approach based on optional parameters is better, more explicit, but some prefer the older style described above. Some do it because they use VS 2008 (with the latest target of .NET v.3.5) or earlier.\n\r\nNote that always there are cases where the code at the call is ambiguous, then using exact types helps, say, using explicitly typed variable/members/constants instead of immediate constants, such as 0.\n\r\nAs to the newer approach, it's important to understand that the arguments with default values can be not only optional but also named, which is event better feature. The named mechanism is opposed to the positional one; the order of arguments at call may vary. Please see: Named and Optional Arguments (C# Programming Guide)[^].\n\n\u2014SA\n", "id": "2_1075295_7", "owner_tier": 0.7, "score": 2.0}, {"content": "\r\n    What to do ?\n\r\nWhen trying to decide whether to use optional parameters, or define multiple methods with the same name, but different parameter lists (method overloading): consider optional parameters in one method definition when it doesn't matter if that optional parameter has a value defined ... in other words, the code that executes is the same. However, if you have methods that use different Types of parameters, use method overloading. See: [^].\n\r\nWhat not to do ?\n\r\nA potential problem with optional parameters is that certain Types used as parameters will be auto-initialized to non-null values, and you may have trouble distinguishing whether the caller passed you a valid value, or not.\n\r\nFor example:\n\nprivate void MyMethod(int int1, string string1 = \"\", int int2 = 0)\n\r\nIn the body of this method, how will you know if the values of 'string1, and 'int1 have been explicitly set by the caller, rather than having been set by default ? That can lead to quirky code work-arounds like this:C#\n\r\nprivate void MyMethod(int int1, string string1 = null, int? int2 = null)\r\n{\r\n    Console.WriteLine(\"{0}, {1}, {2}\", int1, string1, int2);\r\n\r\n    if(string1 != null) // do something with 'string1\r\n\r\n    if(int2 != null) // do something with 'int2\r\n}Where you take advantage of the fact that Type 'String can be 'null, and you use a nullable-Int parameter to allow the integer entry to be null. I consider this a \"code-smell.\"\n\r\nAnother strategy, if all your parameters are the same Type, is to use the 'params keyword to allow a variable length Array of parameters:C#\n\r\nprivate void MyMethodWithVariableParams(params int[] intParams)\r\n{\r\n    foreach(int theInt in intParams)\r\n    {\r\n        // do something with 'theInt\r\n    }\r\n}This is most useful when you really want to iterate over the parameter Array. It is less useful, when you have to write if/else statements, or a switch statement, to handle different lengths of the parameter Array.\n\r\nIn my opinion, I think it best to minimize use of optional parameters, but, if you do, you can take advantage of how the calling syntax that uses Named Parameters allows you to skip parameters you don't want to set in a given method call.\n\r\nI find it \"unfortunate\" that many people refer to \"Named Parameters\" as if they were another type of parameter that can be used in declaring a Method, when, in fact, this is only an optional syntax for calling a Method.\n\r\nAn interesting essay on possible drawbacks of using optional arguments: [^].\n\r\nI prefer to see method-overloading when there are distinct parameter-configurations that will be called frequently ... as long as: code common to all method-overloads is factored out into a separate method.\n\r\nIf you are using .NET 4.0 or later, and you really want to make your code smell good, you can use the 'OptionalParameter Attribute:\n\r\nusing System.Runtime.InteropServices;\r\n\r\nprivate void MyMethod(int int1, [OptionalParameter] string1, [OptionalParameter] int2)\r\n{\r\n    // whatever\r\n}To use this attribute, you must reference the System.Runtime.InteropServices library: however, the variables will be initialized in the same way that optional variables defined without the Attribute are. Using this Attribute has no run-time performance penalty.\r\n", "id": "2_1075398_4", "owner_tier": 0.5, "score": 5.0}], "link": "https://www.codeproject.com/Questions/1075279/Optional-parameter-Using-a-Method-with-arguments-u", "question": {"content": "\r\n\t\t\t    I have a Method with 5 arguments:\r\nMethod(arg1, arg2, arg3, arg4, arg5);\n\r\nIn a situation I have to use same method with 3 arguments\r\nMethod(arg2, arg3, arg5);\n\r\nOptional Parameter is something I found! But, here other arguments have no defaults.\n\nC# Corner : Error Display[^]\n\r\nDo we have any other ways in C# for situations like this. \r\nPlease, ignore if this is a stupid question and my knowledge is way worse to discuss.\n\r\nThanks!\r\n\t\t    ", "id": "1075279", "title": "Optional parameter: Using a Method with 3 arguments, using the same Method with 2 arguments", "traffic_rate": 0}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "codeproject", "tags": ["C#"]}, {"answers": [{"content": "\r\n    Read the error message: it contains useful info: \n\n\r\n  File \"main.py\", line 10, in <module>\r\n    point_dist = math.sqrt((math.pow(x2 - x1), 2.0) + (math.pow(y2 - y1), 2.0))\r\nTypeError: pow expected 2 arguments, got 1 So, it shows you the line and says that the function pow expects two parameters and got one.\r\nWhich is true:\nPython\n\r\n(math.pow(x2 - x1), 2.0)\nPython\n\r\n(math.pow(y2 - y1), 2.0)Both of those calls only send the first parameter to the function.\n\r\nLook at the documentation: Python pow() Function[^] - it tells you what a call to pow should look like.\n\r\nYou need to learn how to fix these problems for yourself, you are going to meet them every day, often many times a day - and it's much, much faster to learn how to fix them yourself instead of \"guessing and hoping\", or asking others to fix them! This may help you next time you get a compilation error: How to Write Code to Solve a Problem, A Beginner's Guide Part 2: Syntax Errors[^]\r\n", "id": "2_5331180_2", "owner_tier": 0.9, "score": 5.0}, {"content": "\nQuote:ive tried rewriting the code with everypossible symbol for power but im so lost now anyhelp will be greatly appreciated.\r\nWriting code is not a matter of luck.\nPython\n\r\n# the syntax of pow is this :\r\nY= math.pow(Value, Power)\r\n# in your case, the value is x2 - x1 and the power is 2\r\nWhich make the code\r\nY= math.pow(x2 - x1, 2.0)\r\nsee the difference ?\n\r\nAdvice, use a programmer's text editor, one of the features is that is highlight what is inside a matching pair of parenthesis.\nPython\n\r\npoint_dist = math.sqrt((math.pow(x2 - x1), 2.0) + (math.pow(y2 - y1), 2.0))\r\n#                                ^^^^^^^                    ^^^^^^^\r\n#                       ^^^^^^^^^^^^^^^^^^^^^^     ^^^^^^^^^^^^^^^^^^^^^^\r\n#                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", "id": "2_5331187_1", "owner_tier": 0.5, "score": 0}, {"content": "\r\n    As the error shown here (TypeError): pow expected 2 arguments, got 1.\r\nLook for the expression \r\n---> Python\n\r\nmath.sqrt((math.pow(x2 - x1), 2.0) + (math.pow(y2 - y1), 2.0))\n\n\r\nHere, math.pow function expect 2 arguments but here it is given only one i.e. (x2 - x1).\n\r\nNow after correcting this, your code look like:\n\n\nPython\n\r\nimport math\r\n\r\npoint_dist = 0.0\r\n\r\nx1 = float(input())\r\ny1 = float(input())\r\nx2 = float(input())\r\ny2 = float(input())\r\n\r\npoint_dist = math.sqrt(math.pow((x2 - x1), 2.0) + math.pow((y2 - y1), 2.0))\r\n\r\nprint('Points distance:', point_dist)\n\r\nFor more details visit : https://www.w3schools.com/python/ref_func_pow.asp\n", "id": "2_5331290_1", "owner_tier": 0.1, "score": 1.0}], "link": "https://www.codeproject.com/Questions/5331172/I-need-help-with-this-error-message", "question": {"content": "\r\n\t\t\t    I'm new to coding and I'm trying to do this challenge in my schoolwork and it keeps giving me this error message:\n\r\nThis is the instructions for the challenge:\n\r\nAssign point_dist with the distance between point (x1, y1) and point (x2, y2). The calculation is: Distance = SquareRootOf( (x2 - x1)2 + (y2 - y1)2 ).\n\r\nHere's my code:\n\nPython\n\r\nimport math\r\n\r\npoint_dist = 0.0\r\n\r\nx1 = float(input())\r\ny1 = float(input())\r\nx2 = float(input())\r\ny2 = float(input())\r\n\r\npoint_dist = math.sqrt((math.pow(x2 - x1), 2.0) + (math.pow(y2 - y1), 2.0))\r\n\r\nprint('Points distance:', point_dist) \n\r\nand this is the error message:\n\n \n\r\nExited with return code 1.\r\nTraceback (most recent call last):\r\n  File \"main.py\", line 10, in <module>\r\n    point_dist = math.sqrt((math.pow(x2 - x1), 2.0) + (math.pow(y2 - y1), 2.0))\r\nTypeError: pow expected 2 arguments, got 1\n\r\nWhat am I doing wrong??\n\nWhat I have tried:\n\r\nI've tried rewriting the code with every possible symbol for power, but I'm so lost now. Any help will be greatly appreciated.\r\n\t\t    ", "id": "5331172", "title": "I need help with this error message! !", "traffic_rate": 0}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "codeproject", "tags": ["Python"]}, {"answers": [{"content": "\r\n    The names of variables outside the function aren't passed to the function in C or C++ - all that is passed is the content.\r\nIn your case, what is passed is a pointer - a memory address - and it does not have a name.\r\nWorse, if your calling function stored the data in a local variable, it is quite likely that it never had a name once the app was compiled, as many optimisers would use machine registers instead of storing anything in memory.\r\n", "id": "2_5271818_1", "owner_tier": 0.9, "score": 0}], "link": "https://www.codeproject.com/Questions/5271816/How-to-give-a-name-to-function-arguments-in-C-API", "question": {"content": "\r\n\t\t\t    Hello.\r\nI'm trying to solve this problem but still in pycharm, when i'm looking at my function argument\r\nname i see only \"*args\" and \"**kwargs\" despite \"labels_list\" which i set while defining my function in\r\nC++.\r\nI can pass argument with keyword \"labels_list\" or without it, but i can't see this argument name\r\nin function arguments list in PyCharm.\n\r\nHere is my code:\n\nC++\n\r\nstatic PyObject* encode_one_hot(PyObject* self, PyObject* args, PyObject* kwargs) {\r\n \r\n    PyArrayObject* labels = NULL;\r\n    PyArrayObject* one_hot;\r\n \r\n    npy_intp dims[2];\r\n \r\n    map<int, int> classes_map;\r\n \r\n    int current_label;\r\n    int labels_size;\r\n \r\n    int new_numeration = 0;\r\n \r\n    void* ptr;\r\n \r\n    static char* kwlist[] = { (char*)\"labels_list\", NULL };\r\n \r\n    if (!PyArg_ParseTupleAndKeywords(args, kwargs, \"O\", kwlist, &labels))\r\n        return NULL;\r\n \r\n \r\n    PyArray_Sort(labels, 0, NPY_QUICKSORT);\r\n \r\n    labels_size = PyArray_SIZE(labels);\r\n \r\n    for (int i = 0; i < labels_size; i++) {\r\n        ptr = PyArray_GETPTR1(labels, i);\r\n        current_label = PyLong_AsLong(PyArray_GETITEM(labels, ptr));\r\n \r\n        if (classes_map.find(current_label) == classes_map.end()) {\r\n            classes_map[current_label] = new_numeration;\r\n            new_numeration++;\r\n        }\r\n    }\r\n \r\n    dims[0] = labels_size;\r\n    dims[1] = (int)classes_map.size();\r\n \r\n    one_hot = (PyArrayObject*)PyArray_ZEROS(2, dims, NPY_INT, 0);\r\n \r\n    for (int i = 0; i < labels_size; i++) {\r\n        current_label = classes_map[PyLong_AsLong(PyArray_GETITEM(labels, PyArray_GETPTR1(labels, i)))];\r\n        ptr = PyArray_GETPTR2(one_hot, i, current_label);\r\n \r\n        PyArray_SETITEM(one_hot, ptr, PyLong_FromLong(1));\r\n    }\r\n     \r\n    return PyArray_Return(one_hot);\r\n}\r\nI'll be very grateful for help :)\n\nWhat I have tried:\n\r\nI've tried to look on google for any answer and read documentation.\r\n\t\t    ", "id": "5271816", "title": "How to give a name to function arguments in C-API?", "traffic_rate": 0}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "codeproject", "tags": ["C++", "Python"]}, {"answers": [{"content": "\r\n    What I do is \n\n\n\n\r\nAnd he enters a search term \"<rate>\"\n\r\nAnd in the .py\n\nPython\n\r\n@when('he enters a search term \"(.*)\"')\r\ndef step_he_enters_searchterm(context,text):\r\n    context.driver.find_element_by_id(\"cludoquery\").send_keys(text)\n\n\r\nThis uses regex to find the variable, and it assigns that variable to text.\n\n\r\nMake sure that you place this at the top of your .py so that you can use the regex.\n\nPython\n\r\nuse_step_matcher('re')\n", "id": "2_1260752_1", "owner_tier": 0.1, "score": 0}, {"content": "\r\n    For this:\r\n@when('he enters search term \"{text}\"')\r\ndef step_he_enters_searchterm(context,text):\r\n    context.driver.find_element_by_id(\"cludoquery\").send_keys(text)\n\r\nYou need to write this:\r\nAnd he enters search term \"rate\"\n\r\nAnd if you get undefined step implementations maybe your files are not in correct order.\r\nYou need order something like this:\r\n<features>\r\n-- <steps>\r\n-- -- pageSteps(When then etc.)\r\n-- environment.py\r\n-- something.feature\r\n", "id": "2_5344407_2", "owner_tier": 0.1, "score": 1.0}], "link": "https://www.codeproject.com/Questions/1246030/Pass-parameters-from-a-cucumber-feature-to-Python", "question": {"content": "\r\n\t\t\t    I writing a simple BDD script using Cucumber(Behave), python and selenium.\r\nThe first two steps of my feature and script work but I having trouble getting a parameter from my Behave feature to my Python script.\n\r\nI keep getting this error when I runt the behave feature:\n\n\r\nYou can implement step definitions for undefined steps with these snippets:\r\n\r\n@when(u'he enters search term rate')\r\ndef step_impl(context):\r\n    raise NotImplementedError(u'STEP: When he enters search term rate')\n\r\nCucumber/Behave feature:\n\n\n\r\nScenario: Valid Payee\r\n       Given the user is on a Page\r\n       When he clicks the search field\r\n       And he enters search term 'rate'\n\r\nPython script:\n\n\n\r\nfrom behave import given, when, then\r\nxurl =''\r\n\r\n@given('the user is on a Page')\r\ndef step_user_is_on_fund_transfer_page(context):\r\n    context.driver.get(\"#\")\r\n\r\n@when('he clicks the search field')\r\ndef step_he_clicks_search_field(context):\r\n    context.driver.find_element_by_id(\"cludoquery\").click()\r\n\r\n\r\n@when('he enters search term \"{text}\"')\r\ndef step_he_enters_searchterm(context,text):\r\n    context.driver.find_element_by_id(\"cludoquery\").send_keys(text)\n\r\nSelenium env:\n\n\n\r\nfrom selenium import webdriver\r\ndef before_all(context):\r\n    context.driver = webdriver.Chrome()\r\n\r\ndef after_all(context):\r\n    context.driver.quit()\n\nWhat I have tried:\n\r\nI've tried using 'rate' and <rate> in my feature file for the parameter and ive tried using {text}, \"{text}\" in the python script but no success.\n\r\nAny ideas?\r\n\t\t    ", "id": "1246030", "title": "Pass parameters from a cucumber feature to Python script?", "traffic_rate": 0}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "codeproject", "tags": ["Python", "testing", "automation"]}, {"answers": [{"content": "\r\n    The reason for the error is that the method signature of the BrewMethod states that it expects five string arguments called power, flavour, lid, s and water.\n\n\n\r\npublic void BrewMethod(string power, string flavor, string lid, string s, string water)\n\r\nHowever when you call the BrewMethod method from other methods you only call it with one argument.\n\n\n\r\npublic void PowerMethod()\r\n{\r\n    string power = \"on\";\r\n    Console.WriteLine(\"Coffee Maker is now on.\");\r\n    BrewMethod(power);    <------ Called with one argument whereas fivearguments are expected\r\n    CupMethod(power);\r\n    WaterMethod(power);\r\n    SizeMethod(power);\r\n}\r\n\n\r\nYou must therefore provide the missing arguments to the BrewMethod wherever you call it.\r\n", "id": "2_5261685_1", "owner_tier": 0.3, "score": 0}, {"content": "\r\n    Your BrewMethod definition includes four parameters that are not used. Redefine it as:\nC#\n\r\npublic void BrewMethod(string power)\r\n{\r\n    if (power != \"on\")\r\n        Console.WriteLine(\"Lid has been closed.\");    \r\n}\n\r\n[edit]\r\nHowever, after looking more closely, you have other methods calling BrewMethod with different value types. That will not work since BrewMethod can only handle a single parameter. You need to change it to handle the different types (try a set of enums), so it will need an enum type and its value. Something like:\nC#\n\r\nenum brewtypes{ power, water, ... etc.};\r\n\r\npublic void BrewMethod(brewtypes type, string value)\r\n{\r\n    if (type == brewtypes.power && value != \"on\")\r\n        Console.WriteLine(\"Lid has been closed.\");    \r\n}\n\r\n[/edit]\r\n", "id": "2_5261717_3", "owner_tier": 0.7, "score": 0}], "link": "https://www.codeproject.com/Questions/5261679/There-is-no-argument-that-corresponds-to-the-forma", "question": {"content": "\r\n\t\t\t    I am getting multiple \"there is no argument that corresponds to the formal parameter errors and I can't figure out why. Most are related to my 'BrewMethod'\n\r\nHere is the code\n\n\r\n<pre>public class CoffeeMaker\r\n{\r\n\tpublic string flavor;\r\n\tpublic string power;\r\n\tpublic string s;\r\n\tpublic string lid;\r\n\tpublic string water;\r\n\tpublic void PowerMethod()\r\n\t{ \r\n\r\n\t\tstring power = \"on\";\r\n\t\tConsole.WriteLine(\"Coffee Maker is now on.\");\r\n\t\tBrewMethod(power);\r\n\t\tCupMethod(power);\r\n\t\tWaterMethod(power);\r\n\t\tSizeMethod(power);\r\n\t}\r\n\tpublic void CupMethod(string power)\r\n\t{\r\n\t\tif (power == \"on\")\r\n\t\t{\r\n\t\t\tConsole.WriteLine(\"Enter flavor of the pod.\");\r\n\t\t\tstring flavor = Console.ReadLine();\r\n\r\n\t\t\tBrewMethod(flavor);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tConsole.WriteLine(\"Please turn on coffee maker\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic void WaterMethod(string power)\r\n\t{\r\n\r\n\t\tif (power == \"on\")\r\n\t\t{\r\n\t\t\tint waterAmount;\r\n\r\n\t\t\tConsole.WriteLine(\"In ounces between 6 and 42, enter the amount of water that will be put in.\");\r\n\t\t\twaterAmount = int.Parse(Console.ReadLine());\r\n\r\n\t\t\tif (waterAmount > 42 || waterAmount < 6)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine(\"Enter a valid amount.\");\r\n\t\t\t}\r\n\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tstring water = \"enough\";\r\n\t\t\t\tBrewMethod(water);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tConsole.WriteLine(\"Please turn on coffee maker\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tpublic void SizeMethod(string power)\r\n\t{ \r\n\t\tif (power == \"on\")\r\n\t\t{\r\n\t\t\tint size;\r\n\r\n\t\t\tConsole.WriteLine(\"What size coffee?\");\r\n\t\t\tConsole.WriteLine(\"- Enter 1 for small\");\r\n\t\t\tConsole.WriteLine(\"- Enter 2 for medium\");\r\n\t\t\tConsole.WriteLine(\"- Enter 3 for large\");\r\n\r\n\t\t\tsize = int.Parse(Console.ReadLine());\r\n\r\n\r\n\t\t\tif (size < 1 || size > 3)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine(\"Enter a valid size.\");\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif (size == 1)\r\n\t\t\t{\r\n\t\t\t\tstring s = \"small\";\r\n\t\t\t\tBrewMethod(s);\r\n\t\t\t}\r\n\r\n\t\t\tif (size == 2)\r\n\t\t\t{\r\n\t\t\t\tstring s = \"medium\";\r\n\t\t\t\tBrewMethod(s);\r\n\t\t\t}\r\n\r\n\t\t\tif (size == 3)\r\n\t\t\t{\r\n\t\t\t\tstring s = \"large\";\r\n\t\t\t\tBrewMethod(s);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tConsole.WriteLine(\"Please turn on coffee maker.\");\r\n\t\t}\r\n\t}\r\n\t\tpublic void LidMethod()\r\n\t\t{\r\n\t\t\t\tConsole.WriteLine(\"Lid has been closed.\");\r\n\t\t\t\tstring lid = \"closed\";\r\n\t\t\t\tBrewMethod(lid);\r\n\t}\r\n\r\n\tpublic void BrewMethod(string power, string flavor, string lid, string s, string water)\r\n\t{\r\n\t\tif (power != \"on\")\r\n\r\n\t\tConsole.WriteLine(\"Lid has been closed.\");\r\n\t\t\r\n\t}\r\n\r\n}\n\n\n\nWhat I have tried:\n\r\nusing base but it just throws an 'unexpected character' error and doesn't do anything about the other errors.\r\n\t\t    ", "id": "5261679", "title": "There is no argument that corresponds to the formal parameter", "traffic_rate": 0}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "codeproject", "tags": ["C#", "Visual-Studio"]}, {"answers": [{"content": "\r\n    Hello Everyone, hello Tom,\r\nI got this solved and the link you gave me was very uselfull (the for delegates in MSDN)\n\r\nThe solution for this was that I passed delegate to the function instead of passing the function name. And before that I assign the function to delegate like this:\n\nC#\n\r\nprivate delegate void my_delegate(string name); //create delegate that takes string as an argument\r\n\r\nClass_A class_instance = new Class_A(); //create class instance\r\nmy_delegate = class_instance.Function_I_want_to_Pass; //assign the delegate\r\n\r\n//now I can use this:\r\nprivate void Function_Caller(argument_1, argument_2, my_delegate)\r\n{\r\n    //do something with argument #1 and argument #2\r\n    //.......\r\n    //call the function (delegated)\r\n    my_delegate(\"Modestas\");\r\n}\r\n//closing the class instance\r\nclass_instance.Close();\n\r\nnow I can pass the delegate to the function (so it's just like passing the function name).\r\nOf course - this way I create few more lines in the code but this does not bother as I can still achieve the goal of universal function caller.\n\r\nHope this helps anyone.\r\nThanks a lot!\n\r\nModestas.\r\n", "id": "2_612964_3", "owner_tier": 0.1, "score": 2.5}, {"content": "\r\n    Hi,\n\r\nI do not know if this will help, but you could use reflection to execute a method off of a class.\n\nhttp://stackoverflow.com/questions/2202381/reflection-how-to-invoke-method-with-parameters[^]\n\r\nSo if you instantiate an instance of class b then use reflection to find which ever method name has been passed into the method on class A it might achieve what you want. \n\r\nAlthough it's performance hit might be substantial.\r\n", "id": "2_612213_1", "owner_tier": 0.1, "score": 0}, {"content": "\r\n    In ClassB\nC#\n\r\npublic static void doStuffInB()\r\n       {\r\n       //do some really cool stuff.\r\n       }\r\n\n\r\nin ClassA:\nC#\n\r\nprivate void Form1_Load(object sender, EventArgs e)\r\n        {\r\n\r\n            ClassB.doStuffInB();\r\n        }\n", "id": "2_612386_1", "owner_tier": 0.1, "score": 0}], "link": "https://www.codeproject.com/Questions/612200/Passing-a-function-name-as-parameter-to-function", "question": {"content": "\r\n\t\t\t    Hello Guys,\r\nI am having a hard time with passing a function name as a parameter to another function.\r\nI have the following setup:\r\n1. There are 2 classes (A and B)\r\n2. I am trying to write a function in class A which would be executing methods from class B.\n\r\nI know I can pass a class instance and then run the method from that instantiated class... but I just can find a way to also pass a method name as well (don't want to type the name manually).\r\nI found a good example over here:\nhttp://stackoverflow.com/questions/2082615/pass-method-as-parameter-using-c-sharp[^]\r\nBut the problem is that this example shows how to pass method name of the same class (in other words you can access the method directly without having to instantiate the class).... in my case it's a bit different story - I have to instantiate the class....\n\r\nThank you in advance guys!\n\r\nModestas\r\n\t\t    ", "id": "612200", "title": "Passing a function name as parameter to function", "traffic_rate": 0}, "saved_time": "Tue, 16 Jul 2024 03:43:52 GMT", "source": "codeproject", "tags": ["C#", "delegates"]}]}