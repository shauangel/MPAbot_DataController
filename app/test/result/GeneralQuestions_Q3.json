{"result": [{"answers": [{"content": "PEP 8 is a guideline, not a law. It is an option on top of Python, not part of the official language. If everybody uses the same style, this would be preferred in a bigger company. All my Python programs at home run perfect with camelCaseNames, I will not change this unless people can prove my code is runner slower or has wrong behavior. However, on my job they want designers to follow the same rules and therefore have chosen for PEP 8 with a set of additional rules. This does not mean they use autopep8, there are many tools to be PEP8 compliant with small variations like black, flake8, autopep8. The tools that improve code to be PEP8 compliant are mainly based on opinion management. So, if people use words like \"Must have\", \"Should have\", \"Shall have\", these should be replaced by \"could have\". I would ask your company their preference. Next to PEP8, I could recommend pylint and mypy, those tools really find issues and showstoppers in your code.", "id": 78413016, "owner_tier": 0.5, "score": -8.695652217606603e-12}, {"content": "further to what @JohnTESlade has answered. Google's python style guide has some pretty neat recommendations, Names to Avoid Naming Convention Guidelines derived from Guido's Recommendations\n", "id": 50958547, "owner_tier": 0.5, "score": 0.032173913034782606}, {"content": "Whether or not being in class or out of class: A variable and function are lowercase as shown below: And if they're more than one word, they're separated with underscore \"_\" as shown below: And, if a variable is a constant, it's uppercase as shown below:", "id": 72603424, "owner_tier": 0.1, "score": 0.0060869565130434785}, {"content": "Lenin has told... I'm from Java/C# world too. And SQL as well.\nScrutinized myself in attempts to find first sight understandable examples of complex constructions like list in the dictionary of lists where everything is an object.\nAs for me - camelCase or their variants should become standard for any language. Underscores should be preserved for complex sentences.", "id": 68958842, "owner_tier": 0.3, "score": 0.0017391304260869565}, {"content": "The Google Python Style Guide has the following convention: module_name, package_name, ClassName, method_name, ExceptionName, function_name, GLOBAL_CONSTANT_NAME, global_var_name, instance_var_name, function_parameter_name, local_var_name. A similar naming scheme should be applied to a CLASS_CONSTANT_NAME", "id": 8423697, "owner_tier": 0.5, "score": 0.9573913043391306}, {"content": "See Python PEP 8: Function and Variable Names: Function names should be lowercase, with words separated by underscores as necessary to improve readability. Variable names follow the same convention as function names. mixedCase is allowed only in contexts where that's already the prevailing style (e.g. threading.py), to retain backwards compatibility.", "id": 159745, "owner_tier": 0.9, "score": 0.9999999999913044}, {"content": "I personally use Java's naming conventions when developing in other programming languages as it is consistent and easy to follow. That way I am not continuously struggling over what conventions to use which shouldn't be the hardest part of my project!", "id": 57601736, "owner_tier": 0.3, "score": 0.0008695652086956521}, {"content": "There is a paper about this: http://www.cs.kent.edu/~jmaletic/papers/ICPC2010-CamelCaseUnderScoreClouds.pdf TL;DR It says that snake_case is more readable than camelCase. That's why modern languages use (or should use) snake wherever they can.", "id": 37120709, "owner_tier": 0.3, "score": 0.01478260868695652}, {"content": "As the Style Guide for Python Code admits, The naming conventions of Python's\n  library are a bit of a mess, so we'll\n  never get this completely consistent Note that this refers just to Python's standard library. If they can't get that consistent, then there hardly is much hope of having a generally-adhered-to convention for all Python code, is there? From that, and the discussion here, I would deduce that it's not a horrible sin if one keeps using e.g. Java's or C#'s (clear and well-established) naming conventions for variables and functions when crossing over to Python. Keeping in mind, of course, that it is best to abide with whatever the prevailing style for a codebase / project / team happens to be. As the Python Style Guide points out, internal consistency matters most. Feel free to dismiss me as a heretic. :-) Like the OP, I'm not a \"Pythonista\", not yet anyway.", "id": 2708015, "owner_tier": 0.9, "score": 0.049565217382608696}, {"content": "David Goodger (in \"Code Like a Pythonista\" here)  describes the PEP 8 recommendations as follows: joined_lower for functions, methods,\nattributes, variables joined_lower or ALL_CAPS for\nconstants StudlyCaps for classes camelCase only to conform to\npre-existing conventions", "id": 160830, "owner_tier": 0.9, "score": 0.2652173912956522}, {"content": "The coding style is usually part of an organization's internal policy/convention standards, but I think in general, the all_lower_case_underscore_separator style (also called snake_case) is most common in python. ", "id": 159756, "owner_tier": 0.9, "score": 0.00434782607826087}, {"content": "Most python people prefer underscores, but even I am using python since more than 5 years right now, I still do not like them. They just look ugly to me, but maybe that's all the Java in my head.  I simply like CamelCase better since it fits better with the way classes are named, It feels more logical to have SomeClass.doSomething() than SomeClass.do_something(). If you look around in the global module index in python, you will find both, which is due to the fact that it's a collection of libraries from various sources that grew overtime and not something that was developed by one company like Sun with strict coding rules. I would say the bottom line is: Use whatever you like better, it's just a question of personal taste.", "id": 159798, "owner_tier": 0.5, "score": 0.026086956513043477}], "link": "https://stackoverflow.com/questions/159720/what-is-the-naming-convention-in-python-for-variables-and-functions", "question": {"content": "Coming from a C# background the naming convention for variables and methods are usually either camelCase or PascalCase: In Python, I have seen the above but I have also seen snake_case being used: Is there a more preferable, definitive coding style for Python?", "id": 159720, "title": "What is the naming convention in Python for variables and functions?", "traffic_rate": 146}, "saved_time": {"$date": "2024-07-16T03:41:09.980Z"}, "source": "stackoverflow", "tags": ["python", "naming-conventions", "camelcasing", "pascalcasing", "snakecasing"]}, {"answers": [{"content": "It will be hard to find guidance for Python in safety critical software development because there are too many things that make Python no option for really critical applications. You could never entrust a piece of Python code your life. See a few reasons why: The memory model in Python is much different then the one in languages for embedded software. Python uses massively the Heap, while safety critical software normally uses global data and the Stack. For dynamic memory it is just too complicated to perform a safety assessment. You have phenomenon like memory fragmentation, garbage collection, memory leaks. The algorithms in Python, that prevents these things, have never been qualified. In Python you normally don't care for dependencies, cyclic dependencies. As everything is interpreted at runtime, it just works. But safety critical applications normally require that you have a Top-Down design with abstraction levels and dependencies in a tree structure. Because this is, what the V-Model wants. That is the reason why Python code most of the times is not compliant to safety standards. Python developers prefer a defensive style of programming, so that the code is immune against adverse unexpected situations. But in safety critical code all situations must be taken into account in advance. Defensive programming prevents the detection of design errors early in the development. For things like lambda expressions and closures it is hard to use test coverage metrics. But these are required in safety critical software development. You at least need to cover each Python statement once because without static typing, testing is extreme important. Otherwise you would not reliably identify type errors. I understand that you don't expect that level of safety and that you just want to have certain (the best possible) level of safety. It would indeed be interesting to have guidance what features of Python can be considered as safe and what programming techniques are recommended. Unfortunately there seems to be no guidance available, yet. Perhaps people are worried too much about the run time environment and the concepts of Python not been mature enough or adecuate for safety critical applications. A good book for reading is \"Developing Safety-Critical Software - A Practical Guide for Aviation Software and DO-178C Compliance\" by Leanna Rierson. It gives very interesting insights about what you have to care when developing safety critical software. It covers even things like Object Oriented Programming. When it comes to C# or Java it is said, that these languages are just not mature enough. And it can be supposed that the same is the case for Python. I end this with a practical example. In safety critical applications the program must be deterministic. The program behaviour must be already known and predictable at \"certification time\". But see this code: It is hard to make clear statements about the behaviour of print_message. It depends on the value of i_want_capital_letters at runtime. Such dynamic behaviour is hard to bring in line with certification requirements. The certification authorities want to hear what the behaviour of the code actually IS and not that it depends on something, that is comming from the user. That sort of flexibility is probably a reason why Python became so popular. When trying to avoid such features, it makes probably no sense to use Python, at all. The problem with the example is not so much, that the program behaviour changes due to user input. It is just not obvious, that the bahaviour of print_message is permanently changed. There is nothing like a status variable that makes this change visible. It is even hard to find out, what the behaviour in certain moment in time is. (You may argue, that this example is already an exotic use case, that does not happen so often. But this is actually the way how things for Unit Testing purposes are isolated. All things that do not belong to the \"unit under test\" are \"stubbed\" away using exactly this mechanism of the example. But the valid question of the certification authorities is then, if you have really tested the operational code or some manipulated code. For programming languages that use static typing, the type system provides \"some\" sort of confidence, that a stubbing mechanism does not change the semantic of the program, while in Python many things can be changed at runtime.) A final show stopper for critical applications is the runtime system of Python. Safety critical software must be 100% reliable. That includes each Assembler instruction that is ever executed. If you compile a piece of C code, normally you get in Assembler quite exactly what you have written in that C code. Projects with a high level of safety requirements even have a process that verifies that the Assembler code fully traces to the C code. If you don't use any libraries there is no software pieces between your C code an the operating system or bare metal. All this means, the verification (e.g. testing) of your running Assembler code (and your product) can be done by verifying (e.g. testing) the C code. There is nothing (or at least not much) more. In Python this is different. Python is interpreted or at least executed on a basis of bytecode. That means that the Python interpreter is part of your product. But the Python interpreter is an Open Source project, that is completely out of your control. It has never been developed with a focus on safety. It is simply not possible to certify a product if safety was not taken into account from begin on. The Python interpreter would never be certifiable.", "id": 73099954, "owner_tier": 0.3, "score": -4.999999969612645e-09}, {"content": "It is possible depending on the safety case and governing standards body to use Python in a safety critical system. However, for continuous safety, there are always time demands.  For example an anti-lock breaking system must always be ready to perform.  Ie, high availability.  It will also have timing guarantees.  It is no good if the anti-skid mechanism engages after a fish tail has started.  This would be a real-time gaurentee. Many higher level languages such as python include garbage collection.  If the garbage collector is not incremental or controllable (when the garbage collection happens), it is impossible to fulfill the timing guarantees.  It is difficult to have timing demands meant in Python. Some systems are not continuous, such as a Covid assay (do I have Covid-19 yes/no).  It is more important to be reliable, meaning do I get the correct results all the time. Some standards such as IEC 62304 (medical software) are goal oriented, but allow the use of the prescriptive IEC 61508.  A safety case must be made through technical arguments that Python was a good technology choice for the use case.  This can be very difficult, so defaulting to the prescriptive standard is the norm. Frankly, I believe that Rust would probably be a better choice than Python for a wider variety of cases.  Some regulatory bodies allow you to have your safety case previewed before large scale development gets underway.  If you have a goal oriented standard, it would be very prudent to get some acceptance of your argument for the language from an auditing body. Entrenched languages will have tools and pre-certification.  For example you can get TUV-Sud certified compilers.  Not only the code, but all aspects that are used in development must be analyzed for a safety case.  This include static checkers, revision control tools, code review tools, CIT systems, etc.  Depending on the 'safety level', you many need all of these elements to be certified.  Ie, Level C pace maker or ASIL-4 automotive component.  If the language was never used in a safety standard before, it can be difficult to find certified tools, an OS or run-time libraries. As well, it can be fairly expensive to make the arguments that a new technology is safe.  This means there will be added cost to the company that initially undertakes this exercise.  A product that succeeds, makes it to market and helps to save lives is better than an intellectual exercise that fails.", "id": 71548033, "owner_tier": 0.7, "score": -4.999999969612645e-09}, {"content": "Top layer safety standards for \"functional safety\" like IEC 61508 (industrial), ISO 26262 (automotive) or DO-178 (aerospace) etc come with a software part (for example IEC 61508-3), where they list a number of suitable programming languages. These are exclusively old languages proven in use for a long time, where all flaws and poorly-defined behavior is regarded as well-known and execution can be regarded as predictable. In practice, for the highest safety levels it means that you are pretty much restricted to C with safe subset (MISRA C) or Ada with safe subset (SPARK). A bunch of other old languages like Modula-2, Pascal and Fortran are also mentioned, but the tool support for these in the context of modern safety MCUs is non-existent. As is support for Python for such MCUs. Languages like Python and C++ are not even mentioned for the lowest safety levels, so between the lines they are dismissed as entirely unsuitable. Even less so than pure assembler, which is actually mentioned as something that may used for the lower safety levels.", "id": 70952681, "owner_tier": 0.9, "score": 0.999999995}], "link": "https://stackoverflow.com/questions/69673807/python-coding-standard-for-safety-critical-applications", "question": {"content": "Coming from C/C++ background, I am aware of coding standards that apply for Safety Critical applications (like the classic trio Medical-Automotive-Aerospace) in the context of embedded systems , such as MISRA, SEI CERT, Barr  etc. Skipping the question if it should or if it is applicable as a language, I want to create Python applications for embedded systems that -even vaguely- follow some safety standard, but couldn't find any by searching, except from generic Python coding standards (like PEP8) Is there a Python coding guideline that specificallly apply to safety-critical systems ?", "id": 69673807, "title": "Python coding standard for Safety Critical Applications", "traffic_rate": 3}, "saved_time": {"$date": "2024-07-16T03:41:09.980Z"}, "source": "stackoverflow", "tags": ["python", "safety-critical"]}, {"answers": [{"content": "Seeing as lot of people are recommending formatting guidelines (PEP8), I have one that is actually for security. There is a project in OpenStack (very big python based platform), called Bandit. It is a security lint tool. https://github.com/PyCQA/bandit You can run this tool against your own code, or if you wish to learn the inners of secure python coding, then take a look at the examples directory.", "id": 35817038, "owner_tier": 0.3, "score": 0.9999999989999999}, {"content": "CERT was developing a Python Secure Coding standard - but nothing seems to have come from their efforts for a number of years.  https://wiki.sei.cmu.edu/confluence/display/seccode Several CERT folks state in presentations that the Python Secure Coding v1.0 is \"under development\". ", "id": 62008168, "owner_tier": 0.1, "score": 0.199999999}, {"content": "One place to look at a secure coding standard is https://vulncat.fortify.com/en There you have listed coding errors that affect security. It contains many languages, Python being one of those. I have also been looking for an academic/free secure coding standard for Python. I haven't yet found a good one. I think that SEI CERT should step up and make such a standard. According to their latest webinar on Secure Coding, they are considering this possibility.", "id": 39037169, "owner_tier": 0.1, "score": 0.49999999900000003}, {"content": "I posted this in another thread, but we recently released a security linter called DevSkim for Visual Studio, VS Code, and Sublime Text. It targets multiple languages, and is focused on finding security vulnerabilities.", "id": 42239891, "owner_tier": 0.5, "score": 0.299999999}, {"content": "You can refer to my blogpost for coding guidelines in python. You need to follow PEP8 coding guidelines.  Autopep8 is a tool that automatically formats Python code to conform to the PEP 8 style guide. To run autopep8: autopep8 TARGET.py", "id": 32279348, "owner_tier": 0.1, "score": -9.99999993922529e-10}], "link": "https://stackoverflow.com/questions/32279010/secure-coding-guidelines-for-python", "question": {"content": "Looking at the CERT Secure Standards (Example: https://www.securecoding.cert.org), there are specific standards, with great examples of what good and bad code looks like, for C, C++, Java, even Perl but not Python.  Are there any Python specific standards are guidelines, preferably with examples available? http://www.pythonsecurity.org/ appears to be focused security concerns in Python itself and on building an alternative Python binary to resolve these.  A noble, but not recently active, cause.  I'm looking for something that gives guidance to developers on what not to do and what to do instead.", "id": 32279010, "title": "Secure Coding Guidelines for Python", "traffic_rate": 4}, "saved_time": {"$date": "2024-07-16T03:41:09.980Z"}, "source": "stackoverflow", "tags": ["python", "security", "secure-coding"]}, {"answers": [{"content": "PEP 8 is still the latest and great official recommendation, as indicated by the PEP not having any notice that it\u2019s been deprecated or superseded. There are some alternatives that are stricter than PEP 8, including Black and YAPF", "id": 75115553, "owner_tier": 0.5, "score": -4.999999969612645e-09}, {"content": "At the top, below the authors, you can see it says Status: Active As the tooltip explains, that means PEP 8 is Currently valid informational guidance, or an in-use process If the PEP is ever replaced it will say \"Status: Superseded\". At the bottom of the page it says: Last modified: 2022-05-11 17:45:05 GMT You can check the link to see what changes have been made to PEP 8 when.", "id": 75115549, "owner_tier": 0.5, "score": 0.999999995}, {"content": "Quoting from the official Python documentation which was last updated on Jan 13, 2023 (as of writing, and is kept pretty well up-to-date): Yes. The coding style required for standard library modules is documented as PEP 8. No mention of anything that would take priority over PEP 8. There are other style guidelines written by third parties, but PEP 8 is still the official style guide.", "id": 75115548, "owner_tier": 0.9, "score": -4.999999969612645e-09}], "link": "https://stackoverflow.com/questions/75115515/does-anything-supercede-pep-8", "question": {"content": "Trying to go from a script kiddie to a semi-respectable software engineer and need to learn how to write clean, digestible code. The book I'm reading pointed me towards PEP 8 - I know this is the foundational styling guide for Python. What I can't seem to figure out is if all the guidelines are still valid today in 2022 and nothing has changed since its last update in 2013 OR if there are supplemental PEPs I should be reading. Visited https://peps.python.org/pep-0000/ and started browsing through the different releases but got confused and unsure which PEPs besides 8 have to do with style guidelines. I found this previous question from 9 years ago and wanted to see if any of the answers have changed.", "id": 75115515, "title": "Does anything supercede PEP 8?", "traffic_rate": 1793}, "saved_time": {"$date": "2024-07-16T03:41:09.980Z"}, "source": "stackoverflow", "tags": ["python", "pep8", "pep"]}, {"answers": [{"content": "Your professor is wrong; he goes against the industry standard style guide for Python, PEP-8. In particular, function and variable names should be lowercase, separated by underscores. Following his advice where not forced to (that is, outside of assignments he grades) might cause you harm if used in a portfolio presented to future employers.", "id": 68209082, "owner_tier": 0.9, "score": 0.9999999900000002}], "link": "https://stackoverflow.com/questions/68209025/is-this-an-acceptable-python-naming-convention", "question": {"content": "I am currently learning some advanced Python at school, and my teacher has recommended the use of PascalCase for all variable, function, and class names. He says that since all Python keywords are lowercase, this convention will help to differentiate between one's own code and Python built-ins. However, this convention is unlike any other programming language, and I do not know whether it is acceptable to continue in this way. Can I use this convention for personal projects? And change it to a more universal convention when I need to?", "id": 68209025, "title": "Is this an acceptable Python naming convention?", "traffic_rate": 2245}, "saved_time": {"$date": "2024-07-16T03:41:09.980Z"}, "source": "stackoverflow", "tags": ["python-3.x", "pep"]}, {"answers": [{"content": "2020 Update: I thought I should update this in reference to my COBOL comments below and COVID-19 and why good code is important. Because, it affects peoples lives as we're clearly seeing now from non-functional state and governmental systems.  Afterall, if it runs and gets the job done with 0 issues is that not\n  enough? No. Not even close. This is what annoys me and nearly every other software developer.\nLet's take a scenario that happens far too often. You made a program and it \"just works\". But, your code is shit. Then other people have to work on it. Guess what? I get to dig through a bunch of copy pasted garbage, unpythonic code, rework all of it, assuming I can even unpiece the Frankenstein logic someone managed to throw together with 0 comments and logical train of thought. This isn't directed at your code - but the degree to which it happens out in the \"wild\". It's unmanageable, especially when it needs to be added to, if you opened your editor 6 months from now with what you just coded would you even have a clue what it does? And then people that code this way expect other developers to be able to work with their \"functional\" code. Not good enough.  There are code bases people don't touch for years - that then become legacy code bases - which are monstrosities (looking at you COBOL) that only a handful of people know anything about and are next to impossible for the next dev or team to manage to a reasonable degree. This is a very simple case.. You have maybe 100 lines here. What happens when it's hundreds of thousands and reads this way? What happens when you have an entire team of developers each of which are pushing code, different branches, merges, etc. Software development is complicated and practices exist to minimize error, fluency between developers, and limit complexity / bad code. Clean code is an art form few people have mastered. Zen of Python Clean Code - you can find this elsewhere or at your library (or equivalent dependent upon locale) likely if cost is an issue. I highly recommend reading some form of a book on clean coding. It will be eye opening. Besides the PEP8 and stuff what is GOOD code? In one sentence, I should be able to open my editor look at your code read it as a bunch of simple logic - nearly identical to English sentences thanks to Python - top down without pausing and go \"yeah that's what I expected\" You'll have people argue for certain design patterns such as test driven development or behavior driven and there's a lot of merit and use cases for these. However, this is focusing purely on the semantics of how your code reads. The craft of writing the code itself. Things in your own code I'd refactor immediately and consider \"code smell\" While comments like this are cute they aren't helpful. You want short concise comments only where needed for questionable pieces for someone entering the code base and for yourself. Nested functions like this: There are times to use closures. This is not one of them. Redundant definitions and logic: Use it where you need it, when you need it, only when you need it. General reorganization and compacting of code. Your new so you don't really now these yet, but they'll come with time. So I'm not going to nitpick this too much. Docstrings: In real code bases doc strings are used for documenting the function as the name implies. Parameters, return values, expectations, etc. Libraries even exist to generate full documentation pages from these such as sphinx  Backwards compatability: This is for large codebases which need to have legacy support. If you go to almost any public repository you'll find a compat.py that bridges imports between versions. Object Oriented Languages: In general, we can say a few things about clean code in object oriented languages. As the name implies an object oriented languages is centered around the definition of \"objects\". In python these would be your classes. in python 2 (also works in Python 3 just \"old style\"): in python 3: Polymorphism and Inheritance Here your class serves to encapsulate an object and it's methods / attributes. Moreover, object oriented languages inherently provide polymorphism.  Polymorphism allows you to provide an interface that acts in many forms. The name itself implies this from the Greek root \"poly\" meaning many and \"morphism\" meaning form. Let's say I built a class to describe animals and their properties. I could built a new class for every.single.type.of.animal. Or, provide the common methods and attributes and override them when necessary. Here's a practical example of the animal kingdom Polymorphism is a wonderful way to write clean code when appropriate. Similarly, for inheritance. Building Blocks One of the powerful things about object oriented languages is being able to break things into \"building blocks\" so to speak and mix them together to provide mixed functionality. However, what happens when you write a ton of these tie them all together for some higher functioning object and then need to make changes or want to use it elsewhere? Do you have to go through or take the entire object-oriented zoo with you? That's not very clean in my opinion and frustrating for developers. Use this methodology of programming cautiously. Personally, I love it because I'm very fond of the Django web framework and love using mixins and the flexibility of some tricks here and there. So, I lean to this type of programming personally. Summation on writing clean code in Python: Do the above, get good at polymorphism and inheritance, follow the Zen, know how to break things apart and keep things concise without killing readability, and document your code properly. This is 90% of clean code. The rest is honing the craft.", "id": 53789297, "owner_tier": 0.5, "score": 0.9999999966666667}], "link": "https://stackoverflow.com/questions/53789140/what-is-good-python-code-and-how-can-this-meet-the-guidelines", "question": {"content": "I keep hearing about writing good code and writing bad code when you first start. Afterall, if it runs and gets the job done with 0 issues is that not enough? Can you use this as an example? I worked with what I knew and what I had to learn so I am sure it can be picked apart. Besides the PEP8 and stuff what is GOOD code? ", "id": 53789140, "title": "What is &#39;good python code&#39; and how can this meet the guidelines?", "traffic_rate": 2}, "saved_time": {"$date": "2024-07-16T03:41:09.980Z"}, "source": "stackoverflow", "tags": ["python"]}, {"answers": [{"content": "pylint and pyflakes would be a good start. pylint in particular is very configurable, and you can enforce quite a few things with it.", "id": 1318812, "owner_tier": 0.9, "score": 0.24242424212121214}, {"content": "In the past I've mainly use PyLint - it can highlight when you used an undefined variable, when you import things without using them and so on. It can be a bit verbose, complaining about things like lines being over 80 character long, variable not matching to specific regex's, classes having too few public methods, methods missing docs-trings. For example, for script.. PyLint generates the following messages: They are all valid complaints, but I tend to disable a lot of the convention and refactoring messages. You can disable specific messages, either as comments in your code: ..or as command line arguments to the PyLint command: With the above messages disabled, it generates the following messages for the above code: PyLint also generates a \"code report\", including how many lines of code/comments/docstring/whitespace the file has, number of messages per-category, and gives your code a \"score\" - 10 being no messages, 0 generally being a syntax error Another option is PyFlakes, which I find a little less excessively-verbose (I've recently started using it in place of PyLint). Again using the above script, PyFlakes gives the following messages: The final option I use is pep8.py, which as the name suggests enforces PEP8. It is by far the most.. pedantic script, enforcing things like correct blank-lines before/after functions/classes, spacing around code, correct 4-space indentation and so on.. Running on the code above, it produces the following: It is mostly enforces stylistic things like correct whitespace, it does not do much static-analysis of the code like PyLint or PyFlakes, so I use pep8.py in conjunction with either PyLint or PyFlakes. pep8.py was originally announced on the python mailing list here, but the download link in this is now dead.. There's a github mirror by cburroughs, with a few minor fixes at github.com/cburroughs/pep8.py, or you can grab the unmodified version from an older revision PyChecker is another option, although I haven't use it", "id": 1318939, "owner_tier": 0.9, "score": 0.9999999996969696}, {"content": "Found this stackoverflow question while searching for a pep8 style enforcement tool when taking over an existing (legacy) project. https://github.com/hhatto/autopep8 will automagically convert all the source code to confirm with pep8. Tried it on my legacy project and it works great.  So I thought I would update this answer here in SO.", "id": 14256707, "owner_tier": 0.9, "score": -3.030303011886452e-10}], "link": "https://stackoverflow.com/questions/1318799/tool-to-enforce-python-code-style-standards", "question": {"content": "I'm trying to find a tool to check for coding style in python. For PHP I've seen there is the Code Sniffer, and a small perl script used by Drupal. Is there such a tool for python code?", "id": 1318799, "title": "Tool to enforce python code style/standards", "traffic_rate": 8}, "saved_time": {"$date": "2024-07-16T03:41:09.980Z"}, "source": "stackoverflow", "tags": ["python", "coding-style"]}, {"answers": [{"content": "You can't go wrong with looking at the PEP 8 - The Style Guide for Python Code for guidance on how to write readable Python code. Highly recommended.", "id": 10936172, "owner_tier": 0.9, "score": 0.99999999875}, {"content": "You cannot go wrong with Levon's answer as it is completely objective (though possibly based on a subjective document). PEP 8 should be considered the standard. Answering based on personal bias: IDLE (Python's Integrated DeveLopment Environment) will format the dictionary this way when hitting return / enter after the first comma. As a result, I often will use this style for large dictionaries. Also considering IDLE, the program will indent functions this way if return / enter is pressed after third comma. I usually follow this style, but you will always find occasional exceptions to standard style. This is probably my most subjective comment. Lines in programs should be 80 or fewer characters long. That should probably apply to both code and text. Remember that you can create block quotes (''').", "id": 10938612, "owner_tier": 0.7, "score": -1.2499999924031613e-09}], "link": "https://stackoverflow.com/questions/10936164/python-coding-style", "question": {"content": "I've been reading various python coding style guides, some answers on SO, etc. but none of them mentions some maybe not that important questions, but I would like to know if there is a preferred way for doing this: In case I have a dictionary, which style would be better to use: or or or or something else? Also for when calling methods: or or or or something else? when a longer logging line is used, let's say: or even consider this: Now this last is somewhat related to the function calling style too, we have many arguments, a long string, how would be the best to separate these kind of lines?", "id": 10936164, "title": "Python coding style", "traffic_rate": 1305}, "saved_time": {"$date": "2024-07-16T03:41:09.980Z"}, "source": "stackoverflow", "tags": ["python", "coding-style"]}, {"answers": [], "link": "https://stackoverflow.com/questions/2815272/common-coding-style-for-python", "question": {"content": "I'm pretty new to Python, and I want to develop my first serious open source project. I want to ask what is the common coding style for python projects. I'll put also what I'm doing right now. 1.- What is the most widely used column width? (the eternal question)\nI'm currently sticking to 80 columns (and it's a pain!) 2.- What quotes to use? (I've seen everything and PEP 8 does not mention anything clear)\nI'm using single quotes for everything but docstrings, which use triple double quotes. 3.- Where do I put my imports?\nI'm putting them at file header in this order. 4.- Can I use \"import whatever.function as blah\"?\nI saw some documents that disregard doing this. 5.- Tabs or spaces for indenting?\nCurrently using 4 spaces tabs. 6.- Variable naming style?\nI'm using lowercase for everything but classes, which I put in camelCase. Anything you would recommend?", "id": 2815272, "title": "Common coding style for Python?", "traffic_rate": 8257}, "saved_time": {"$date": "2024-07-16T03:41:09.980Z"}, "source": "stackoverflow", "tags": ["python", "coding-style", "naming-conventions", "indentation", "column-width"]}, {"answers": [{"content": "There are various naming conventions across many different languages, and styles of writing code. For example in javascript there are many style guides, code is subjective and even companies like big companies like AirBnb have released their own \"style-guide\" which many companies copy. A good place to look if you can't find it in the docs, would be popular python packages, scipy, matplotlib, numpy etc... Here is the naming conventions part in the docs:\nhttps://www.python.org/dev/peps/pep-0008/#naming-conventions In python most people agree on \"naming_like_this\" except for classes and such like. Whereas in JavaScript people normally use camelCase \"namingLikeThis\". The important thing is to be consistent across each code base and more importantly is naming things usefully rather than concentrating on the style of writing things.", "id": 66174604, "owner_tier": 0.3, "score": -4.999999969612645e-09}, {"content": "This is Google style guide. Pretty useful. As you state, you already know the importance of having good variable naming convention and practice throughout the company. Although this is followed by Google, but the rules there are decent and useful and can be followed by team where lot of hands are on same code base.", "id": 66174574, "owner_tier": 0.5, "score": 0.999999995}], "link": "https://stackoverflow.com/questions/66174512/are-there-any-common-python-naming-conventions-beginners-should-know", "question": {"content": "New to Python and coding in general. The more I learn (from different sources), the more I continue to hear the phrase \"...this is a common naming convention.\"\nWith the desire to do it right the first time, I wondered if there was a repository or central location for most/many of the common naming conventions found in Python.\nTo clarify, I mean using \"self\" as the first parameter of a Class, importing numpy as np, importing pyplot as plt, importing pandas as pd, etc... I have searched PEP 8 and SO and Google (and Google's style guide as suggested by an answer) and have not found anything like this.\nIs it worthwhile to have a resource such as this? If not, why? I am considering this both as a student new to coding but also as an experienced (former) manager who has had to write many SOPs and understands the value of a repository for common information. EDIT: I am appending further clarification: \"given self as a convention when creating a class, what are other conventions that are commonly reserved words a beginner might not know?\" Thank you,", "id": 66174512, "title": "Are there any common Python naming conventions beginners should know?", "traffic_rate": 166}, "saved_time": {"$date": "2024-07-16T03:41:09.980Z"}, "source": "stackoverflow", "tags": ["python", "pep8"]}, {"answers": [{"content": "The official [Oracle Code Conventions for the Java Programming language](http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html) and [Google Java Style](https://google.github.io/styleguide/javaguide.html) are widely accepted.\n\nInteresting, thank Oracle page says it hasnt been edited since 1999. Is it safe to still use it as a reference?\n\n> Is it safe to still use it as a reference?\n\nAbsolutely fine.", "id": "gdrfssr", "owner_tier": 0.9, "score": 0.9999999980000001}, {"content": "The google guide seems to agree with your opinion about omitting braces? I think most guides will rec that you always use braces.", "id": "gdqvdh0", "owner_tier": 0.7, "score": -1.999999987845058e-09}, {"content": "I believe the google format uses spaces instead of tabs, so that's gross.\n\nI prefer eclipse and try to use their auto-formatting whenever I can.", "id": "gdrb9dx", "owner_tier": 0.3, "score": -1.999999987845058e-09}], "link": "https://www.reddit.com/r/learnjava/comments/k1rwqg/is_there_a_widely_accepted_style_guide_for_java/", "question": {"content": "I come from a python background and the bible that is [PEP8](https://www.python.org/dev/peps/pep-0008/) . PEP8 has so much traction in the python community, you would be hard pressed to find any other style guide.\n\nIs there anything similar with Java? The most I can find online are people recommending the Google style guide.  \n\n\nIN PARTICULAR: [https://google.github.io/styleguide/javaguide.html#s4.1.1-braces-always-used](https://google.github.io/styleguide/javaguide.html#s4.1.1-braces-always-used) I hate when people omit braces for control flow. Is this a popular opinion?", "id": "k1rwqg", "title": "Is there a widely accepted style guide for Java like in Python(PEP8)?", "traffic_rate": 31.73607157381049}, "saved_time": {"$date": "2024-07-16T03:41:09.980Z"}, "source": "reddit"}, {"answers": [{"content": "Some languages have official style guides (go for instance) but most have linters and formatters that achieve the same thing (JavaScript for example has prettier).\n\nGo has a style guide *and* a tool called Gofmt that comes with the language and puts it into the Official Go Style.", "id": "ib64eq1", "owner_tier": 0.3, "score": 0.9999999966666667}, {"content": "Google style is widely used for Java. For JS, many use prettier.", "id": "ib6n45q", "owner_tier": 0.3, "score": 0.33333333000000004}, {"content": "There's autoformatters for any language you can think of.", "id": "ib6lad2", "owner_tier": 0.1, "score": -3.3333333130750966e-09}, {"content": "For Unreal C++\n\nhttps://docs.unrealengine.com/4.26/en-US/ProductionPipelines/DevelopmentSetup/CodingStandard/\n\nI'd use it for vanilla C++ too.\n\nDefault VSCode formatter works well with it, except placing pointer to right side instead of left. Still trying to figure it out.", "id": "ib80yor", "owner_tier": 0.5, "score": -3.3333333130750966e-09}, {"content": "A word that might be interesting in this context too: Idiom.", "id": "ib8dmve", "owner_tier": 0.1, "score": -3.3333333130750966e-09}], "link": "https://www.reddit.com/r/learnprogramming/comments/v4szmo/official_coding_style_guides_for_other_popular/", "question": {"content": "In Python there is the infamous PEP 8 standard written by Guido and his cohorts. This is pretty much like as official as it gets with Python coding styles as many companies employ this standard and there are autolinters based off of PEP 8. Do official coding styles exist for other popular languages like Java, C/C++, Javascript? I think C# also has an official one published by microsoft.", "id": "v4szmo", "title": "Official Coding Style Guides for Other Popular languages?", "traffic_rate": 759.4055103550296}, "saved_time": {"$date": "2024-07-16T03:41:09.980Z"}, "source": "reddit"}, {"answers": [{"content": "When i started developing in PyCharm it really helped my style. It automatically was checking my code and notifying me when i wasn't following PEP8. \n\nI'm beginner and this is what helped me.\n\nWhat was one of the things you did that wasn't pep8 but it notified you that?\n\nnon original commenter but in my case: incosistent linebreaks, inconsistent spacing, was not using camelcase for classes, this is what comes to mind atm\n\nPyCharm yells at me if I *don't* use camelcase on classes. If I use it on anything else it yells about that too.\n\nIt's in PEP8: class names should be Pascal case; variable, function and method names should be snake case.\n\nFor me the \"make your mind up dude!\" is how it wants spaces around operators EXCEPT if they're in default arguments of a function. I mean, it makes sense now I know it, but it drove me while at the start.\n\nThat's what I meant.\n\nI wasn't trying to correct you, just wanted to explain the behaviour of your linter.", "id": "fi0y52m", "owner_tier": 0.7, "score": 0.9999999998484848}, {"content": "Since no one has mentioned it yet, I really like using [black](https://github.com/psf/black) to format my code. Depending on what editor you use you can set it up to automatically run every time you save a file. Really helps with writing readable code!", "id": "fi1f0dw", "owner_tier": 0.3, "score": 0.42424242409090906}, {"content": "To reuse something I wrote before, for best practices and style, roughly in order they should be read;\n\n[PEP-8](https://www.python.org/dev/peps/pep-0008/): the basic \"good Python\" guide and has the most general agreement. Style guides tend to be built up from it as a starting point. \n\n[The Hitchhikers Guide](https://docs.python-guide.org/): the more community driven opinionated guide. Some of it may be outdated still (haven't checked in a while) and it is written more as a book for publication than as a living document, but IIRC it represents what the community would ideally like to see in Python code in the wild pretty well.\n\n[The Google Python Style Guide.](https://google.github.io/styleguide/pyguide.html): this is for their in-house developers so may not be as universally applicable. It goes over the pros and cons of language features as seen from that perspective (notably; large codebase, many hands) and gives a decision (recommendation really) for the usage of each. Their style section is more about consistency within a codebase. Think of it more as the points you need a firm decision on, even if you don't go with theirs. If I was building a large codebase and expecting a lot of developers to work on it I'd probably start from this and find any major areas of disagreement.\n\nFor style I'm of the opinion that you determine what you find good, then find a linter/auto-formater option that enforce that and take as much active thought out of the process as possible. Get confident in your style so you don't have to think about it any more, then focus on writing functionality.\n\nThere are always going to be elements a linter won't catch easily (bad variable names, etc) which you just need to internalise, so it's still worth doing the reading and learning the what and why of good style.", "id": "fi19gr1", "owner_tier": 0.7, "score": 0.3333333331818182}, {"content": "I just use Black to do it all for me. When I use PyCharm (mostly for bigger projects with multiple packages) it's configured to autoformat on each save, and the additional linting that PyCharm provides makes a great combo.\n\nHow to you integrated black with pycharm? I found only one plugin *black-formatter* which works only on Unix.\n\nUse [these instructions](https://black.readthedocs.io/en/stable/editor_integration.html), along with the FileWatch plugin, which is linked in those docs.\n\nNote that this will autoformat an entire file, which can be an issue when working on large OSS projects. The Partial Formatting section in [this](https://blog.godatadriven.com/black-formatting-selection) article tells you how to handle that, but I haven't tried it so can't speak to its efficacy.", "id": "fi1v3cp", "owner_tier": 0.7, "score": 0.31818181803030304}, {"content": "Use VS Code (for example) with autopep8 extension, or just run pep8 (or others) from time to time and see what mistakes you made.\n\nAlso read about docstrings for method/class documentation.", "id": "fi18nb7", "owner_tier": 0.3, "score": 0.2272727271212121}, {"content": "Yeah, don't bother. Write programs, don't slow yourself down by worrying about styling. Get a linter that formats your code for you, if you must.", "id": "fi0rfj4", "owner_tier": 0.3, "score": -1.5151516405157136e-10}], "link": "https://www.reddit.com/r/learnpython/comments/f5twyt/style_guides_for_python/", "question": {"content": "After some other people pointed out on my previous post that I was lacking a style guide for my code, I wanted to look into making my code more user friendly. I tried following along with the PEP 8 style guide on the python website, but I don\u2019t feel like I am retaining any of the info. Would you be able to help me figure out ways to improve the style and redundancy of my code. Thank you", "id": "f5twyt", "title": "Style Guides for Python", "traffic_rate": 153.1240740740741}, "saved_time": {"$date": "2024-07-16T03:41:09.980Z"}, "source": "reddit"}, {"answers": [{"content": "Look into PEP8, it\u2019s basically the universal style guide for Python developers.", "id": "hbh9u5l", "owner_tier": 0.1, "score": 0.99999999875}, {"content": "Write great tests and adhere to a well-established style guide, like [this one](https://google.github.io/styleguide/pyguide.html) from Google.", "id": "hbgejmi", "owner_tier": 0.5, "score": 0.99999999875}, {"content": "Consider using [black](https://github.com/psf/black) in your CI and in a pre-commit hook. Auto-formatting tends to reduce the conversations your team will have about ... formatting issues.", "id": "hbhu4t9", "owner_tier": 0.1, "score": 0.24999999875}, {"content": "Integrate flake8 and isort in your code for code readability", "id": "hbhduu6", "owner_tier": 0.7, "score": -1.2499999924031613e-09}, {"content": "From the top of my head, so unstructured. \n\n1. Use Black, preferably in combination with precommit. Solves most formatting conversations.\n\n2. Every class and every module should have a docstring. This makes your code nearly self documenting.\n\n3. Variable names should be descriptive. Never use a, b, x, y, tmp, var, mylist, etc. Also try to avoid abbreviations. You  work in an IDE with autocomplete so long names are no issue.\n\n4. Use typing whenever possible.\n\n5. One class or one method should do one thing.\n\n6. Always write unit tests for new functionality. If you cant test it, learn how to use stubs or rewrite code until you can.", "id": "hbhzx3g", "owner_tier": 0.9, "score": 0.37499999875}, {"content": "I find python tricky to use with modules alone for designing. I would use classes, even if just collection of static methods. \n\nUse dataclasses to create value objects. Use enums to avoid magic strings. \n\nUse type annotations and mypy. Make code suitable for intellisense. Everything to be autocomplete suitable. Use pylance extension.\n\nVscode extension for creating python docstrings - python docstring generator. Lots of docstrings. Good commented code is 30% comments. My project now is like 45%. Use VS code counter extension to see how many lines of code how many of comments. \n\nMinimal unit of code is function. Avoid any procedure running outside of function. Function can be easily move around and added to classes if needed.\n\nWrite readme for each module. \n\nChoose design suitable for your application.\n\nCoding starts on paper before the keyboard. \n\nDefine layers and don't let each module uses any other module. Make them like business company. Some hierarchy who can communicate with who. \n\nread this pdf https://smallpdf.com/result#r=02bcb9da17aec8deed28ae36d989516c&t=share-document\n\nYou have both good and bad points IMO. \n\nMy primary issue is that code should not be mostly comments. Your code should be easy enough to read because you choose appropriate function and variable names that the primary reason you need comments is to explain why you are doing something. If you are writing comments that explain what the code is doing, your code is probably too complex.\n\nnot mostly, but 30%. Every function has to have docstring. And good docstring, not the lazy one. I stand by it. It's way faster to read normal text than code and variables, no matter how descriptive they are. Others will be grateful and you will be grateful too.", "id": "hbgvobw", "owner_tier": 0.3, "score": -1.2499999924031613e-09}, {"content": "Break down reusable functionality into stand alone Python modules, with an argument parser at the top to run in command line. Have import statements at the top, followed by functions, then if __name__ == \u201c__main__\u201d. Parametrize values instead of hard coding them. Create descriptions of functions in the actual code, detailing the purpose of the function, inputs, and outputs. Comment, comment, comment! Assuming you\u2019re regularly pushing to Git, make wiki pages detailing the code pipelines.\n\n> then if name == \u201cmain\u201d.\n\nBut only if it's needed.  Adding it *all the time* is [cargo-cult programming](https://en.wikipedia.org/wiki/Cargo_cult_programming).\n\nYou need it when importing something that is also ment to be ran.\n\nTrue, but you don't need that in *every* file you write.  You hardly ever need it.", "id": "hbg4gqf", "owner_tier": 0.7, "score": 0.49999999875}], "link": "https://www.reddit.com/r/learnpython/comments/ph5ogf/good_code_standards_for_python_project/", "question": {"content": "Hi, I am setting up a microservice in Python at my org. And I want to set the standards for writing good Python code. I want to ensure:\n\n* code is readable\n* code is modular\n* avoid null value errors\n* documentations is easy\n\nWhat are some standards I should add to the project? Any VS code extensions that would help?", "id": "ph5ogf", "title": "Good code standards for Python project", "traffic_rate": 153.1240740740741}, "saved_time": {"$date": "2024-07-16T03:41:09.980Z"}, "source": "reddit"}, {"answers": [{"content": "I wrote [an opinionated guide to code quality checks](https://www.b-list.org/weblog/2022/dec/19/boring-python-code-quality/) a little while back that people seemed to like.\n\nThis is awesome! I agree with all of the opinions. My only deviation is using ruff instead of pylint - it's faster and implements just about all of the same rules. But yeah - ruff / black / isort for formatting + unit testing + sphinx helps resolve nearly all of the formatting/readability issues.", "id": "jabz77p", "owner_tier": 0.9, "score": 0.9999999997222222}, {"content": "We have a substantial code base, but we do well keeping it basic. Everything goes through pylint and pytest for testing, and code is documented with pydoc.   We added Black to our process a few years ago, which is essentially a more opinionated autopep8. Not only does it enforce consistency across the codebase, it\u2019s made us all cleaner developers. \n\nWe don\u2019t allow any PR merge with passing tests and processing by Black. Code review catches  the documentation and we review and update at that point.  All of this can be automated and enforced with your choice of CI/CD system", "id": "jac7db9", "owner_tier": 0.3, "score": 0.22222222194444444}, {"content": "Pylint and autopep8 are tools I use for encouraging these behaviours when writing code as they push code to be as close to the PEP standard\n\nUse ruff / black / isort instead\n\nthanks for bringing up ruff. didn't know it existed.\n\nRuff has import sorting built in. You don\u2019t need isort.\n\nThis is the way", "id": "jabqaxj", "owner_tier": 0.1, "score": 0.638888888611111}, {"content": "SonarQube can be utilized to manage code quality standards across a project, as well. This is much more geared toward enterprise and large team projects; but, it\u2019s an option that is available.", "id": "jadudz8", "owner_tier": 0.5, "score": 0.08333333305555556}, {"content": "\"Best practice tools\" can lead to improvements in poor practices but in general a lot of those tools lead to worse looking and harder to read code. However it takes a lot of practice to tell when that is happening.\n\nIn general any documentation that is not directly derived from the code (so machine generated) has the potential to be wrong, and thus misleading. No compiler or linter can catch those errors (maybe ChatGTP++++++ can some day). The more documentation you write, and the more changes the code goes through, the higher the chances the documentation will be riddled with errors. \n\nAnd since most class diagrams and interactions will be obvious, you will be burying the few important diagrams in a sea of useless ones, making it impossible for someone to quickly learn the system by scanning the docs and diagrams. I remember seeing this a lot in government projects.\n\nThe linting rules that annoy me most are those that change my carefully spaced and indented multi-line equations, formatted so that I can see many potential errors based on symmetry and pattern, into some kind of meaningless mush. People who don't like math obviously don't get this though.\n\n> No compiler or linter can catch those errors (maybe ChatGTP++++++ can some day). The more documentation you write, and the more changes the code goes through, the higher the chances the documentation will be riddled with errors.\n\nSphinx can literally test code examples given in your documentation to prove they work.", "id": "jabrv9s", "owner_tier": 0.7, "score": 0.11111111083333333}, {"content": "Didn\u2019t read all comments don\u2019t know if already mentioned but Google has a style guide https://google.github.io/styleguide/pyguide.html", "id": "jadrw2a", "owner_tier": 0.1, "score": 0.05555555527777778}, {"content": "remember the most important code quality tip is to do as much possible code as you can in one line. It will reduce code bloat and show to other devs your cool python knowledge!", "id": "jaf7l7d", "owner_tier": 0.9, "score": -2.7777777777777777e-10}, {"content": "Python provides a great deal of helpful  advice about code quality. One of the most useful documents is [Pep8](https://pep8.org/). Get to know and love Pep8 - it is so valuable that tools have been created to check that your code follows it, specifically [flake8](https://flake8.pycqa.org/en/latest/).\n\nIf I were to give one piece of advice for improving (Python) code quality, it would be Pep8, (and use flake8 to check your work). flake8  runs very quickly and will catch most errors against Pep8 in an uncontroversial way, so there's not really any good reason to not use it.", "id": "jah7bvz", "owner_tier": 0.3, "score": 0.0277777775}, {"content": "I watch alot of networkchuck on YT... Maybe his channel will help...", "id": "jai7jk5", "owner_tier": 0.1, "score": 0.0277777775}], "link": "https://www.reddit.com/r/Python/comments/11e00kq/code_quality_best_practices/", "question": {"content": "Could you point me to as much resources as possible around python code documentation/code quality best practices? I am interested in as much strict and as much generally acceptable standards as possible. Meaning for example: generating a class diagram for every app, docstring for every function, type hints everywhere, unit tests coverage, (how to) write readme, module docstrings but also merge requests best practices, commit messages etc.", "id": "11e00kq", "title": "Code quality best practices", "traffic_rate": 207.93551603789263}, "saved_time": {"$date": "2024-07-16T03:41:09.980Z"}, "source": "reddit"}, {"answers": [{"content": "Possible reasons to avoid PEP8:\n\n- You enjoy writing style-checking utilities, or just prefer checking style manually.  More billable hours!\n\n- You want to make sure experienced Python coders who might get hired have a harder time contributing to your project.  Job security, dude!\n\n- You aren't stuck with the (OPTIONAL) 80 or 99 character limit.  YAY code golf!\n\n- You want to make sure any external code (open source libraries, e.g.) brought into your project looks weird and foreign to your team. That will ensure they don't spend any time trying to improve it or patch issues upstream.\n\n- Conversely, if you're ever compelled to release any software as open-source, it will ensure that nobody else will want to contribute to your software.  Because who wants to deal with all those pull requests?\n\n- Your team is smarter than those core devs who came up with PEP8.  Everyone will understand that when they see your code.\n\n- You're `afraid_of_snakes` but `okWithCamels`.\n\n> You want to make sure any external code (open source libraries, e.g.) brought into your project looks weird and foreign to your team. That will ensure they don't spend any time trying to improve it or patch issues upstream.\n\nThis is oft-cited but doesn't make any sense to me. Are you vendoring 3rd party code into your repo instead of putting it in a requirements.txt or similar?\n\nIf your code uses hard tabs and your dependencies use 4 spaces, there should be no style conflict since the code is never in the same repo.\n\nThere are style conflicts with naming conventions (the standard library uses snake\\_case so if you use camelCase things _will_ look weird). But not all of the PEP8 rules are relevant for dealing with others' code.\n\n> Conversely, if you're ever compelled to release any software as open-source, it will ensure that nobody else will want to contribute to your software. Because who wants to deal with all those pull requests?\n\nI don't know why switching styles is so hard. There are things like [EditorConfig](http://editorconfig.org/) to help with this.\n\nIt's not uncommon to write Python and sanely use snake\\_case for functions and then need to deal with JS, Go, etc. If switching to camelCase for those is impossible for you, maybe interacting with computers is just not your thing.\n\n>This is oft-cited but doesn't make any sense to me. Are you vendoring 3rd party code into your repo instead of putting it in a requirements.txt or similar?\n\nWeird stuff happens in software projects.  What I personally do isn't part of the equation here.\n\n>I don't know why switching styles is so hard. There are things like EditorConfig to help with this.\n\nThe point is, the Python community is reputedly less likely to contribute to your project if the code isn't some semblance of PEP8.  I have no data to back this up, so you are free to test it empirically.\n\n> It's not uncommon to write Python and sanely use snake_case for functions and then need to deal with JS, Go, etc. If switching to camelCase for those is impossible for you, maybe interacting with computers is just not your thing.\n\nThe last point wasn't serious. \n\n> This is oft-cited but doesn't make any sense to me. Are you vendoring 3rd party code into your repo instead of putting it in a requirements.txt or similar?\n\nThis happens often, yes.  It's also strongly encouraged by build systems like [Bazel](https://www.bazel.io/) (and presumably Pants, since they're both based off of Google's Blaze).\n\nI think it should only be done as a last resort, but sometimes you do reach that last resort.  And also, not everyone listens to me.", "id": "d8niycb", "owner_tier": 0.7, "score": 0.6078431370588235}, {"content": "You should deviate from the industry standard if it disagrees with your company standard.\n\nThe only real reason to define the company standard as something with many breaks against pep8 is to maintain compatibility with existing code. But it sounds like you just have someone with lots of opinions and who sticks to them very strongly - the kind of person for whom these standards are written.\n\nUsing pep8 makes things easier for new developers, easier when you bring in third-party code, and already has a bunch of tooling surrounding it.\n\nthanks!\n\nthere isn't any company standard, but most teams seem to be following PEP 8 with a few modifications (like line length).\n\nthe only existing code we have is written in the last month by this one developer.", "id": "d8nign6", "owner_tier": 0.7, "score": 0.2352941174509804}, {"content": "pep8 is pretty universal, the one thing is the line length, i really hope they will increase it to 120 or something\n\nWell, you can do 100 characters, but I feel like more than that is getting to be a code smell.\n\nI've learned to stay under 80 characters 99% of the time, it's actually not such a bad limit after you get used to coding that way.\n\nShould just drop it. Have a vague thing like \"when it goes long, consider doing\n\n    foo = bar(\n        a,\n        b,\n    )\n\nInstead. That should be it. Never align stuff with ( it's a disaster to maintain. Never have anything other than all parameters on one line or every parameter on separate lines. It's a pain to maintain and sometimes it hides parameters. \n\n79 or 80 characters is still a reasonable limit because most displays are only 160 characters wide.\n\nAny line limit is silly. \n\n    foo = \\\n        bar\n\nSubstitute foo and bar for descriptive names and that literally code I found today at work. What a joke. \n\nSo literally double. Right. \n\nA *hard line limit* with no room for exceptional cases is silly.\n\nHaving a soft limit that keeps you from writing code like:\n\n    my_value = [remove_spaces_from(x) for x in postprocessdata(get_values_from_database(dabase_connection, item_type=14, active=true)) if x.get(\"description\", '').startswith(\"something\")][0]\n\nis probably not a bad thing.\n\nI really hate newline escapes. They make the code ugly and hard to maintain.  Please use parenthesis instead. \n\n    foo = (\n      'bar')\n\n(so you you can view two files side by side)\n\nThat line should be broken up not because it's long but because it's unreadable. Column length is irrelevant. \n\nIt's 2016. Soft line breaks worked fine on the original macintosh 1984. ", "id": "d8nhds4", "owner_tier": 0.9, "score": 0.9999999998039215}, {"content": "PEP 8 is the canonical Python style guide, but don't skip the section right after the introduction.\n\nMy advice is always this: If you want to explicitly violate PEP 8 you better be able to cite PEP 20. Otherwise you're just being stubborn.", "id": "d8nie8l", "owner_tier": 0.5, "score": 0.058823529215686274}, {"content": "> One specific example is instead of no spaces around keyword args they want the = signs to line up, so there's variable whitespace to the left of the = sign and one space after. They also like to do this when several variable assignments are in a row(where PEP 8 would say one space on each side).\n\nThis is the worst. I would quit.\n\nA bit harsh but yea that's obviously stupid. What if you rename anything? A parameter name, the function name? You have to realign like crazy. \n\nIf you really want this you should make a soft line wrap plugin in your editor of choice that displays the code like that for you. Don't save it on disk like that!\n\nYou dislike vertical alignment? I prefer it, personally. I follow PEP 8 in I think every other way (except in very rare edge cases), but I vertically align things all the time. Code that isn't nicely aligned jumps out at me as being \"wrong\" somehow, so having everything lined up helps me to read it quickly. \n\nI can understand it for a bunch of hard constants you're defining at the beginning of your code. Doing this everywhere doesn't make sense though.", "id": "d8niy79", "owner_tier": 0.3, "score": 0.1372549017647059}, {"content": "The like length is stupid but otherwise it's pretty solid advice backed up by decades of individual professional careers. \n\nAgreed. Line limit is definitely controversial.", "id": "d8nmsd7", "owner_tier": 0.5, "score": 0.03921568607843137}, {"content": "I guess I'm the weird guy that doesn't think PEP 8 has much value. Writing clean, legible code is of value but getting everyone to write clean, legible code in the same way is of little practical value.\n\nPersonally, I don't even notice when I move from one module that is PEP 8 compliant and another one that isn't.\n\nThe idea that code is hard to read because class definitions are separated by a single blank line, or three lines rather than two is just silly.\n\nIt's like stepford programming.\n\nIf you want your code to be easy to read you'll get much farther by factoring your code properly into classes and functions than carefully counting whitespace.\n", "id": "d8nuprj", "owner_tier": 0.7, "score": 0.01960784294117647}, {"content": "> they want the = signs to line up, so there's variable whitespace to the left of the = sign and one space after\n\nHave him write a plugin for his IDE that visually formats the code for him in this way, but leaves the spaces in the actual code unchanged. Then nobody has to realign anything manually when variable names change, but those who desire it can have their equal signs aligned, even in foreign code. Win win.\n", "id": "d8nzo8p", "owner_tier": 0.3, "score": 0.01960784294117647}, {"content": ">One specific example is instead of no spaces around keyword args they want the = signs to line up, so there's variable whitespace to the left of the = sign and one space after. They also like to do this when several variable assignments are in a row(where PEP 8 would say one space on each side).\n\nOh. I wrote an addon for my code editor to do this for me.\n\nOOOOOPS.", "id": "d8nlvf7", "owner_tier": 0.7, "score": -1.9607843018088803e-10}, {"content": "There's absolutely no reason why you wouldn't mainly use PEP 8, and then add some small changes, so long as everyone is aware of them. \n\nYou mention lining up the = signs. Sure, do that. Probably not a great idea to mix up naming conventions, though. ", "id": "d8nwuxx", "owner_tier": 0.5, "score": -1.9607843018088803e-10}, {"content": "How set in stone are python developers concerning underscore_notation to camelCase, just because of PEP8? Is it the holy grail? If i push a project and it has camelCase will i be shunned for years,  forced into a ghost-pushing persona?", "id": "d8ops92", "owner_tier": 0.1, "score": -1.9607843018088803e-10}, {"content": "I simply ignore because I find 4 spaces indentation ugly, I think 2 spaces is cleaner and more compact", "id": "hkpdsvz", "owner_tier": 0.1, "score": -1.9607843018088803e-10}], "link": "https://www.reddit.com/r/learnpython/comments/56ytaf/compelling_reasons_to_not_use_pep_8_as_coding/", "question": {"content": "I work in industry and my team recently started coding on a python project. All the developers except one are new to python (including myself). The developer who has the most experience is pretty against PEP 8 standards. One specific example is instead of no spaces around keyword args they want the = signs to line up, so there's variable whitespace to the left of the = sign and one space after. They also like to do this when several variable assignments are in a row(where PEP 8 would say one space on each side). \n\nOur team is going to discuss a style standard this week, and I've been reading and researching a ton (this subreddit, stack overflow, some books like Effective Python) and I can't really come up with any good reasons NOT to follow PEP 8, with maybe some common modifications like line length. I'm worried we won't be able to hire anyone to work on our project if we are veering far from the standard, and those of us new to python will learn weird ways of doing things. I'm trying to empathize and come up with some compromises, but a lot of the suggestions are pretty against any python standards I can find.\n\nAre there some compelling reasons not to stick to PEP 8?", "id": "56ytaf", "title": "Compelling reasons to not use PEP 8 as coding style?", "traffic_rate": 153.1240740740741}, "saved_time": {"$date": "2024-07-16T03:41:09.980Z"}, "source": "reddit"}, {"answers": [{"content": "For the most part, yes. There are a few rules we disable - the major one being the line length one.", "id": "de2cq5o", "owner_tier": 0.5, "score": 0.7826086952173913}, {"content": "Yes, as a *guide*.", "id": "de2dxli", "owner_tier": 0.5, "score": 0.4347826082608695}, {"content": "It's a guide I don't follow it to the letter.\n\nAlso, we have our own style guide that relaxes some rules (line length) and adds some others (conventions for multi-line expressions like comprehensions, literals, etc).  Our style guide also includes suggestions for setting up library projects, CLI apps, and GUI apps, among other things.\n\n[deleted]\n\nI can't share it directly since it's an internal document, but here's a summary of the style itself:\n\nRead PEP8\n\n## Whitespace and indentation\n\nClosing bracket symbols should go on their own line at the same indent as the opening bracket symbol, and the last line should have a trailing comma:\n\n    my_list = [\n        1,\n        2,\n    ]\n\nFunction calls should look similar:\n\n    function(\n        a=1,\n        b=2,\n        c=3,\n    )\n\nThis is only for when it improves readability or when the lines are too long.\n\nDocstrings and comments should be kept within 80 characters.  Code lines should be kept within 120 characters, favoring 80 characters.\n\nImports on separate lines.\n\nDon't use `*` imports.  When importing a number of objects by name use the tuple syntax (if lines are long):\n\n    from os import (\n        listdir,\n        makedirs,\n    )\n\nImports should be grouped as\n\n    from __future__ import relevant_future_imports\n\n    from stdlib import thing\n\n    from internallib import foobar\n\n    from currentproject.module import baz\n\nRelative imports are discouraged, `absolute_imports` are encouraged.\n\nNo spaces immediately before or after brackets (i.e. none of `print( 1, 2 )`, use `print(1, 2)`).\n\nSpace immediately after commas.  Additional spaces can be used for alignment:\n\n    function(a,   b,   c)\n    function(a, foo, bar)\n\nBut don't overdo it.  If you need more than 4 spaces for alignment, don't do it.  This applies to assignment blocks too:\n\n    # Yes\n    x   = 1\n    abc = 2\n    a_long_variable  = 3\n    another_variable = 4\n    # No\n    x                = 1\n    abc              = 2\n    a_long_variable  = 3\n    another_variable = 4\n\nSame rule goes for dictionary literals and alignment spaces after the colon:\n\n    {\n        'foo':    'bar',\n        'foobar': 'baz',\n        foobarbazqux': 'qux',\n    }\n\nBut alignment in all of these cases is not required.\n\nSingle space around operators, except when it helps with clarity such as\n\n    2 * x**2\n\nIs acceptable vs\n\n    2 * x ** 2\n\nNo multi-statement lines, including ifs, fors, defs, etc.\n\n## Naming convention\n\nVariables, attributes, functions, methods, and modules are `snake_case`, except where it doesn't make sense to do so.\n\nClasses are `UpperCaseCamelCase`.\n\nConstants are `UPPER_CASE_SNAKE_CASE`\n\nPrefer `_single_underscore` over `__double_underscore` for private attributes and methods, since `__` mangles and this makes it harder to override, unless you know you need `__private` variables to protect class invariants.\n\nDon't make your own `__dunder__` attributes.\n\nNames conflicting with python keywords or builtins should be suffixed with a single underscore.\n\nUse `self` and `cls`.\n\nAvoid single letter variable names, except in cases like `x`, `y`, `z` for describing generic coordinate values (we do a lot of math), or `i`, `j`, `k` for index variables since that's so heavily used.\n\n## Misc.\n\nAll Python 2 modules should use `unicode_literals`, use explicit bytestrings when you need them (we do a lot of ASCII protocols, it's important to keep it straight).\n\nUse `six.text_type` and `six.binary_type` when you need to check if a text-ish value is one of those two types.\n\nDon't assign lambdas to variables, it makes debugging easier\n\nDerive from `Exception` all you want, use the suffix `Error` for all custom error classes.  Libraries should have a base error type for the entire library, makes it easy to catch all from a library.\n\nAvoid `except Exception` if you can help it.  Sometimes this is good at the top of an application to allow for proper resource cleanup.\n\nAvoid truthiness checks, always use an explicit check:\n\n    # Yes\n    if len(mylist) > 0:\n        dostuff()\n    # No\n    if mylist:\n        dostuff()\n\n[deleted]\n\nSure.  It's pretty general information anyway so I can probably get away with sharing it without getting in trouoble:\n\n## Libraries\n\n### File structure (with svn)\n\n    project/\n        branches/\n        tags/\n        trunk/\n            docs/\n            tests/\n                __init__.py\n                test_thing.py\n            project/\n                __init__.py\n                thing.py\n                metadata.json\n                about.rst\n            setup.py\n\n### docs folder\n\nUse `sphinx-quickstart` to generate a document skeleton.  Use rst format for all docs.\n\n### tests folder\n\nShould be a python package.  Use whatever testing framework you want, so long as it can be run as `python setup.py test`.\n\n### setup.py\n\nShould look something like\n\n    from setuptools import setup, find_packages\n    import json\n\n    # I like this method because it's consistent and easy.\n    # We have some projects with compiled components,\n    # so you can't import this info from the package itself\n    # until it's compiled, but you can't compile it unless\n    # you can run setup.py.  This works around the\n    # chicken and egg problem.\n    with open('project/metadata.json') as f:\n        metadata = json.load(f)\n    with open('project/about.rst') as f:\n        long_description = f.read()\n\n    setup(\n        name='project',\n        version=metadata['version'],\n        author=metadata['author'],\n        author_email=metadata['author_email'],\n        description=\"A short description\",\n        long_description=long_description,\n        packages=find_packages('.', exclude=['tests', 'docs']),\n        package_data={'project': ['about.rst', 'metadata.json']},\n        install_requires=['six', 'other_dep'],\n        test_suite='tests',\n    )\n\nWe deploy internally so I don't include all the classifiers and keywords, it doesn't matter for us.\n\nAdding a dev_requirements.txt (or equivalent, we actually use conda so environment.yaml files are what we typically use) is nice for the next dev to set up their environment quickly.\n\n### Source code\n\n#### `__init__.py`\n\n    from __future__ import absolute_import\n\n    import json\n    from pkg_resources import ResourceManager\n\n    from project.thing import Thing\n\n    __doc__ = ResourceManager().resource_string('project', 'about.rst')\n    __metadata = json.loads(ResourceManager().resource_string('project', 'metadata.json'))\n    __version__ = __metadata['version']\n    __author__ = __metadata['author']\n    __author_email__ = __metadata['author_email']\n    __docs_url__ = __metadata['docs_url']\n    # etc\n\n    __all__ = [\n        'Thing',\n    ]\n\nFrom this point it's hard to give general advice since different modules have very different requirements.  In a lot of cases I like to put classes in their own files, but this gets cumbersome a lot of the time.  Really, if the classes and functions are logically related then group them together.  Make sub-packages as necessary.  A `project.errors` module is probably a good idea.\n\n## CLI Apps\n\nFollow everything above, then add a `__main__.py` file inside the `project` package.  Add a `project.cli` sub-module or sub-package (as necessary based on complexity).  Implement a `main` function in `project.cli`, then import it into `project.__main__`.  The `main` function should take `argv=None` so that you can override `sys.argv` really easily for testing:\n\n    def main(argv=None):\n        parser = argparse.ArgumentParser()\n        # ...\n        args = parser.parse_args(argv)\n        # ...\n\nThis lets you do `python -m project` to get the command line interface.  Argparse is suggested since it's built in, but click and docopt are also great libraries if you need the complexity or simplicity respectively.  If you have subcommands (think `pip install` and `pip search`, the different subcommands should probably be implemented in separate sub-modules or sub-packages.\n\nThe `setup.py` file should be modified so that the call to `setup` includes\n\n    entry_points={'console_scripts': ['project=project.cli:main']}\n\n## GUI Apps\n\nFollow everything above for CLI apps, but have `project.gui` instead of `project.cli`.  Ideally, these should be able to coexist in applications that have both a CLI and GUI.  I find that GUIs are pretty easy to write if the object structure is broken up into sub-modules for the different widget classes:\n\n    project/\n        gui/\n            main_window.py      <- Uses FooPanel and BarPanel\n            foo/                <- Exports FooPanel\n                foo_panel.py\n                foo_widget.py\n            bar/                <- Exports BarPanel\n                bar_panel.py\n                bar_widget.py\n            resources/\n                icon.ico\n\nUse `pkg_resources` to load resources.  For configuration, include a default config file in `project.gui.resources`, then check if there's a file located at an application specific location and merge it on top of the default config.  I like json and yaml for config files.  I've used multiple ways to check for user config files, such as `os.path.expandvars('%APPDATA%/Project/config.json')` and `if os.path.exists(os.environ.get('PROJECT_CONF')): load_config(...)`.  The former is more appropriate when the user doesn't need to edit the config themselves, the latter is great for long running applications where you might want more control over the configuration.  They each have their place, and both can be used at the same time if necessary.  You might even want DB driven config, that's up to your use case.\n\n## Logging\n\nUse the python logging module.  Use a `logging.json` file to configure it (if it makes the most sense).  Use logging in libraries unconfigured so that fellow devs can turn on logging for specific libraries when they need it.  Take advantage of different logging levels.  Use `logger.exception` in `except` blocks to get tracebacks in your logs.  Output your logs where they can be useful and are easy to get to.  Use `TimedRotatingFileHandler` to prevent log files from filling up your users' hard drives.  Name your threads and processes with unique, human readable names and output this info in the log format (check the python logging docs for how to do this).  Suddenly, your logs will start making sense in multi-threaded and multi-processed contexts.", "id": "de2ecs3", "owner_tier": 0.7, "score": 0.7826086952173913}, {"content": "As a side note, if actually following it seems like a chore because you feel like you would need to study, remember and practice it, try using an environment like PyCharm. It will let you know when and why your code is not following the style guide.\n\nSame with Spyder (can be disabled). I quickly learned to follow pep8 so I wouldn't have to see those yellow triangles! I had recently read through pep8 though, so it helped to understand what was expected. ", "id": "de2fl3y", "owner_tier": 0.1, "score": 0.2608695647826087}, {"content": "I don't always follow the proper naming convention for variables (sometimes a capital letter or two in the middle is useful!), and I try to stick to 120 chars per line rather that 79, and then only where sensible. But the rest of it I follow.\n\n> sometimes a capital letter or two in the middle is useful!)\n\nyou monster\n\nGuilty as charged!\n\nOne project I was working on had references to a CAP (Ciphered Accrued Preamble) and also had a cap on the number of frames to be read. So we used \"CAP\" in variable/function names for the former, and \"cap\" for the latter. I spose we could've used \"limit\" instead of \"cap\", but this was the language we were using when talking about the project, so it just made sense.\n\nnah brah,  \n`snake_Camel` FTW  \n&nbsp;  \n\n`right_to_bear_arms = True`  \nVS  \n`right_To_BearArms = True`  \n&nbsp;  \n\n[**#NoContest**](http://7.media.bustedtees.cvcdn.com/9/1/bustedtees.2d2b9839d17e3fb6fc859da14507a709.gif)\n\nIf it makes you feel better, I pascalCase all the time, not just sometimes ;)\n\ncamelCase*\n\nThisIsPascalCase\n\nIt's just like USB, 80% of the time I fail the coin-flip.", "id": "de2duf9", "owner_tier": 0.5, "score": 0.9999999995652173}, {"content": "Yep.\nAlso, part of the CI process is to run flake8 on all code and fail the build if you regress.", "id": "de2gh7x", "owner_tier": 0.5, "score": 0.08695652130434783}, {"content": "I follow everything in flake8 (PEP8+), except I bump line length to 119.", "id": "de2jxta", "owner_tier": 0.3, "score": 0.04347826043478261}, {"content": "Mostly. I don't always cut my tests to 79 characters per line. For some reason, testing just seems to need longer lines. ", "id": "de2d570", "owner_tier": 0.5, "score": -4.3478260605327347e-10}, {"content": "I dunno. My text editor checks pep8 automatically and since I don't like the warnings I over time followed the guidelines. \n\nI'm not a software developer, I'm an IDE user.\n\nWell you can configure your ide to follow pep8. I know pycharm does. ", "id": "de2im04", "owner_tier": 0.7, "score": 0.08695652130434783}, {"content": "I follow it. When I copy a chunk of code from  external source or when I open py file that is not originally mine, first thing I do is I restyle it to PEP8.", "id": "de2iy3r", "owner_tier": 0.1, "score": -4.3478260605327347e-10}, {"content": "I don't really pay any direct attention to it, though I tend to kind of naturally mostly follow it after programming in python for long enough. I find a better guide is presented by Raymond Hettinger here:\n\nhttps://www.youtube.com/watch?v=wf-BqAjZb8M", "id": "de2m5d9", "owner_tier": 0.3, "score": -4.3478260605327347e-10}, {"content": "95%", "id": "de33orc", "owner_tier": 0.7, "score": -4.3478260605327347e-10}, {"content": "Yes.  To the letter, as often as we can.  Yes, even line length.  It stops arguments in the office.  ", "id": "de3jbt8", "owner_tier": 0.3, "score": -4.3478260605327347e-10}, {"content": "I take the 'There should be one-- and preferably only one --obvious way to do it.' from pep 20 pretty seriously. Which means that having multiple ways to do string formatting pisses me off. I only use the classic method in my personal code. If I'm part of a larger project, we decide on one method and stick to it (with exceptions for special cases - function over ideology).\n\nThis is actually very much in the spirit of PEP8. When you see 'use single or double quotes', it really doesn't matter. Pick a rule and stick with it. I like single quotes because I don't have to press two buttons at once. As with the above, there are exceptions to the rule when appropriate.\n\nOne that I constantly catch myself failing is the [line break before/after binary operator](https://www.python.org/dev/peps/pep-0008/#should-a-line-break-before-or-after-a-binary-operator). My instinct is to put the operator on the end of the line when writing the code. It's a hard habit to break.\n\nOther than that, I pretty much ignore the line length.  I use 80, 100, 120, as appropriate.", "id": "de3rz09", "owner_tier": 0.9, "score": -4.3478260605327347e-10}, {"content": "I'm not employed to write Python code. Quite the contrary, I work in .NET. So when I write recreational code at home I don't follow Python's conventions because I find them arbitrary and other people won't have to be referencing or using my code. That being said, if I were to share the code, I'm *pretty* sure people would be able to understand that doCrossover() is the same as do_crossover(). camelCase isn't that hard to read, and I find it to personally be moreLegible than separating_things with underscores.\n\nSo if you're working on a shared project in Python, yeah, you should probably follow pep8. And if you don't, people will probably know what you mean anyway.", "id": "de4p2xo", "owner_tier": 0.7, "score": -4.3478260605327347e-10}], "link": "https://www.reddit.com/r/Python/comments/5viru4/question_do_any_of_you_guys_actually_follow_the/", "question": {"content": "Just curious", "id": "5viru4", "title": "[Question] Do any of you guys actually follow the PEP8 style guide?", "traffic_rate": 207.93551603789263}, "saved_time": {"$date": "2024-07-16T03:41:09.980Z"}, "source": "reddit"}, {"answers": [{"content": "I've found that doctests to be incredibly useful. It encourages me to write code in a way so a \"randomized\" version of an object can be created. I'll often make a random classmethod so I can test methods easilly.\n\nIDE doesn't matter. I just use vim.\n\nA normal python library setup is important. Have a pyproject.toml (or [setup.py](https://setup.py)) and top-level package module. The submodule structure will depend on the problem. I should always be able to clone your repo and \\`pip install -e .\\`.\n\nI wouldn't recommend pinning versions of dependencies (too inflexible), but I strongly recommend setting minimum versions such that if everything was pinned to the minimum, the entire project would work. I've built tools to help with this: xcookie is my repo cookie-cutter package, and xdev has some tools (mainly \\`xdev availpkg\\`) to help me generate requirement/\\*.txt files that work on multiple versions of Python. This is currently non-standard, but I think it could become a well recognized pattern.\n\nYou can never ever ever get away from writing manual docs. API docs are nice to have, but manual docs are always necessary. I embed them in the \\`\\_\\_init\\_\\_.py\\` files and module-level docstrings to they are generated with my sphinx auto-api setup.\n\nType hints are cool. Don't let them block progress though. I use google-style docstrings to give the gist of the types and then I use \\`xdev docstubs\\` to generate \\*.pyi files that mypy can check.\n\nBreakup reusable components into different pip installable modules. Try to have a core utility module that requires no external dependencies. Then have a level above that with \"fundamental\" dependencies (e.g. numpy). Finally have subpackages with multiple dependencies when you have a truely reusable set of tools. Otherwise throw it in the main repo's <pkg>.util submodule.", "id": "jwog8d7", "owner_tier": 0.7, "score": 0.2605042015966387}, {"content": " - Use Sphinx to generate documentation from Do strings automatically, unless you're using FastAPI. FastAPI auto generates documentation for you.\n\n - Use black for linting, if that's not enough you can combine it with flake8 if you edit the conf. \n\n - I personally use type hinting and control it with Mypy.\n\n - I also use unit testing with pytest.\n\n - I like FastAPI a lot but I'm not a backend dev so my use cases are usually on the simpler side.\n\n - I also use commitment to standardize git commits.\n\nblack is not a linter\n\nReplace flake8 with ruff\n\n\\+1 to mypy and pytest.\n\nI wouldn't recommend Sphinx as restructured text is a horrible format. There are plenty of markdown-based tools, mkdocs+plugins being one of them.\n\nBlack+flake8 is fine, use it myself a lot, mostly together with isort. Ruff is a very popular and fast linter these days, and can replace all of these tools.\n\nI like using pre-commit to do linting and other checks at commit time.\n\nA CI,  based on GitHub actions or similar, is a must.\n\n- use pydantic-settings for managing app wide settings / env vars\n\nUse this https://pypi.org/project/pyrgo/\n\n+1 to FastAPI - best used for web APIs and is very helpful for generating templated documentation\n\nSonarLint\u2019s free one is my recommendation - have used both free (Python) and enterprise (C#) Sonar products and am happy with them.\n\nCyclomatic Complexity, Readability, Security Faults etc all packaged up quite nicely (tho the exporting and tracking of issues leaves something to be desired in the free version, which is totally fair)\n\nAlso, shout out to Ruff - as the creator has recently taken the leap and gone full time with the endeavour and is a fellow redditor!\n\nWhy?\n\nSecond this recommendation. Ruff is fast and stays out of the way unless I'm actually messing something up. Combined with mypy the number of dumb bugs I write has gone way down.\n\nAgreed, tried pulling and flake8 but ruff kills it, so fast\n\nCan you recommend a markdown based tool that generates documentation from Docstrings?\n\nMkdocs is only good enough for simple use cases, when you need more, imo nothing comes close to sphinx, and sphinx can also do markdown as much or as less as you need it to.\n\nSphinx can use markdown with the addition of [MyST-Parser](https://myst-parser.readthedocs.io/en/latest/) though reStructuredText is so simple, works well, and is the de facto standard for Python documentation.\n\nBecause:\n\n\\- it's much faster,\n\n\\- better maintained,\n\n\\- supports pyproject.toml,\n\n\\- can replace more tools\n\nThe maintainer of flake is a prickly individual who randomly refuses to support accepted standards, especially pyproject.toml; the maintainers of ruff are pretty chill.\n\n[mkdocstrings](https://mkdocstrings.github.io/) for MkDocs is good, [pdoc3](https://pdoc3.github.io/pdoc/) is not bad either.", "id": "jwnzthv", "owner_tier": 0.3, "score": 0.9999999999159664}, {"content": "I'm a believer in using docker containers for development. It eases onboarding new developers. It clarifies the architecture and external system dependencies like logging, message broker, etc.\n\nShould be higher up", "id": "jwp8tp1", "owner_tier": 0.3, "score": 0.10084033605042016}, {"content": "Personally,\n\n- pdm to manage dependencies\n- hatchling to build\n- everything in pyproject.toml\n- ruff with some extra rules added\n- black\n- mypy in pre-commit hooks so it's not always running and pyright does a good job catching the issues before it gets to this stage\n- type hints in anything non obvious, the linter normally helps with this but having some typed dicts here and there help with understanding what a dictionary could contain (for example)\n- version bump and changelog generation with commitizen\n- autodocs building from Google style docstrings using mkdocd and mkdocs material (if required)\n- I use rtx personally to manage python versions instead of pyenv as it can manage multiple tools not just python but it basically does the same thing + direnv functionality.\n- I use neovim but I dont think the editor matters.\n- fastapi is great and I recommend it though I'd like to try litestar at some point to compare.\n\nThings you didn't touch on which I've personally found immensely helpful.\n- https://github.com/aminalaee/sqladmin to get a django admin like interface incredibly quickly when defining your database tables with sqlalchemy. \n- sqlalchemy 2.0 async with type definitions is great and when paired with alembic having automigrations is incredibly useful for maintaining a database but it's pretty easy to write these in SQL if you'd prefer that.", "id": "jwop3rw", "owner_tier": 0.5, "score": 0.10924369739495797}, {"content": "Don\u2019t sleep on Dunder Methods is my main advice.\n\nBe pythonic :)\n\nSecond bit of advise - whatever you use for config - be it settings.py, config.json \u2026 yaml, toml, or some home brewed markup\u2026.\n\nDocument it, and consistently apply it to all projects - and make sure not to mix up CONSTs for ENV vars along the way.\n\nRemind yourself that Python is largely interpreted, so leaving behind appropriate definitions of required config is greatly appreciated (and of course, a test suite with full code coverage is never refused)\n\nSame goes for CI/CD Release/Deploy etc\u2026 be consistent and document it.\n\nMost devs can figure out your business logic by reading your code - but we can\u2019t easily figure out the \u201cdeployment rain dance\u201d that only works on sundays from your slave win7 laptop with the broken screen that is hardwired into the network and uses a different auth system than everything else\u2026..\n\nFinally, name modules, packages, classes and method appropriately - it really is annoying to decipher lineage in an interpreted language\u2026esp when some objects/models (ex Protobufs) may exist outside the scope of the current blocks.", "id": "jwp2zjd", "owner_tier": 0.7, "score": 0.05882352932773109}, {"content": "I've been developing production use code for 5 years now.\n\nI use PyCharm for some \"big picture\" tasks.\nI use vim for standard small writing / quick changes and testing.\n\nVisual Studios (edit: Code*) interface and behavior is so awful I can't stand it. I tried it twice because people keep singing it's praises, but I just don't like it.\n\nSphinx for documentation.\n\nI use flake8, because I do not like black, but I am personally incredibly picky about how I want my code to look.\n\nI am very thorough about typing everything humanly possible, but I don't use mypy, just the standard lib typing.\n\nI adore Flask, I love tinkering with it, I use it for 3 separate projects that are all in prod use and just rock solid. I've never bothered to look at FastAPI.\n\nI avoid adding dependencies as much as possible. I personally would rather maintain code that borrows from stuff I would want in dependencies.\n\nEdit: pytest for testing.\n\n> Visual Studios interface and behavior is so awful I can't stand it. I tried it twice because people keep singing it's praises, but I just don't like it.\n\nVisual Studio or VS Code?\n\nVS Code, sorry.", "id": "jwopjm1", "owner_tier": 0.3, "score": 0.0672268906722689}, {"content": "I'd like to hear from anyone that has a logging setup they are happy with.  \nHas anyone implemented structured logs using the standard library logging module?  \nHow do you intersperse logging statements amongst your code without it looking ugly?\n\nIf you want structured logs I recommend https://www.structlog.org/en/stable/\n\n`structlog` or `mflog` in case you want an out of box experience with structlog, standard library is very basic imo.\n\n> How do you intersperse logging statements amongst your code without it looking ugly?\n\nI made [a standard logger](https://gist.github.com/TJMac93/cc17e0aa4546723cfba0d7165dbd9651) that I use a lot of the time. I've made it into [a decorator](https://gist.github.com/TJMac93/e062387393bcd54373efd9c613a4ed5f) so that it can be spread all over code without being too invasive.\n\nLogging is a mess sadly. Our approach is to have bootstrap files that run the application. In there I'm setting everything up before I even import my packages/modules.\n\nBecause as soon as you import your code, imports of external packages are done too (of course). This means that they're setting up their logging before your setup is done.\n\nAt least that was the problem I was facing. And as far as I know, there's no unified way to define a logging config that will be parsed *before* anything is actually executed.\n\nI like basic \ud83d\ude42\n\nI basically do the same although I created some custom Formatting and Logger classes that provide additional methods and convert the names of all methods to snake_case instead of camelCase.\n\nA package should not configure loggers and I have not encountered a (popular) package that does so. In this case you can import a package and then configure the logger. \n\nSo I do not understand what problems you are facing?\n\nIs there any way you could kindly share your code for turning function names into snake case? Do you do in in a Formatter class? I can't believe I haven't thought to try that.\n\nI'm working on a web based interface for parsing my log files in my flask projects and I would love to have function names normalized like that.\n\nIf you just create/get a logger, you're already \"configuring\" it. If you create a basic config, this logger will not be affected.\n\nIn short\n\n    # package loads a logger on import\n    logger = logging.getLogger(\"foo\")\n\nThis happens during import because a lot of packages define their loggers outside of functions.\n\nNo matter what you're doing with the config now, the logger this package uses will not be affected. Of course, you can go through every single logger your packages use. Have fun with that one. Every time a logger gets renamed or added, you'll have to change your setup.\n\nCould you elaborate what you mean?\n\n1. Do you want that function names that appear in you log files are converted to snake\\_case?\n2. Do you want to call methods of a logger object by snake\\_case names? For instance, \\`logging.get\\_logger().set\\_level()\\` instead of \\`logging.getLogger().setLevel()\\`?\n\nIf you create a logger you are not configuring it, see [https://docs.python.org/3/howto/logging.html#what-happens-if-no-configuration-is-provided](https://docs.python.org/3/howto/logging.html#what-happens-if-no-configuration-is-provided). (The exception somewhat is the root logger which automatically configures itself by calling logging.basicConfig if no handler is attached but required. Creating it still doesn't configure it, but calling something like [logging.info](https://logging.info)  implicitly configures the root logger.)\n\nSee [https://docs.python.org/3/howto/logging.html#configuring-logging-for-a-library](https://docs.python.org/3/howto/logging.html#configuring-logging-for-a-library) how to configure a logger for a library.\n\nIf you are using logging.basicConfig to configure the root logger, you have to set force=True if it has already been configured, see\n\n[https://docs.python.org/3/library/logging.html#logging.basicConfig](https://docs.python.org/3/library/logging.html#logging.basicConfig)\n\nOtherwise, there will be no effect of this configuration and this might be the case why you are facing this problem. If you are configuring loggers without basicConfig, which I would recommend, you never have this problem.\n\nI think that Python's logging module is complex and definitely has a learning curve. But it is also very flexible and IMO not a mess.\n\nYou seem to know your logging.\n\nHave you got any good patterns for how to use the standard library logging module?\n\nI've seen some people mention decorators, and I've toyed with that idea too. But I wonder what the downsides of that would be e.g.  overhead of using decorators   \n\n\nI'm writing a webapp and I want to assign each request a unique id, and then be able trace my way through each request response cycle when the debug level is set using this id.  This is my first go at setting up serious logging.\n\nI don't have any experience with writing webapps. But for this task [https://opentelemetry.io/docs/instrumentation/python/](https://opentelemetry.io/docs/instrumentation/python/) might be useful.\n\nSee also https://opentelemetry.io/\n\nSounds like this may be what you're looking for: https://docs.python.org/3/howto/logging-cookbook.html#using-filters-to-impart-contextual-information", "id": "jwp1iu7", "owner_tier": 0.1, "score": 0.13445378142857142}, {"content": "**Always maintain both abstract and concrete dependencies.**\n\n\n## Abstract Dependencies\n\nThese are the packages you're importing and using directly. Declare them in pyproject.toml, setup.py, or setup.cfg and set their version pins to allow the current version you're using up to (but not including) the next major release. Most packages use semantic versioning.\n\nThis will allow patch updates but prevent major updates that may break compatibility with your code.\n\n## Concrete Dependencies\n\nThese are **all** packages used by your project, both directly and indirectly as subdependencies. You should capture these in a lock file of some sort with each package hard-pinned to the exact version in the environment you develop and test in. The easiest way is with `pip freeze`, but Poetry, pdm, and pip-tools all have solutions for doing this. You shouldn't have to maintain these directly. I highly recommend Poetry or similar for this purpose because it will allow you to add/remove packages without affecting the pinned versions of other packages.\n\nThis will give you (mostly) deterministic environment builds, which is _extremely_ important for maintenance of critical applications.", "id": "jwstzih", "owner_tier": 0.3, "score": 0.016806722605042016}, {"content": "I think a super underrated method is to start with a good project directory structure. Makes the repository easy to navigate (thus read) and it basically forces you to split up your code into (mostly) separable components.\n\ndo you have a good scaffold to copy ? i rely on poetry base one but i'm eager to see more", "id": "jwt69v6", "owner_tier": 0.1, "score": 0.033613445294117646}, {"content": "Pick a formatter and stick to it; no exceptions even though they all look ugly. Put more time into code architecture before you start writing. Lastly, just accept that code in a large institution is going to be ugly.\n\nAlso, FastAPI over Flask", "id": "jwqanyd", "owner_tier": 0.5, "score": 0.016806722605042016}, {"content": "I'm surprised no one mentioned Makefile. I use it in every repository for Docker / Terraform commands, makes life easier to whomever cloning the repository and for local runs.", "id": "jwtvcyi", "owner_tier": 0.1, "score": 0.008403361260504201}, {"content": "Any opinion on release strategy?", "id": "jwplc4x", "owner_tier": 0.1, "score": 0.008403361260504201}, {"content": "I don't understand the \"i use vs code because it's lighter than pycharm\" argument. How many gigs of RAM do you have on your machine? If you can't run pycharm then you need to ask your employer for a better machine, no?\n\nWe have huge setups at my workplace, and pycharm handles it without any trouble, or consuming too much memory.\n\nNeedless to say, i much prefer pycharm than vs code\n\nPyCharm all the way.", "id": "jwq71h2", "owner_tier": 0.3, "score": 0.016806722605042016}, {"content": "Pycharm for lyfe", "id": "jwrh3uw", "owner_tier": 0.7, "score": 0.008403361260504201}, {"content": "> clean code\n\nShould not be a requirement for most code written. It is far more important to have a good core architecture and related code. Universal clean code can help reduce maintainance costs, though this comes at considerable costs. \n\nWhen looking at costly problems, more often than not the root problems lies with having multiple interfaces between the same components. This increases complexity greatly. So i would focus on top level architecture and clearly defining and reusing the interfaces. \n\n> Code editor \n\nUsually chosen by dev rather than one for entire team. I prefer Vscode as it is far lighter than pycharm. Also much better for other languages. devcontainers etc. Extensions also depend on project and personal dev habits. \n\nExplicit typing is optional. Biggest advantage automcomplete and better linting. \n\n> academic/personal ... spearheading\n\nFind yourself a good software engineer/architect if you're out of your depth. \n\nAutodocs are relatively easy to generate but require code discipline & standards. Notebooks can help greatly as tutorials.", "id": "jwp2u9c", "owner_tier": 0.5, "score": -8.403361344537815e-11}, {"content": "I've liked using jupyterbook for docs. The reason being your docs are executable and failures can be caught by CI.", "id": "jwpcf1z", "owner_tier": 0.5, "score": -8.403361344537815e-11}, {"content": "I call it the \"plugin\" model but I think the more correct term has something to do with Object Oriented format.\n\nBasically, you have your main code that is fast and efficient, everything is grouped by categories and comments are sparse (you don't need comments when the code is obvious through proper variable names)\n\nThe main code then loops through whatever task needs to be done at that time. Normally either creating a new threading.Thread, event loop, or multiprocess. All these tasks are in separate files and work separately from each other. The only interaction any module should have are with it's dependencies and the main loop. \n\nTyping is absolutely necessary for every piece of maintainable code. \n\nClasses should all have the same layout and be called the same way, and dependencies would be edited to fit with your code. Since you are writing all your code the same way, it should be reusable. \n\nAnything that can be run on the GPU should be run on the GPU, and anything that can run in by C/C++ should. If there's a long function that takes forever with python that is just CPU calculations, create a module in C++ to run it. \n\nNothing beats VSCode for Python. Being able to open virtually any file means nothing can hide from you. \n\nThis might not be the most Pythonic way to run python, but when adding new features, it makes it a lot easier when the code runs fast, your features are all separate, and you can add/remove bits and pieces by just not importing the feature.", "id": "jwpdljc", "owner_tier": 0.9, "score": -8.403361344537815e-11}, {"content": "From what I have seen in most python repo enterprise code.\n- A common formatter like black.\n- Flake8 with varying degrees of addition checks.\n- Mypy for strict type checks.\n- Precommit runs all the above.\n- 100% test coverage check.", "id": "jwp1ob6", "owner_tier": 0.1, "score": 0.008403361260504201}, {"content": "Very interesting post.  I, myself, write poor code.\nPlease excuse me to put a  reminder\n!remindme 3 days.\n\nI will be messaging you in 3 days on [**2023-08-21 11:36:23 UTC**](http://www.wolframalpha.com/input/?i=2023-08-21%2011:36:23%20UTC%20To%20Local%20Time) to remind you of [**this link**](https://www.reddit.com/r/Python/comments/15u6fey/what_are_your_best_practices_for_coding_in_python/jwph56q/?context=3)\n\n[**1 OTHERS CLICKED THIS LINK**](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Reminder&message=%5Bhttps%3A%2F%2Fwww.reddit.com%2Fr%2FPython%2Fcomments%2F15u6fey%2Fwhat_are_your_best_practices_for_coding_in_python%2Fjwph56q%2F%5D%0A%0ARemindMe%21%202023-08-21%2011%3A36%3A23%20UTC) to send a PM to also be reminded and to reduce spam.\n\n^(Parent commenter can ) [^(delete this message to hide from others.)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Delete%20Comment&message=Delete%21%2015u6fey)\n\n*****\n\n|[^(Info)](https://www.reddit.com/r/RemindMeBot/comments/e1bko7/remindmebot_info_v21/)|[^(Custom)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Reminder&message=%5BLink%20or%20message%20inside%20square%20brackets%5D%0A%0ARemindMe%21%20Time%20period%20here)|[^(Your Reminders)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=List%20Of%20Reminders&message=MyReminders%21)|[^(Feedback)](https://www.reddit.com/message/compose/?to=Watchful1&subject=RemindMeBot%20Feedback)|\n|-|-|-|-|", "id": "jwph56q", "owner_tier": 0.1, "score": 0.016806722605042016}, {"content": ">I want to write clean code.\n\nI highly recommend [Architecture Patterns with Python](https://www.cosmicpython.com/book/preface.html) for thinking about how to think about writing clean APIs.\n\n>For production-ready/\"industry-grade\" code, what are your personal recommendations on IDEs? If VSCode, what extensions do you use?\n\nI use PyCharm, but the majority of rules that get applied are done through pre-commits.\n\nI use type hints on every function.  It's second nature at this point.  I couldn't imagine trying to work with a code base without them.  Being able to see \"Alright, this is returning an int object\" at a glance is so much easier than wondering \"Alright... I think this returns an int, but maybe it's an int cast to str?  Or maybe this is a `ResultNumber` object that looks and acts just like an int.. hmmm..\"\n\n>Edit: Also, can you share your thoughts on FastAPI vs Flask if you've used these?\n\nI haven't used these in production settings, but my understanding is that FastAPI is not well managed as a product.  I've seen some recommendations for LiteStar(which I'm currently using for a single URL entrypoint, and it's adequate so far).  I don't have an opinion on Flask, but the architecture patterns book I mentioned above uses flask in the example application.", "id": "jwpshlm", "owner_tier": 0.7, "score": 0.008403361260504201}, {"content": "My preferred setup:\n\nIDE: PyCharm (I'm a recent convert and find it to be a much better IDE for Python than anything else).\n\nLinters: Pylint + Flake8 + MyPy.\n\nDocumentation: Sphinx, using either Numpy style docstrings (first choice) or Google style (close second choice).\n\nUnit tests: Pytest.\n\nNo comment on FastAPI as I don't have much experience with it, but I've enjoyed using Flask.\n\nNot a fan of black. I prefer to format my code myself (and I prefer single quoted strings).", "id": "jwxmqdi", "owner_tier": 0.3, "score": 0.008403361260504201}], "link": "https://www.reddit.com/r/Python/comments/15u6fey/what_are_your_best_practices_for_coding_in_python/", "question": {"content": "I have been writing Python for six years now, it's my primary language - but mostly in an academic/personal project setting and for machine learning.\n\nNow, I find myself spearheading an ML project at a big company, and our backend code base keeps growing, and other people depend on it. There are layers to it, with threads spawning, and dependencies on caches and databases for state sharing. It's more than a pet project - you get the gist.\n\nI want to write clean code.\n\nAm I wrong in thinking that the code should have enough documentation ingrained that using some automated service gives me an API documentation and I don't have to write it manually?\n\nThat's what I see with many open source projects. How are people doing it in the industry? Do you use type hints? If yes, mypy or pyright or something else?\n\nOn IDEs - a guy I respect used to write in PyCharm with strong pylint rules, but that was 5 years ago. VSCode is *very* lightweight when compared to PyCharm. For production-ready/\"industry-grade\" code, what are your personal recommendations on IDEs? If VSCode, what extensions do you use?\n\nAlso, any other general personal recommendations? I usually strongly abide by \"explicit is better than implicit\".\n\nEdit: Also, can you share your thoughts on FastAPI vs Flask if you've used these?", "id": "15u6fey", "title": "What are your best practices for coding in Python in the industry?", "traffic_rate": 207.93551603789263}, "saved_time": {"$date": "2024-07-16T03:41:09.980Z"}, "source": "reddit"}, {"answers": [{"content": "IMHO, you should always attempt to conform to PEP8 unless there's a very good reason not to.  As an example, *\"wrapping an external API\"*  qualifies as a \"very good reason\" but *\"I'm just used to camelcase\"* does not.  \n\nHaving style consistency across codebases is a good thing and makes it that much easier when someone has to work with your code or you have to work with theirs.  If I was hiring a Python programmer and their code didn't follow PEP8 I would likely think twice before hiring them.\n\n>  If I was hiring a Python programmer and their code didn't follow PEP8 I would likely think twice before hiring them.\n\nA little harsh, don't you think?  Maybe just some programming guidelines for whatever codebase you have would be better.  I might be a C programmer at heart, but I can conform to Java's normal capitalization (no IDE helping me) or Python's, but it's a little harsh to disqualify a programmer just because he does a coding style you don't like.\n\nI agree.  That's why I said \"think twice\", not \"exclude\".  :-)\n\nFWIW, I was a Java programmer first so I do know the pain of switching to PEP8 (\\_and\\_I\\_detest\\_underscores\\_!\\_!\\_!\\_) but I did it anyway.", "id": "c0zgbe1", "owner_tier": 0.1, "score": 0.9999999996}, {"content": "I look at PEP-8 as a very solid *guideline* to follow. I try to stick to it as much as possible, and prefer to read code that sticks to it as well. Granted C++ doesn't have a style guide per se, however there are common idioms that you find people adhere to. For instance, most people indent their code, it's completely unnecessary, but just about everyone does it. \n\nAt the end of the day all I really care about is consistency. As long as there is some form of convention I can decipher, I'm happy. ", "id": "c0zgdhf", "owner_tier": 0.5, "score": 0.5199999996}, {"content": "*Q*: What is the first section heading in PEP-8 (after the intro)?\r\n\r\n*A*: *A Foolish Consistency is the Hobgoblin of Little Minds*\n\nGood thing the points people are making here are not foolish, but reasonable.", "id": "c0zgxvj", "owner_tier": 0.1, "score": 0.2399999996}, {"content": "I'd say the point is to have a standard and be strict to it. It gives another level of readability to Python and somehow when you import a library, you already know if you are dealing with a function or class.\n\nTake for example handling unicode in Python, there is no standard how library should deal with it, resulting in total chaos. Some libraries expect unicode, some transform to unicode, some never heard of it. And then add the encoding fun on top if it.\n\nStandards.\n\nold engineering proverb: the good thing about standards is that there are many to choose from.\n\nI agree that the point of a standard is to be strict about it, but you can't apply a standard to someone who has not chosen to accept it as their own. A third-party library is outside of the radar of what PEP-8 is a true standard for. For example, web2py apparently doesn't follow PEP-8, but I'm not aware of that being a goal of theirs in the first place. For that reason, PEP-8 comments make no sense.\n\nGood point about unicode/bytes/etc. Thankfully I mostly deal with math/numerical stuff and get to skip out on that party for the most part.\n\nweb2py encourages PEP-8 and follows it in most places except in a limited context where it makes sense to deviate (see [here](http://web2py.com/book/default/chapter/01#Elements-of-Style)).\r\n\r\nRemember:\r\n>But most importantly: know when to be inconsistent -- sometimes the style guide just doesn't apply.", "id": "c0zft4f", "owner_tier": 0.1, "score": 0.3999999996}, {"content": "Sure, PEP 8 was intended for the stdlib.  But who cares about the original intentions?  It has lived on to become a de facto guideline for all Python code, and that's a great thing.  The more people adhering to it, the more consistent and pleasant reading Python code will be.  I see no downside to this whatsoever.\n\nIf you want to express yourself, arbitrary syntax quirks are a pretty pointless way to do it.  Get on board and write code that is easy for others to deal with.", "id": "c0zilxr", "owner_tier": 0.7, "score": 0.0799999996}, {"content": "I understand but I think you overstate the case especially when you say stuff like:\n> If someone wants to make the next great web framework use ALL CAPS, go right ahead, it'll probably still be cool.\n\nThe result might be cool, but it's not cool to rob signifiers like variable naming conventions of all their meaning.\n\nThe main takeaway to me from pep8 is consistency.  If you hack on pywin32, keep their conventions.  If you hack on ALLCAPS web framework, keep theirs(although, only pywin32 has an actual reason for its choices, all-caps web framework has none, 'knowing when the style guide doesn't apply' shouldn't mean 'gratuitously flaunting good practices')", "id": "c0zg5cr", "owner_tier": 0.7, "score": 0.0399999996}, {"content": "I second that.\r\n\r\nmodule > project > universe\r\n\r\nI remember (though I cannot find a reference) reading that Guido uses 4-space indentation for public code and 2-space for Google code (or vice versa) for obvious reasons. That might have been before Google imposed a corporate standard. The point is, even Guido recognized that rules are meant to be broken.\r\n\r\nI would certainly follow whatever standard my employer wants, but I don't buy the argument that following the standard makes your code more readable.\r\n\r\nFor example,\r\n    x = MyClass()\r\n    y = my_class_factory()\r\nversus\r\n    x = MyClass()\r\n    y = MyClassFactory()\r\nor\r\n    x = my_class()\r\n    y = my_class_factory()\r\nThe 1st version follows PEP-8 and is *less* readable.\r\n\r\nThe real problem is that my code uses stdlib code all over the place, and I do not want to rebind everything from stdlib. I prefer upper-case for both classes and functions, but that leads to odd-looking code. My compromise is to use lower-case for *everything*. Stdlib class references are rare, so they are hardly noticed. Besides, built-in types use lower-case already (e.g. `dict` and `list`).\n\nI'd say a factory is a special case.  It's a function that is intended to behave like a class for the purposes of constructing objects, and therefore I think it is perfectly reasonable to make an exception to the rule and use your second example, making it appear to be a class name.  PEP8 is not to be blindly followed without exception.\n\n> I remember (though I cannot find a reference) reading that Guido uses 4-space indentation for public code and 2-space for Google code (or vice versa) for obvious reasons. That might have been before Google imposed a corporate standard. The point is, even Guido recognized that rules are meant to be broken.\n\nGoogle always had a 2 space indentation rule. Guido just followed that.\n\nThough since a factory behaves differently it's good to know it's a factory.\n\nWhat's the difference between a function that returns a new object and a function that returns an existing one? If you say 'memory', then what about `list`/`dict`?\r\n\r\nIn a garbage-collected language, there is no reason to distinguish between classes and functions at the point of use. The capitalization convention is a legacy from C++, where the constructor implies a future call to the destructor in the same scope. In old C, structs were typically not capitalized.\n\n   1. [Are you sure?](http://google-styleguide.googlecode.com/svn/trunk/pyguide.html#Indentation) Do you mean that they use 2-space internally, but 4-space for public projects? That would seem strange, but interesting.\r\n   1. He *said* that he wanted to make clear which code was open source, to avoid any legal issues.\r\n\r\nAt any rate, if you are right, then I adduce Google rather than Guido. My argument stands.\n\nThere are a number of things you can do with a class but not a factory function. For example, inheritance and isinstance().\n\nThere are also significant differences between what you can do with a module and with a function, or with an iterator, etc. The most useful distinction in Python is not inheritance, iteration, or attribute look-up, but rather \"callability\". If all callables are capitalized, the reader immediately sees the latent potential.\r\n\r\nI think the problem is that most coders think of themselves, rather than of readers. Capitalizing a class reminds the coder of how he coded something. The reader, however, cares more about what the code is doing. When he sees code like this:\r\n    x = Foo()\r\n    y = bar()\r\nif he knows the PEP-8 conventions, then he knows that `x` will have the methods of `Foo`. That's useful. However, he does not know the methods of `y`. So why bother to tell him the methods of `x`? He has to read the docs anyway. He'll know that `Foo` is a class as soon as he sees the word `class`, so you really did not need the naming convention. It only serves to make the code look strange.\r\n\r\nHmmm. I think it's like the difference between English and German capitalization. In English, we capitalize only proper nouns; that is, we capitalize the *name* of a thing, but not the generic *type* of a thing. We like to recognize that distinction. In German, they capitalize *all* nouns. They are emphasizing that the word represents a thing, not an action or description, which makes German easier to speed-read. We're used to our way, which provides more information, but their way avoids making judgments . I've never heard anyone complain about German capitalization. They complain instead about the *lengths* of German nouns.", "id": "c0zhoeg", "owner_tier": 0.1, "score": 0.43999999959999997}, {"content": ">C# isn't bound by law to be written the same by everyone around the world.\n\nTrue.  There is no official coding standard from Microsoft regarding how C# should be formatted.  However, you'll see that the vast majority of the C# code out there is formatted exactly the same, thanks to Visual Studio defaults.  The same applies to Java code.  Both Eclipse and Netbeans conform to Sun's (now Oracle's) formatting recommendations, and many java projects end up following them because that's the defaults the tools came with.\n\nPython doesn't have the same level of tool support as Java or .Net.  PEP8 is an attempt to create a substitute for the sort of default coding style that would normally be enforced by an IDE.", "id": "c0zi0f1", "owner_tier": 0.3, "score": 0.0399999996}, {"content": "Python code, apart from the enforced readability boost of significant whitespace, has always seemed more readable because of people's following PEP-8. The average Python code you find online is much more readable than the average C++/Perl/PHP piece of code.\n\nI just dislike people who go against PEP-8 without any apparent reason and ruin this conformity.", "id": "c0zqsf6", "owner_tier": 0.3, "score": 0.0399999996}, {"content": "PEP-8 is useful for folks whom have absolutely no clue how one might write idiomatic Python code, and as such it's an excellent read for new programmers and old programmers who are coming to Python from another language.\n\nI think when people bitch about \"non-PEP8\" code, much of the time they're really bitching about non-idiomatic code.  I think bitching about that is a reasonable thing, because if a developer never internalizes the idioms for a language, it's unlikely he's going to be able to write really good code in that language.  It's also a sign that he may not have actually *read* any good code in that language.", "id": "c0zgvb6", "owner_tier": 0.3, "score": -3.9999999756901163e-10}, {"content": "PEP-8 needs to be amended to fix it's advice on sorting imports.\n\n> Imports should be grouped in the following order:\n>\n> 1. standard library imports\n> 2. related third party imports\n> 3. local application/library specific imports\n\nThis should read:\n\n> Imports should be sorted alphabetically.\n\nThen I can finally get that \"PEP-8 or die!\" tattoo.\n\n\nI'm not sure I understand the reason for alphabetic sorting. What makes you want that?\n\nI've always used the PEP-8 way to separate what's Python's, what's someone else's, and what's mine, and I like to have that separation/definition.\n\nAlphabetical sorting for efficiency.\n\nI find it's easier to find an import in a list of imports when it's alphabetical. I know the name of the import, so I can scan down the list alphabetically.\n\nEfficiency because you can write an extension for your IDE/text editor that implements automatic alphabetical sorting of imports. I have one for my editor so that when I want to import a library I just write it inline in the code, then a keyboard shortcut will automagically shuttle that import to the top of the file and put it in the right place. It's a nice little feature.\n\nIt also feels weird sorting imports into \"my stuff, their stuff, those other guys stuff\".\n\n\nI guess I can see the efficiency standpoint, but I guess I'd combine that with the PEP-8 organization, making each section sorted.\n\nI think the general separation helps readability. Rather than scanning all 15 lines of imports, if I want to know what third party libraries some code uses, I know I can skip the first block since it would be stdlib stuff. (yeah, yeah, I know you are likely to know the dependencies up front, but pretend you don't)", "id": "c0zk1aw", "owner_tier": 0.5, "score": 0.2399999996}, {"content": "PEP8 or DIE!", "id": "c0zum9h", "owner_tier": 0.3, "score": -3.9999999756901163e-10}, {"content": "Following pep8 is not tough and there are tools to help verify it. Pep8 also is not crazy strict. If someone sends me a patch or pull request of code which ignores pep8 fully I will not accept it. If there is an _attempt_ to be consistent on the pep8 style I will accept it and make minor style fixes myself. I like code I can read easily when I have to maintain it :-).", "id": "c10asph", "owner_tier": 0.1, "score": -3.9999999756901163e-10}], "link": "https://www.reddit.com/r/Python/comments/ddq2y/can_we_stop_overvaluing_pep8/", "question": {"content": "If we're going to be giving out negative marks for projects not following [PEP-8](http://www.python.org/dev/peps/pep-0008/), we might as well give Reddit negative marks for not following [XHTML 1.0 Transitional](http://validator.w3.org/check?uri=www.reddit.com&charset=\\(detect+automatically\\)&doctype=Inline&group=0) standards. Oh snap...\n\nThis is nothing new, but it's kind of ridiculous to still see comments like \"this would be better if it followed PEP-8\" or \"I don't get why people don't follow the standard\" (made up comments, but close enough to what I've seen).\n\n***\nThe first sentence of PEP-8 states, with added emphasis...\n> This document gives coding conventions **for the Python code comprising the standard library in the main Python distribution**.\n\nThat means exactly what it says. It is not intended to be some language-wide standard that everyone must follow in every project that uses Python under the sun. There is no canonical C++ coding standard that all C++ ever written has to follow. C# isn't bound by law to be written the same by everyone around the world. Perl...well, nevermind.\n\nPersonally, I think PEP-8 is quite a fine standard, one I *choose* to use in my personal work, and one I'm bound by for the work I do within Python itself (additionally, see [PEP-7](http://www.python.org/dev/peps/pep-0007/)). If someone wants to make the next great web framework use ALL CAPS, go right ahead, it'll probably still be cool.\n\n***\nThe second section of PEP-8 states, again with added emphasis...\n> Consistency with this style guide is important.  Consistency *within a project* is **more important**. Consistency *within one module or function* is **most important**.\n\nRemember those projects \"not following PEP-8\"? Well, PEP-8 still loves them. The stdlib's own [unittest](http://svn.python.org/view/python/branches/py3k/Lib/unittest/case.py?view=markup) package is fine by PEP-8, although many would have you believe otherwise. The API is very widely used and changing it to more strictly follow PEP-8 would be damaging, but its consistency over the lifetime of the package (previously just a module) gives it a thumbs up.\n\n***\nRight after that, PEP-8 states...\n> But most importantly: know when to be inconsistent -- sometimes the style guide just doesn't apply.\n\nI've read comments stating that [pywin32](http://sourceforge.net/projects/pywin32/) and [wmi](http://timgolden.me.uk/python/wmi/index.html) would be better if they followed PEP-8. For a second, lets forget a previous statement that it's a standard for the internals of Python and not a global standard. If we open it up to be a global standard, those packages are wrappers of Win32 functionality, and as such, should be as close as possible to direct mirrors of the Win32 APIs they cover. Changing WaitForSingleObject to wait\\_for\\_single\\_object gains absolutely nothing. In fact, it becomes less useful, because tracking down the documentation for the underlying call becomes more difficult, among other things.\n\n***\nSo, can we please give up the \"PEP-8 or die!\" mentality? If you want to follow the standard, great, high-five to you. If you want to name your classes with lower case and use camel case method names, great, high-five to you as well.", "id": "ddq2y", "title": "Can we stop overvaluing PEP-8?", "traffic_rate": 207.96742562738908}, "saved_time": {"$date": "2024-07-16T03:41:09.980Z"}, "source": "reddit"}, {"answers": [{"content": "We have the one from Oracle which was first written back in 97, so most people don't follow that anymore.\n\nWe also have [Google's style guide](https://google.github.io/styleguide/javaguide.html) that many follows.\n\nWhat most _seem_ to do, in my experience, is simply to use whatever their IDE and code checker/linter suggests and build upon that. So in my case, it is Sonarqube and IntelliJ. If anyone in the team disagrees we can request a change of the rules and have a discussion about it.\n\nDoes Sonarqube do linting? I've always used Checkstyle and Spot bugs.\n\nWell, you have [SonarLint](https://www.sonarlint.org/) that does that part, and then you [pair them together](https://www.sonarqube.org/sonarlint/).\n\nIt is not a combination I'm personally very happy with though. I find Sonarqube to be a bit \"heavy\", and it is clear that SonarQube is a fairly mature product at this point.\n\nFor example, with Checkstyle and SpotBugs it seems like you execute through Maven or Gradle - the build system. While Sonarqube executes through the IDE and pipeline.\n\nMy dream linter/code quality checker would be something that:\n - Can leave in-line comments on pull requests for feedback and not a \"summary\" comment that SonarQube leaves (soft quality gate).\n - Integrate with IDE and/or build system (preferably both).\n - Do changes on save/build/commit, but must be customizable (for example if the team decides that if statements must always have brackets).\n - Customizable rules through a simple format such as JSON or YAML.\n - Being able to import rules from SonarQube.\n - Support test coverage, and hopefully be able to provide in-line feedback on that.\n\nI haven't looked that much at Checkstyle or SpotBugs, if they check these boxes then let me know :)\n\nI agree about Sonar. \n\nYou should definitely check out Checkstyle + Spotbugs + JaCoCo (test coverage). They are the canonical alternative afaik and what I've always used.\n\nWe're already using JaCoCo which feeds data into SonarQube.\n\nHow does Checkstyle and SpotBugs stack up against the list of what I want to achieve though?", "id": "hbkxoze", "owner_tier": 0.9, "score": 0.9999999985714286}], "link": "https://www.reddit.com/r/learnjava/comments/phu2y3/is_there_any_java_style_guide_such_as_pep_8_for/", "question": {"content": "Like a standard guide that tells you where to declare variables, the maximum amount of characters per line, how many spaces per indentation and all that kind of styling details.", "id": "phu2y3", "title": "Is there any Java style guide, such as PEP 8 for Python?", "traffic_rate": 31.751728344855632}, "saved_time": {"$date": "2024-07-16T03:41:09.980Z"}, "source": "reddit"}, {"answers": [{"content": "\r\n    I wrote a tip about  \r\nHow to Start the Homework or a Developer Career about my experiences and knowledges about programming.\n\r\nAs I understand you, you have some knowledge in java which is very fine also for web and server development. But also javscript has become very powerful by the new ECMAscript standard. So work in the direction of web and learn the details of HTML like with w3schools tutorials.\n\r\nBut most important is to do what you like, because that is what you do best. Try to learn in small projects, because than you see what it takes to make it complete. A lot of people like small enterprises need some webpage assistance, so you easy find someone who wants that.\r\n", "id": "2_1242642_1", "owner_tier": 0.3, "score": 3.0}, {"content": "\r\n    I'm of the not-uncommon self-taught programmer type.  Although I started with FORTRAN, it was the only language available to me at the time.  Later, I learned VAX MACRO-ASSEMBLER.  Now I knew, at least a little, what happened in the background and why it makes a difference.\n\r\nBut as far as a recommendation for a startup language goes, I would most strongly recommend a \"C\"-like language.  The style has been used for many other languages (php, java, javaScript, C++, C#, and more).  Getting comfortable with that will give you a jump start into learning many new languages, as needed.\n\r\nI can give you a warning, as well, about letting your studies be guided by 'want ads':  Don't!  Even if they're accurate when you read them, by the time you're proficient they'll likely be a new set of wants and you'll be (1) obsolete, with (2) a fly-by-night fad.  It happens in many professions, but computer programming is particularly vulnerable to this.\n\r\nAnd don't forget to get really good at something - which (for me) is best done by building an application as recreation and embellishing it as a way to learn new features.  This is not only more fun, but gets your mind used to going out and seeking new methods to solve problems.\n\n\n", "id": "2_1242717_1", "owner_tier": 0.5, "score": 3.0}, {"content": "\r\n    You should learn Smalltalk. Here are the key reasons:\n\nSmalltalk was designed for teaching programming to children. It was created by the brilliant visionary Alan Kay and his team at Xerox PARC.Smalltalk is supremely simple and easy to learn, even easier than Python. The complete syntax fits on a post card!Smalltalk is the ideal way to learn object-oriented programming (or OOP), the most important and widely used style of programming in the world.Smalltalk is loads of fun because it\u2019s easy in every respect\u2026easy syntax, easy OOP training, easy IDE (which, incidentally, supports live coding), easy testing (via TDD), easy debugging.\r\nAs if that wasn't enough, Smalltalk is a widely-used industrial and enterprise programming language used by companies all around the world. Some of the more prominent users include:\n\nJPMorganDesjardinsUBSFlorida Power & LightTexas InstrumentsTelecom ArgentinaOrient Overseas Container LinesBMWSiemens AG\r\nJust to name a few. In my home country, Smalltalk is used by Communications Security Establishment (CSE), Canada\u2019s national cryptologic agency.\n\r\nLearning Smalltalk programming will provide a very solid foundation for learning all other languages.\r\n", "id": "2_1242743_2", "owner_tier": 0.1, "score": 5.0}, {"content": "\nQuote:In the future I want to get a job as a software developer and when I go on job descriptions of software developer jobs, they all say different stuff.\r\n'software developer' job is not about knowledge of a language, it is about knowledge of technical background and particularly algorithms, the language is mainly a mean to apply the algorithms. Jumping from a language to another is not a real problem once you master the technical background.\n\r\nYou have to know that you can do pretty much anything in any language, simply some languages are harder for beginners because there is more pitfalls to handle.\r\nYou need to master a set of techniques that are the basis of the job and are not linked to a language.\n\r\nAdvices:\r\n- Start with an easy/safe language: VB, Java, C#, not C or C++. I do not recommend to start with Python either because of the usage of indentation.\r\n- Read documentation / Follow tutorials (a lot of them)\r\n- Start with tiny/useless projects, the purpose is to learn programming, not doing something useful.\r\n- Start with console mode programs (no fancy graphics, no mouse)\r\n- Learn debugger (an incredible learning tool)\nDebugger - Wikipedia, the free encyclopedia[^]\nMastering Debugging in Visual Studio 2010 - A Beginner's Guide[^]\r\n- A problem ? Google is your friend.\r\n- Learn Algorithms and Data-Structures.\r\n- Learn Boole algebra\r\n- Learn one or more analyze methods, E.W. Djikstra top-Down method is a good start.\nStructured Programming.pdf[^]\nhttps://en.wikipedia.org/wiki/Top-down_and_bottom-up_design[^]\nhttps://en.wikipedia.org/wiki/Structured_programming[^]\nhttps://en.wikipedia.org/wiki/Edsger_W._Dijkstra[^]\nhttps://www.cs.utexas.edu/users/EWD/ewd03xx/EWD316.PDF[^]\r\n- Learn SQL\r\n- Learn Databases design and Administration\nIntroduction to database design[^]\n1NF, 2NF, 3NF and BCNF in Database Normalization | DBMS Tutorial | Studytonight[^]\r\n- Learn Regular Expressions\n\r\nInteresting link:\nstanford.edu: Learn to Program[^]\n\r\nThere is no shortcut to knowledge, no one can learn for you, you are the only one that can do it.\r\nRemember the exercises and little projects are not here to make something useful, they are here to teach you programming.\nQuote:What would be the best website to learn a language? \r\nDepend on the language, the best general advice is to find tutorials.\r\nFor web dev: W3Schools Online Web Tutorials[^]\r\n", "id": "2_1242623_1", "owner_tier": 0.5, "score": 2.5}], "link": "https://www.codeproject.com/Questions/1242620/What-language-should-I-learn", "question": {"content": "\r\n\t\t\t    I am interested in software development. I have learnt a little bit about some languages; Java, JavaScript, Python, HTML and CSS. \n\r\nIn the future I want to get a job as a software developer and when I go on job descriptions of software developer jobs, they all say different stuff. So I am trying to figure out what language would be the best for me to learn and become an expert in.\r\nOr is it the other way? As in I choose any language and find a job that has that as a requirement.\n\r\nI am leaning more towards Java. My knowledge right now extends to stuff like creating if statements, loops, methods, classes. So pretty much the basic stuff.\n\r\nBonus question:\r\nWhat would be the best website to learn a language? I want to gain a more in-depth knowledge of my chosen language.\n\r\nAny answers will be greatly appreciated.\n\r\nThanks.\n\nWhat I have tried:\n\r\nAt the beginning stages, so not much.\r\n\t\t    ", "id": "1242620", "title": "What language should I learn?", "traffic_rate": 0}, "saved_time": {"$date": "2024-07-16T03:41:09.980Z"}, "source": "codeproject", "tags": ["C", "Javascript", "Java", "Python", "C++11"]}]}