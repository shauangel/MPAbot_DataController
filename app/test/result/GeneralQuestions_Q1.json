{"result": [{"answers": [{"content": "Use Cython to convert to C, compile, and link with GCC. Another could be, make the core functions in C (the ones you want to make hard to reverse), compile them and use Boost.Python to import the compiled code (plus you get a much faster code execution). Then use any tool mentioned to distribute.", "id": 41820168, "owner_tier": 0.1, "score": 0.008375209363484086}, {"content": "You can use PyInstaller to package Python programs as standalone executables. It works on Windows, Linux, and Mac. Install PyInstaller from PyPI: Go to your program\u2019s directory and run: This will generate the bundle in a subdirectory called dist. Adding -F (or --onefile) parameter will pack everything into single \"exe\". running into \"ImportError\" you might consider side-packages. still runing in Import-Erorr - try to downgrade pyinstaller - see Getting error when using pynput with pyinstaller For a more detailed walkthrough, see the manual.", "id": 5458250, "owner_tier": 0.5, "score": 0.9999999999832496}, {"content": "And a third option is cx_Freeze, which is cross-platform.", "id": 5458478, "owner_tier": 0.9, "score": 0.05527638189279732}, {"content": "I'm told that PyRun is also an option. It currently supports Linux, FreeBSD and Mac OS X.", "id": 43076502, "owner_tier": 0.5, "score": -1.6750418658668828e-11}, {"content": "You may like py2exe. You'll also find information in there for doing it on Linux.", "id": 5458078, "owner_tier": 0.5, "score": 0.0284757118760469}, {"content": "Since it seems to be missing from the current list of answers, I think it is worth mentioning that the standard library includes a zipapp module that can be used for this purpose. Its basic usage is just compressing a bunch of Python files into a zip file with extension .pyz than can be directly executed as python myapp.pyz, but you can also make a self-contained package from a requirements.txt file: Where interpreter can be something like /usr/bin/env python (see Specifying the Interpreter). Usually, the generated .pyz / .pyzw file should be executable, in Unix because it gets marked as such and in Windows because Python installation usually registers those extensions. However, it is relatively easy to make a Windows executable that should work as long as the user has python3.dll in the path. If you don't want to require the end user to install Python, you can distribute the application along with the embeddable Python package.", "id": 63564759, "owner_tier": 0.9, "score": 0.01340033499162479}, {"content": "This creates a standalone EXE file on Windows. Important note 1: The EXE file will be generated in a folder named 'dist'. Important note 2: Do not forget --onefile flag You can install PyInstaller using pip install PyInstaller   NOTE: In rare cases there are hidden dependencies...so if you run the EXE file and get missing library error (win32timezone in the example below) then use something like this:", "id": 59558614, "owner_tier": 0.5, "score": 0.04857621438860971}, {"content": "I like PyInstaller - especially the \"windowed\" variant: It will create one single *.exe file in a distination/folder.", "id": 55925238, "owner_tier": 0.5, "score": 0.038525963132328304}, {"content": "Using PyInstaller, I found a better method using shortcut to the .exe rather than making --onefile. Anyway, there are probably some data files around and if you're running a site-based app then your program depends on HTML, JavaScript, and CSS files too. There isn't any point in moving all these files somewhere... Instead what if we move the working path up? Make a shortcut to the EXE file, move it at top and set the target and start-in paths as specified, to have relative paths going to dist\\folder: We can rename the shortcut to anything, so renaming to \"GTFS-Manager\".\nNow when I double-click the shortcut, it's as if I python-ran the file! I found this approach better than the --onefile  one as: Oh, remember to delete off the build folder after building. It will save on size.", "id": 50010710, "owner_tier": 0.5, "score": 0.006700167487437186}, {"content": "Yes, it is possible to compile Python scripts into standalone executables. PyInstaller can be used to convert Python programs into stand-alone executables, under Windows, Linux, Mac OS X, FreeBSD, Solaris, and AIX. It is one of the recommended converters. py2exe converts Python scripts into only executable on the Windows platform. Cython is a static compiler for both the Python programming language and the extended Cython programming language.", "id": 42292103, "owner_tier": 0.5, "score": 0.07872696815745393}, {"content": "Not exactly a packaging of the Python code, but there is now also Grumpy from Google, which transpiles the code to Go. It doesn't support the Python C API, so it may not work for all projects.", "id": 41726944, "owner_tier": 0.3, "score": 0.006700167487437186}, {"content": "I would like to compile some useful information about creating standalone files on Windows using Python 2.7. I have used py2exe and it works, but I had some problems. It has shown some problems for creating single files in Windows 64 bits: Using bundle_files = 1 with py2exe is not working; It is necessary to create a setup.py file for it to work. http://www.py2exe.org/index.cgi/Tutorial#Step2; I have had problems with dependencies that you have to solve by importing packages in the setup file; I was not able to make it work together with PyQt. This last reason made me try PyInstaller http://www.pyinstaller.org/. In my opinion, it is much better because: I suggest creating a .bat file with the following lines for example (pyinstaller.exe must be in in the Windows path): You can create a single file, among other options (https://pyinstaller.readthedocs.io/en/stable/usage.html#options). I had only one problem using PyInstaller and multiprocessing package that was solved by using this recipe: https://github.com/pyinstaller/pyinstaller/wiki/Recipe-Multiprocessing. So, I think that, at least for python 2.7, a better and simpler option is PyInstaller.", "id": 41634867, "owner_tier": 0.5, "score": 0.05527638189279732}, {"content": "You can find the list of distribution utilities listed at Distribution Utilities. I use bbfreeze and it has been working very well (yet to have Python\u00a03 support though).", "id": 29515965, "owner_tier": 0.5, "score": 0.010050251239530988}, {"content": "py2exe will make the EXE file you want, but you need to have the same version of MSVCR90.dll on the machine you're going to use your new EXE file. See Tutorial for more information.", "id": 25009291, "owner_tier": 0.3, "score": 0.010050251239530988}, {"content": "Use py2exe.... use the below set up files:", "id": 21012886, "owner_tier": 0.3, "score": 0.023450586247906198}, {"content": "You might wish to investigate Nuitka. It takes Python source code and converts it in to C++ API calls. Then it compiles into an executable binary (ELF on Linux). It has been around for a few years now and supports a wide range of Python versions. You will probably also get a performance improvement if you use it. It is recommended.", "id": 18693145, "owner_tier": 0.9, "score": 0.20268006698492463}, {"content": "I also recommend  PyInstaller for better backward compatibility such as Python\u00a02.3 - 2.7. For py2exe, you have to have Python\u00a02.6.", "id": 16181636, "owner_tier": 0.5, "score": 0.021775544371859294}, {"content": "For Python 3.2 scripts, the only choice is cx_Freeze. Build it from sources; otherwise it won't work. For Python\u00a02.x I suggest PyInstaller as it can package a Python program in a single executable, unlike cx_Freeze which outputs also libraries.", "id": 12166473, "owner_tier": 0.1, "score": 0.015075376867671691}, {"content": "You can use py2exe as already answered and use Cython to convert your key .py files in .pyc, C compiled files, like .dll in Windows and .so on Linux. It is much harder to revert than common .pyo and .pyc files (and also gain in performance!).", "id": 5458807, "owner_tier": 0.5, "score": 0.5041876046733669}], "link": "https://stackoverflow.com/questions/5458048/how-can-i-make-a-python-script-standalone-executable-to-run-without-any-dependen", "question": {"content": "I'm building a Python application and don't want to force my clients to install Python and modules. So, is there a way to compile a Python script to be a standalone executable?", "id": 5458048, "title": "How can I make a Python script standalone executable to run without any dependency?", "traffic_rate": 371}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "stackoverflow", "tags": ["python", "executable"]}, {"answers": [{"content": "I have created a docker image that relies on Nuitka and a custom statically linked python3.10 to create a static binary. Did not test it extensively, if you have the chance please let me know if it works for your use case. You can check it at:\nhttps://github.com/joaompinto/docker-build-python-static-bin", "id": 72416919, "owner_tier": 0.5, "score": -4.9999999696126454e-11}, {"content": "There are two ways you could go about to solve your problem This answer explains how you can go about doing it using the second approach, since the first method is not cross platform and version, and has been explained in other answers. Also, using programs like pyinstaller typically results in huge file sizes, while using cython will result in a file that's much smaller First, install cython. Then, you can use cython to generate a C file out of the Python .py file\n(in reference to https://stackoverflow.com/a/22040484/5714445) Use GCC to compile it after getting your current python version (Note: The below assumes you are trying to compile it to Python3) You will now have a binary file output_bin_file, which is what you are looking for Other things to note:", "id": 40057634, "owner_tier": 0.5, "score": 0.99999999995}, {"content": "You might wish to investigate Nuitka. It takes python source code and converts it in to C++ API calls. Then it compiles into an executable binary (ELF on Linux). It has been around for a few years now and supports a wide range of Python versions. You will probably also get a performance improvement if you use it. Recommended.", "id": 40099944, "owner_tier": 0.5, "score": 0.08499999995}, {"content": "If you are on a Mac you can use py2app to create a .app bundle, which starts your Django app when you double-click on it. I described how to bundle Django and CherryPy into such a bundle at https://moosystems.com/articles/14-distribute-django-app-as-native-desktop-app-01.html In the article I use pywebview to display your Django site in a local application window.", "id": 40135113, "owner_tier": 0.1, "score": 0.00499999995}, {"content": "You're probably looking for something like Freeze, which is able to compile your Python application with all its libraries into a static binary: PyPi page of Freeze Python Wiki page of Freeze Sourceforge page of Freeze", "id": 40057486, "owner_tier": 0.3, "score": 0.01999999995}, {"content": "Freeze options: However, your target server should have the environment you want -> you should be able to 'create' it. If it doesn't, you should build your software to match the environment.  I found this handy guide on how to install custom version of python to a virtualenv, assuming you have ssh access: https://stackoverflow.com/a/5507373/5616110 In virtualenv, you should be able to pip install anything and you shouldn't need to worry about sudo privileges. Of course, having those and access to package manager like apt makes everything a lot easier.", "id": 39994355, "owner_tier": 0.3, "score": -4.9999999696126454e-11}], "link": "https://stackoverflow.com/questions/39913847/is-there-a-way-to-compile-a-python-application-into-static-binary", "question": {"content": "What I'm trying to do is ship my code to a remote server, that may have different python version installed and/or may not have packages my app requires. Right now to achieve such portability I have to build relocatable virtualenv with interpreter and code. That approach has some issues (for example, you have to manually copy a bunch of libraries into your virtualenv, since --always-copy doesn't work as expected) and generally slow. There's (in theory) a way to build python itself statically. I wonder if I could pack interpreter with my code into one binary and run my application as module. Something like that: ./mypython -m myapp run or ./mypython -m gunicorn -c ./gunicorn.conf myapp.wsgi:application.", "id": 39913847, "title": "Is there a way to compile a python application into static binary?", "traffic_rate": 69}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "stackoverflow", "tags": ["python", "build"]}, {"answers": [{"content": "You can check out pyinstaller project. If you do not need console to be shown while running the produced binary, if you need the console to be shown, just remove the --noconsole option. The executable would be created under the dist folder if everything goes well.", "id": 74106127, "owner_tier": 0.1, "score": 0.0}], "link": "https://stackoverflow.com/questions/74105656/how-to-create-standalone-python-interpreter-exe", "question": {"content": "can someone please help to explain how we can create a standalone python interpreter (single file like py_interpreter.exe) with all the package installed in the pc. Background of story:\nI need to run my program (scripts.pyc) on a pc where python is not installed. So I want to run my .pyc file using the portable py_interpreter.exe. I will use the batch script to run .pyc script.\n@echo off\ncls set CWD_PATH=%~dp0 \"%CWD_PATH%\\py_interpreter.exe\" \"%CWD_PATH%\\scripts.pyc\" if %ERRORLEVEL% NEQ 0 pause Sorry if my question is really stupid", "id": 74105656, "title": "How to create standalone python interpreter .exe", "traffic_rate": 158}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "stackoverflow", "tags": ["python", "python-3.x"]}, {"answers": [{"content": "PyInstaller is a program that freezes (packages) Python programs into stand-alone executables, under Windows, GNU/Linux, Mac OS X, FreeBSD, Solaris and AIX. Its main advantages over similar tools are that PyInstaller works with Python 2.7 and 3.4\u20143.7, it builds smaller executables thanks to transparent compression, it is fully multi-platform, and use the OS support to load the dynamic libraries, thus ensuring full compatibility. It work even if users do not have python installed. Here an example from a github project. As you can see, you can download sources, but also a zip containing every package used to run your project. In this example, it contains many files, but you can package everything into a single .exe file. Install PyInstaller from PyPI: Go to your program\u2019s directory and run: This will generate the bundle in a subdirectory called dist. You can use --onefile argument in order to generate the bundle with only a single executable file. You asked how to get arguments send by the user. Here is some way to do it, more or less convenient:", "id": 54212856, "owner_tier": 0.5, "score": 0.9999999989999999}, {"content": "If you want to deploy a python application , you can use cx_freeze to package it. It will provide you a binary ready to execute", "id": 54213324, "owner_tier": 0.5, "score": -1e-09}, {"content": "If you want to deploy your application that has to be run on other machines. i REALLY suggest you to use docker. \nYou will build a docker image in local that contain your application and all of the dependencies you need\nthe user just has to install docker, get your docker image and run it on his machine. \nhttps://docs.docker.com/get-started/", "id": 54213192, "owner_tier": 0.3, "score": -1e-09}], "link": "https://stackoverflow.com/questions/54212814/how-to-package-python-project-into-a-standalone-executable", "question": {"content": "i wan't to release my python project, but when i send it to someone he is forced to install all the packages im using in my python project.  Is there any way to pack it or something, because maybe there are some users who are not that familiar with pip or python. Regards", "id": 54212814, "title": "How to package Python Project into a standalone executable?", "traffic_rate": 26}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "stackoverflow", "tags": ["python", "pip", "package", "release"]}, {"answers": [{"content": "The tool you are looking for is Nuikta. Syntax is: python -m nuitka --standalone --follow-imports programname.py\nwhere:- --follow-import: Causes imported modules (including local imports) to be included in binary as well.\n--standalone: making standalone binary", "id": 68851815, "owner_tier": 0.3, "score": 0.9999999900000002}], "link": "https://stackoverflow.com/questions/68851790/how-to-compile-python-program-and-its-dependencies-into-a-single-c-like-binary", "question": {"content": "I'm trying to put my Python program and all of it's dependencies into a single binary that could be executed from the command line. I followed Broken Man's suggestion in this post here using Cython3 and it works if you have a simple Python script. However it doesn't work if you're using import statements in your code to include your dependencies. I'm looking for a solution that will allow me to execute my program similar to how you would in C, e.g think ./a.out Please don't recommend using chmod +x to convert it into an executable. That's not what I'm looking for. This isn't a desktop app either - it needs to be executed from the command line. Can Cython/Cythonize be used to compile dependencies or is there another tool that should be used for this? The dependencies I'm relying on are a mix of libraries installed with pip and custom written files in the same directory.", "id": 68851790, "title": "How to compile Python program and its dependencies into a single C like binary?", "traffic_rate": 7789}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "stackoverflow", "tags": ["python", "compilation", "dependencies", "cython", "cythonize"]}, {"answers": [{"content": "Or use PyInstaller as an alternative to py2exe. Here is a good starting point. PyInstaller also lets you create executables for linux and mac... Here is how one could fairly easily use PyInstaller to solve the issue at hand: From the tool's documentation: PyInstaller analyzes myscript.py and: In the dist folder you find the bundled app you distribute to your users.", "id": 12339729, "owner_tier": 0.5, "score": 0.9999999998780489}, {"content": "Since other SO answers link to this question it's worth noting that there is another option now in PyOxidizer. It's a rust utility which works in some of the same ways as pyinstaller, however has some additional features detailed here, to summarize the key ones: (One other advantage of pyoxidizer is that it does not seem to suffer from the GLIBC_X.XX not found problem that can crop up with pyinstaller if you've created your binary on a system that has a glibc version newer than the target system). Overall pyinstaller is much simpler to use than PyOxidizer, which often requires some complexity in the configuration file, and it's less Pythony since it's written in Rust and uses a configuration file format not very familiar in the Python world, but PyOxidizer does some more advanced stuff, especially if you are looking to produce single binaries (which is not pyinstaller's default).", "id": 65401152, "owner_tier": 0.3, "score": 0.1463414632926829}, {"content": "", "id": 54332185, "owner_tier": 0.1, "score": -1.2195121877104012e-10}, {"content": "I recommend PyInstaller, a simple python script can be converted to an exe with the following commands: which creates a yourprogram.spec file which is a configuration for building the final exe. Next command builds the exe from the configuration file: More can be found here", "id": 12340495, "owner_tier": 0.5, "score": 0.219512195}], "link": "https://stackoverflow.com/questions/12339671/how-to-compile-python-script-to-binary-executable", "question": {"content": "I need to convert a Python script to a Windows executable. I have Python 2.6 installed to python26. I have created one script and kept it in C:\\pythonscript. Inside this folder there are two files Setup.py and oldlogs.py (this file need coversion) setup.py code is How can I convert oldlogs.py to an exe file?", "id": 12339671, "title": "How to compile python script to binary executable", "traffic_rate": 122}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "stackoverflow", "tags": ["python", "compilation", "executable"]}, {"answers": [{"content": "I use autopytoexe for windows applications.\nIt has GUI and you can save the compile settings. https://pypi.org/project/auto-py-to-exe/", "id": 65248506, "owner_tier": 0.1, "score": 0.9999999900000001}, {"content": "If you are the one who did the programming, and want your program to run on a system (with or without python installed), you can convert your initial python file into an executable, that is, files with the .exe extension. After installing pyinstaller, type in: pyinstaller --onefile your_python_file.py. This will convert your file to an executable. CAVEAT: If your file will use a terminal, then put a -w after --onefile, if it is graphical, then don't. After the conversion, you can see a dist folder, it contains your .exe file. Try running your file then, and see if it runs with no error.", "id": 65248432, "owner_tier": 0.1, "score": -1.0000000000000002e-08}, {"content": "I don't have personal experience with this, but, as noted it the comments, it appears these are the tools that will do what you want. Windows: https://pypi.org/project/py2exe/ MacOS: https://pypi.org/project/py2app/ Cross-platform: https://pypi.org/project/cx-Freeze/", "id": 65248404, "owner_tier": 0.1, "score": -1.0000000000000002e-08}], "link": "https://stackoverflow.com/questions/65248123/how-to-make-any-python-program-run-standalone", "question": {"content": "How can I make a python program run without python installed (like blender)? Is it includes liblaries to the program itself (Am I need to run \"pip install which liblaries used\" before running the program)? And how can i make this for a program with multiple scripts?", "id": 65248123, "title": "How to make any python program run standalone", "traffic_rate": 4199}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "stackoverflow", "tags": ["python", "python-3.x"]}, {"answers": [{"content": "If you are importing the additional scripts, pyinstaller will gather those imports and automatically include them. You can use --onefile to ensure only the exe is created for distribution. pyinstaller --onefile app.py", "id": 63951239, "owner_tier": 0.5, "score": 0.999999995}], "link": "https://stackoverflow.com/questions/63949015/how-to-convert-python-scripts-to-binary-executable-using-pyinstaller", "question": {"content": "I am working on a project which has below directory structure app.py is the main executable file which is also depended on python files inside src. I want to convert app.py to app.exe which I can easily do using pyinstaller app.py. This creates a dist folder which has python and all the packages. I can simply copy paste the src, configs and logs into dist and can easily share it with everyone. But the problem is I do not want to share python files inside src as it is because it can easily accessed by anyone. I want to convert it into binary executable so that no one can convert or de-compile back into .py files. For this, I can use auto generated .pyc files but I believe this can also be de-compiled back to py. Is there any way I can convert into some kind of binary which can never be de-compiled. Does pyinstaller do this. Is there any command available in pyinstaller which while converting app.py also converts rest of the python files into executable. Please help. Thanks", "id": 63949015, "title": "How to convert python scripts to binary executable using PyInstaller", "traffic_rate": 3160}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "stackoverflow", "tags": ["python", "pyinstaller", "executable"]}, {"answers": [{"content": "I think PyOxidizer is what you're looking for.", "id": 60536661, "owner_tier": 0.5, "score": 0.999999995}, {"content": "There's options like py2exe that just package the scripts into a Microsoft executable (files can exist inside Microsoft executables), or pyinstaller. However, Python's runtime and language specification is not designed to be converted to machine code. If it's not okay to distribute your program as a pyinstaller/py2exe package, then you should look towards compiled programming languages.  Previously asked here How to compile python script to binary executable", "id": 46812260, "owner_tier": 0.3, "score": -4.999999969612645e-09}], "link": "https://stackoverflow.com/questions/46811800/is-it-possible-to-build-a-single-binary-for-cli-python-script-like-go-and-rust", "question": {"content": "I love Python for everything that it is except the fact that I can't ship a single binary file of my project to someone and expect them to be able to run it. I'm not asking for a simple Python script case. Say, I have a python script that imports several modules (which were pip installed on my local system). I'd like to turn it into a single file or directory that I can ship to a remote server and just run it. No pip install blah should be needed there. Is it possible?  EDIT1: I\u2019m only concerned about distributing my script along with its dependancies to a remote x86_64 GNULinux server. Py2exe doesn\u2019t help. I\u2019m looking for its equivalent in the Linux world. I have used virtualenv to install all modules in the same directory, but don't know if there is a way to ship just that directory and expect it to \"just work\" without pip installs there. I'm at the verge of giving up on my years of Python practice and switching to a different language like Nim or Go just for this reason.", "id": 46811800, "title": "Is it possible to build a single binary for CLI python script? Like Go and Rust seems to do", "traffic_rate": 7}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "stackoverflow", "tags": ["python"]}, {"answers": [{"content": "Programs that can do what you ask for are: But as mentioned you can also create a Package with Distribute and have the other packages as dependencies. You can then uses pip to install that package, and it will install all of the packages. You still need to install Python and pip, though.", "id": 4558781, "owner_tier": 0.9, "score": 0.9999999994444444}, {"content": "cx_freeze will append your python scripts to a standalone Python loader and produce a directory containing the program, and shared library dependencies.  You can then copy the resulting distribution to other machines independent of Python or your modules. A better answer may be to create a PIP package that identifies these third modules as dependencies, so installation can be as simple as \"pip install mypackage; ./package\"", "id": 4556671, "owner_tier": 0.1, "score": 0.055555555000000006}, {"content": "You probably want to create a Python package from your script. In the end you will be able to do pip install mypackage on any host and all the required modules will be downloaded and installed automatically. See this question on how to create such a package.", "id": 4556645, "owner_tier": 0.9, "score": -5.555555521791828e-10}, {"content": "Python will also look for import modules in the current directory, so you don't have to install them into the python directory. Your distribution file structure might look like: Where main.py has import module1, module2", "id": 4556643, "owner_tier": 0.5, "score": -5.555555521791828e-10}], "link": "https://stackoverflow.com/questions/4556424/how-to-make-my-python-script-easy-portable-or-how-to-compile-into-binary-with-a", "question": {"content": "Is there any way to compile python script into binary?\nI have one file python script which uses a lot of modules.\nWhat I would like is to have its copy on other machines (freebsd) but without installing all needed modules on every host. What are possible solutions in such cases?", "id": 4556424, "title": "How to make my python script easy portable? or how to compile into binary with all module dependencies?", "traffic_rate": 9}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "stackoverflow", "tags": ["python", "binary", "freebsd"]}, {"answers": [{"content": "Yes, you can - not quite by _compiling Python_, but you have two options:\n\n1. Use PyInstaller to bundle your Python files and a copy of the Python runtime into a ZIP-file, which is then made into an executable file.\n2. Use Nuitka to transpile your Python code to C, and compile that to an executable.\n\nBoth approaches have their pros and cons, but they also share some challenges. If you need to bundle in any non-code files, you have to explicitly do so, and accessing them from within your code requires you to use either `importlib.resources` or some other magic - their documentation gets to the nitty gritty details.\n\nEDIT: Since an example is better than a thousand words, not long ago I helped someone else with a PyInstaller project, and [it'll work fine as an example](https://github.com/Diapolo10/Quick-Kopy). On the other hand, [this Nuitka project](https://github.com/Diapolo10/Tsukasa-credit-card-gag-scam) even has automated release builds set up.\n\nThank you for your response and edit. If you dont mind, if I have troubles with trying it can I DM you please?\n\nSure.\n\nBing chat explained this question very well to me", "id": "jp74ou2", "owner_tier": 0.7, "score": 0.9999999983333333}], "link": "https://www.reddit.com/r/learnpython/comments/14gsaaz/how_do_i_compile_my_python_files_into_a_single/", "question": {"content": "Hi guys\n\nSo I have written a testing \"app\" and it essentially has a file structure like the following\n\nmain.py\n/utils\n|---validator.py\n|---transformer.py\n|---database_handler.py\n\nI would like to play around more and make a \"compiled\" executable app. Sorry if my vocabulary isnt correct here.\n\nEssentially I want to be able to create 1 executable that I can run my main.py, and be able to distribute the single executable file to a friend and they can also run it, without having to send the above py files as well.\n\nIs this possible? Sorry I am newish so I'm struggling to find the correct words and implementations", "id": "14gsaaz", "title": "How do I \"compile\" my python files into a single executable app", "traffic_rate": 153.1240740740741}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "reddit"}, {"answers": [{"content": "\"Compile python to standalone\"\n\nThat search will get you where you need to go, probably, maybe. Nuitka, py2exe, pyinstaller... But with those packages and that Python version you'd have to have 2 angels on your shoulder for it to work. E: Especially cross platform....\n\nThanks for your reply. No I'm looking for cross plateform. I need two separate binaries one for windows the other for Linux. It seems to me that the solutions you describe a are for compiling a python script into a binary. What I'm looking for is rather the whole python interpretor + the modules  into a standalone binary. So that any script that requires these modules could simply be executed by running `MyPython test.py`\n\nThose programs I mentioned will package everything into a standalone.\n\nMaybe there's some miscommunication. The end user will have to download _something_, be it the packages or something you compiled. Can't you just use `pip freeze > requirements.txt` to get all the requirements and have others use `pip install -r requirements.txt`?\n\nThat's what I'm doing right now. But I want something standalone that could be more easily distributed and the end user could use the single binary as if it was the python interpretor\n\nThen look into those that I mentioned, although I really think using the \"normal\" method with `pip` is far better and less prone to errors.", "id": "j6yowil", "owner_tier": 0.5, "score": 0.9999999980000001}], "link": "https://www.reddit.com/r/learnpython/comments/10rxyvo/create_a_compiled_standalone_binary_from_a_pythin/", "question": {"content": "I want to distribute a python virtual env with some packages. However the user should be able use the virtual without fully offline without having to download anything. The virtual environment cinayins pure python and c compiled packages. \n\nI looking for a way to build a single standalone  platform dependant binary from a python virtual env that contains the python executable as well as the Python modules. \nI want to generate it for Linux and Windows. \n\nSo for example if I have a python virtual environment based on python version 3.10 with the module numpy and matplotlib installed, I should be able to generate a standanlone binary MyPython.exe that is based on python 3.10 and has numpy and matplotlib builtin.", "id": "10rxyvo", "title": "Create a compiled standalone binary from a Pythin virtual env", "traffic_rate": 153.1240740740741}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "reddit"}, {"answers": [{"content": "I think the guy wants to have the file run independently as a stand alone .exe\n\nyes, how do i do that?\n\nTry Googling py to exe\n\nwait i need to install more stuff? i thought this would be somethign i do in visual studio?\n\nI\u2019m new to python and this is exactly what I want to do. If I turn it into an exe via vs code can ppl I share it with see da code?", "id": "hlr1icj", "owner_tier": 0.1, "score": 0.9999999983333332}, {"content": "I'm assuming you mean you want to turn it into an .exe so that you don't have to have python installed on the host machine, if this is the case then take a look at the cxfreeze library\n\nyou dont need python installed for the exe to work? (and yes i just want to turn it into an exe). whats cxfreeze?\n\nCxfreeze is a library in python, it's not built into python so you have to install it manually and then write and run a build code to turn your code into an exe. When building your code to an exe you can give this program out to people who can run it without installing python or having python installed on their computer.\n\nHere's a video tutorial I did on it a while ago.\n\nhttps://youtu.be/6-ObMZyE11E\n\n\ud83e\udd70\ud83e\udd70\ud83e\udd70 thank you kind stranger of reddit.", "id": "hlr1jnv", "owner_tier": 0.1, "score": 0.3333333316666666}, {"content": "Nuitka is good\n\n???", "id": "hlr5v8e", "owner_tier": 0.5, "score": -1.6666666565375481e-09}, {"content": "I use pyinstaller for this. I've found it pretty easy to use in most cases, once you've got it installed for most programs all you need to do is open power shell in your programs location and run \"pyinstaller yourprogram.py\" and it'll spit out an exe that you can take around to other computers\n\nwill it take anything beyound installing it and running it?\n\nalso came across this while trying to find it.\n\nA group of researchers from the University of Piraeus in Greece said that PyInstaller, a tool intended to convert Python code into standalone applications, is capable of creating malware payloads that are able to slip past many of the most widely used antivirus programs and get their malicious code up and running \n\n[https://www.techtarget.com/searchsecurity/news/252500274/Researchers-use-PyInstaller-to-create-stealth-malware](https://www.techtarget.com/searchsecurity/news/252500274/Researchers-use-PyInstaller-to-create-stealth-malware)\n\ni assume what they mean is that malware and stuff can use it to spread itself?\n\n(just checking since i saw this,  i also some othe rpeople saying its good and safe).\n\nFor most programs there's not a lot of effort to get it up in running, just install pyinstaller and run the command i mentioned. The malware thing isn't saying it contains malware, it's saying you can use it to write hard to detect malware which isn't a problem if you're not writing malware lol. \n\nAlso as some other people have mentioned, if you're not actually trying to make portable executables then you don't really need something like this, you can make a shortcut to your python file and run it or run it from the command line.\n\nalright, thank you for the help!", "id": "hlr91g2", "owner_tier": 0.5, "score": 0.3333333316666666}, {"content": "I'll try and summarise everything so far, and hopefully answer your questions.\n\nFirst, let's talk about your use of Visual Studio. There's nothing wrong with using it if it works for you, but there are some drawbacks; I'm not sure how to go about installing modules from PyPI to its Python environment, as to my knowledge it's not really accessible outside of Visual Studio without some trickery with environment variables. That's kind of a big drawback, actually, because you'll inevitably run into a situation where you'd like to use a third-party module - `requests` is probably the best example I can think of considering its flexibility.\n\nYou *could* look that up from the documentation, but herein lies another problem; virtually every search result on Google (and any search engine, really) will prioritise giving you results for *VS Code*, not *Visual Studio*. I've run into this issue personally several times, and it's a lot of work trying to search through all the completely unrelated results.\n\nBut anyway, back to your question; *how to create an executable binary from a Python script*. This actually ties into the earlier stuff because you'll need a tool that can do this, and there's no such thing in the standard library. There's several options to choose from, but PyInstaller and py2exe are probably the best documented ones.\n\nYou'll probably want to install Python from python.org to do this to bypass installing stuff to the Visual Studio installation for now, unless you already know how to do that.\n\n>You'll probably want to install Python from python.org to do this to bypass installing stuff to the Visual Studio installation for now, unless you already know how to do that.\n\nlittle confused on what you mean here?\n\n> EDIT: As I was writing this I stumbled upon this in the official documentation, if you follow [this](https://docs.microsoft.com/en-us/visualstudio/python/tutorial-working-with-python-in-visual-studio-step-05-installing-packages?view=vs-2022) to install any of the aforementioned tools (PyInstaller/py2exe) or something else that'll work, and a related tutorial for using it like [this one](https://pyinstaller.readthedocs.io/en/stable/usage.html#running-pyinstaller-from-python-code), you'll probably be okay as-is.\n\n> The following is what I was originally writing as a direct answer to your question.\n\nLet me try explaining it like this:\n\n1. You need PyInstaller (or equivalent)\n2. PyInstaller is not included with your Python installation\n3. You need to get PyInstaller to create an executable out of your script\n4. PyInstaller is [available on the Python Package Index (PyPI)](https://pypi.org/project/pyinstaller/)\n5. I don't know how to install PyPI packages on the Visual Studio environment\n6. I *do* know how to install them on a standard Python installation\n7. I suggested installing \"normal\" Python just to handle the conversion to a Windows executable from its official site\n8. Installing the required package would be as simple as running `py -m pip install pyinstaller` (or whatever) on PowerShell", "id": "hlrr225", "owner_tier": 0.7, "score": 0.166666665}], "link": "https://www.reddit.com/r/learnpython/comments/r0912x/how_do_i_turn_python_code_into_an_exe_in_visual/", "question": {"content": " i made a small number guessing game and i wan tto turn it into an exe that will open it in a concle so i can play it without having to open visual studio then running it. note: i installed python when setting up visual studio. i selected for it to install python. ho do i turn it into an exe?", "id": "r0912x", "title": "how do i turn python code into an exe in visual studio?", "traffic_rate": 153.1240740740741}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "reddit"}, {"answers": [{"content": "I would look into working with [py2exe, which can be found on this link.](http://www.py2exe.org/) It's able to export your .py/.pyw to an executable that can be run without an Interpreter.\n\npy2exe makes me want to commit game end", "id": "ejzj83o", "owner_tier": 0.1, "score": 0.99999999984375}, {"content": "This thread and answers are extremely timely! ", "id": "ek05yy1", "owner_tier": 0.5, "score": 0.51562499984375}, {"content": "I don't want to be rude or sound condescending, but the word you're looking for is 'compile.'   \n\n\nWhen you execute a .py (or ps1 or sh or many others) file you are compiling at runtime. Basically compiling (either way) is turning your human readable text into 0s and 1s, or bytecode.   \n\n\nJust wanted to throw the terms out there, I see your question already had sufficient answers, I just wanted to let you know. ", "id": "ek05hdu", "owner_tier": 0.3, "score": 0.51562499984375}, {"content": "What if the .py file imports some packages or even imports other .py files? Does it work?\n\nWith most binary freezes it will package the modules together that you import into the executable.  The way it works is it creates a virtual environment with python interpreter and imported modules that unfold when you run it.  Sometimes some modules import other modules that you might need to import explicitly via the say pyinstaller setup, but those instances are generally rare and can be accommodated via the hidden paths command line argument of pyinstaller. ", "id": "ejzmun7", "owner_tier": 0.5, "score": 0.54687499984375}, {"content": "Could you please share the github repo of your game? I\u2019d also like to make it an executable file. \n\nI added it to the top of the thread. I still need to make a direct filepath to .txt file however", "id": "ek0tys5", "owner_tier": 0.5, "score": 0.53124999984375}, {"content": "See also https://github.com/jabbalaci/PythonEXE . I demonstrate here the usage of pyinstaller.", "id": "ek0d4n2", "owner_tier": 0.5, "score": 0.48437499984375}, {"content": "Pyinstaller ", "id": "ek0hum7", "owner_tier": 0.3, "score": 0.48437499984375}, {"content": "PyInstaller worked well for me. It was a small script to parse through an Excel sheet.\n\nI managed to make it an .exe that can actually run directly from our Dropbox. \n\nThis is the video that I used: https://www.youtube.com/watch?v=lOIJIk_maO4  \n  \nBest of luck!", "id": "ek0ufr2", "owner_tier": 0.5, "score": 0.48437499984375}, {"content": "One follow up question: \nIs there a flag for pyinstaller to incorporate .txt files into the executable? My hangman game opens a dictionary.txt file\n\nhttps://pythonhosted.org/PyInstaller/spec-files.html#adding-files-to-the-bundle\n\nlifesaver\n\nOne thing to add here - - you can have a txt file that lives next to the executable that you modify and the exe reads.  The only problem is that the exes current working directory isn't where the exe lives.  For pyinstaller, it creates a temp folder called MEIpass (or something like that) to run in, so relative paths won't work as expected.  I would advise making the text folder an absolute path in your script before packaging (so something like c:/user/desktop/hangman.txt).  I can give more details on this if it doesn't make sense. \n\nAw, you spoiled the fun of them learning this the hard way! :-p", "id": "ejzpez8", "owner_tier": 0.3, "score": 0.70312499984375}, {"content": "A .py file should run when double clicked. If not you need to fix your file associations. \n\nThis is a bad answer because you might have multiple versions of python installed and you can't control the environment you deliver the python script to nor can you control the modules installed.  The op said he wants to distribute to friends and family, which this answer does not fulfill. \n\nWhen I double click I have my computer open with Atom to edit the code. Either way, I wanted the file to be of type executable, not a .py\n\nReally? [Where have you been?](https://docs.python.org/3/using/windows.html#launcher)\n\n\n> When I double click I have my computer open with Atom to edit the code. \n\nThat means atom has commandeered the file association. This was probably an option during the Atom install. You can change it back if you want. If your friends and family install python only (not Atom) then it will launch python for them. \n\n> Either way, I wanted the file to be of type executable, not a .py\n\nCheers, I won't stop you, I'm just saying that that is not necessary to do what you said you want. \n\nIf you are distributing to someone who doesn't have python or understand how scripts work, packaging as an exe is the best solution.  It creates a venv with all dependencies accounted for. \n\n[deleted]\n\nThen what if the python program has dependencies? Are you going to walk the people you send your program through instructions to install python and then to use pip to install the additional modules? \n\nTerrible advice... \n\n[deleted]\n\nYou can't cover all usecases with a blanket statement like that. Freezing comes with its own set of problems. I'm not saying my solution works for everyone, I'm saying that for OP doing what OP said they wanted to do, freezing is not needed. \n\nLol ok. \n\nI'll make this point: The python docs don't mention freezing with the exception of the long defunct freeze.py, and there is no freezing in the reference implementation. However they do specifically point out that .py files are associated with the python launcher by default on Windows. \n\nI think what you call an \"expert beginner\" is another way of saying \"modern\", ie \"does not do things the old school way\". \n\nInstead of dropping someones else's opinion here, maybe you can explain your downvote. How is the windows python launcher not the exact correct answer to \"you can't control the environment you deliver the python script\"? \n\nYou could; you could also do it for them or call pip from the program. Or include the dependency code in your code. \n\nMore to the point I didn't mean this as a cure all. Obviously every problem needs its own solution. I pointed out in OP's case, to do what OP wanted, the freezing was not needed. I highly doubt that OP's hangman game imports numpy. \n\nEmail I guess? Include a note \"if you don't have python installed, install that first\".\n\nDo you actually bring up a good point about freezing code: most email servers don't allow you to email exe files.\n\nVia OPs post, it was implied that friends and family don't have the technical competency to install python to use a py file. Freezing does come with its own problems, but I doubt OP is using any of the notoriously difficult modules to freeze in his CLI hangman app and freezing is what they were asking about.  You are getting downvoted because your advice doesn't fit the problem posed, and using something like pyinstaller or Py2exe etc is the right answer here, and not some technical competency purity test for running naked py files. \n\n[deleted]\n\n> it was implied that friends and family don't have the technical competency to install python to use a py file.\n\nI didn't get that at all, I understood that OP felt the only way to run the program was by launching the command prompt, which I am pointing out is not true. OP later explained that they had installed Atom, which overrides the default python file associations, so OP's incorrect conclusion makes sense. \n\n> but I doubt OP is using any of the notoriously difficult modules to freeze in his CLI hangman app \n\nAgreed. Also a valid point to mean freezing is not beneficial. \n\n> freezing is what they were asking about.\n\nAlso agreed. However I was pointing out that freezing is not needed. \n\n> because your advice doesn't fit the problem posed\n\nAgain agreed. I am of the opinion that this is an XY problem. OP does not know what they need, so they ask about what they (incorrectly) found as a solution. IMO it's not the best solution. \n\n> some technical competency purity test for running naked py files.\n\nDouble clicking a file is a \"technical competency purity test\"? Or, installing python from a provided or downloaded .exe file? Here I very much disagree. You have a very low opinion of OP's friends and family. \n\n> However, it seems that from the user point of view, exe is preferable.\n\nI take issue with blanket statements like this. **YOUR** family and friends, perhaps, all use 64 bit windows 7 and don't have enough technical experience to install python. If that's the case for you, then freezing is great for you. \n\n**MY** family, friends and colleges are better suited to .py files, hell most of them would never trust a random .exe file (and neither would I). \n\nAgain, I'm not saying no one should freeze code, I'm saying that if you wrote a CLI hangman game and you want to run it by double clicking, you don't have to freeze it. \n\n> can\u2019t do an exe that I\u2019ve found yet due to technical requirements\n\nYet another good point about freezing ... many requirements won't work. GUIs and other compiled files like numpy are notoriously hard. May I suggest to you something like [pynsist](https://github.com/takluyver/pynsist)? It basically automates the process of unzipping the python .dll and all supporting files to a directory, therefore avoiding many of the packaging problems. You can think of it like an automatic python install, plus dependency install, plus file copy and various shortcut creation. In short everything a normal nullsoft installer does. \n\n> I would much rather have an exe that checks for updates every time it\u2019s used.\n\nI don't see why you bring that up ... a .py file can update itself too. \n\n\n\nI don't know why you are so opposed to freezing the binary.  If it works, it is absolutely better than a regular py file for distribution and is how I distribute apps locally to any internal customers I write scripts for, especially if I am jumping between python 2 or 3 for a production script, or if I am standing up a script for a daily process and don't want to care about the changing dependencies on a source machine. \n\nIf a .py file was preferable, then exes wouldn\u2019t exist...\n\nAs for your suggestion, due to technical reasons, I can\u2019t use it.  Which is why I\u2019d like to have an exe. \n\n\n\nWell I hope I have taught you of the power of the shebang and that you do not have to freeze programs to be able to specify a python version. Its been 7 years since the python launcher was introduced; it's about time you learned how to use it. \n\n> I don't know why you are so opposed to freezing the binary. \n\n**I'M NOT**. I'm saying OP does not need to for what OP stated they want to do. If you want to anyway, fine, do it. I have made and sold frozen programs, I know it works. That does not make it the right way for all situations. \n\nFWIW, I can think of a lot of reasons you shouldn't: \n\n* complex, not officially supported, hit and miss programs for freezing. \n* It only works for the same OS and bit width you froze it on, or on an OS that has the correct compatibility layer. If you froze on 64-bit Windows 8 then your program is useless on Linux, Mac, any 32-bit version of Windows, or any version of Windows less than 8. IOW destroys the OS agnostic nature of python. \n* You (generally) can't email or cloud share .exe files\n* Frozen programs are huge compared to .py files (or .wheel or .egg files)\n* The frozen program is very slow since it has to decompress on every run\n* Frozen programs are often blocked by anti virus programs (with good reason) and if the user has no antivirus they are probably smart enough to know not to trust random .exe files. \n* Compiled imports are hard to deal with edit: [case in point](https://www.reddit.com/r/learnpython/comments/b8on0k/how_to_make_py_an_executable_file/ejzridx/)\n\nI know I could probably think of just as many reasons why you should freeze your program. My main beef with you is that you think there is only one way to skin this cat.\n\nAll of those are of course difficulties in packaging an exe (even if slightly overstated, especially for small one-off scripts), and it's a shame you buried what should have been a useful artifact of the caveats to freezing the binary under an ignored comment tree because your initial answer was glib and disregarded the content of the OPs original query.  \n\nOP made a hangman game they want to share with Uncle Ricky and Grandma Edna and friend Timmy to showcase learning, isn't packaging enterprise code for internal consumption, and this should have been evident by the fact that they asked reddit instead of googling, signaled that they didn't want to teach said friends and family terminal codes, and other responses in this thread.  If you really wanted to remove the dogmatism around suggestions, your original suggestion of editing file associations and running by double-clicking wouldn't have been made so perfunctorily. \n\nI've got no issue with you and you likely know what you are talking about, but others agree with my reading of OPs post based on top comment and your downvotes, and your suggestions as such muddy the water for what really is two terminal commands to make it so friends and family can double-click on the file to play the game.  ", "id": "ejz4c7w", "owner_tier": 0.7, "score": -1.5625001292818297e-10}], "link": "https://www.reddit.com/r/learnpython/comments/b8on0k/how_to_make_py_an_executable_file/", "question": {"content": "I recently made a quick hangman project in python3, and I was wondering how I can make the program execute itself when clicked. This is so my friends and family can more easily play the game without me having to explain terminal commands. \n\nEdit:\n\nHere\u2019s the repo:\n\nhttps://github.com/matthewmagardino/hangman-py ", "id": "b8on0k", "title": "how to make .py an executable file", "traffic_rate": 153.1240740740741}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "reddit"}, {"answers": [{"content": "Pyinstaller is your friend.  It needs to be run in the OS you intend to port to and all your dependencies need to be installed, but otherwise it's straight forward.\n\n    pyinstaller --onefile YOURSCRIPT.py\n\nFor console apps make sure you have some input breaks so your users see the results before the console closes.  For python 2.x it would look like this after printing any output:\n\n    ...\n    raw_input(\"Press enter to continue\")\n\nOr Python 3.x just:\n\n    ...\n    input(\"Press enter to continue\")\n\nYour code might have to be made cross platform compatible first, which means dealing with Windows vs. Nix paths, and some heavy reliance on the os module to get things compatible.  So paths change from:\n\n    open('\\some\\path\\on\\win')\n\nto\n\n    open(os.path.join('some', 'path', 'on', 'win'))\n\nThere are other things, but these are the most common issues.\n\nedit: typos\n\nI'd like to add to this for op, if you use other libraries in your script(maybe a cli library), you might have to make a hooks file \n\nThank you, this worked. Now I'll just have to work on changing the inputs so that it can go into an a bit more user friendly UI than the console\n\nNoob question, this implies the host machine has python installed already right?  \n\nAlso, some modules need to be configured for freeze support. For example, the built in Multiprocessing.\n\nDo you know how to deal with files being exported/created by the exe to the windows/system32 folder? I have tried relative paths and         \n\n    realpath(__file__) \n    with no luck. I want to create the files in the folder the exe is in.\n\nPyqt5 is perfect for UI\n\nIf you want a quick and dirty GUI without classes, try easygui. It\u2019s great for simple prompts. \n\nCorrect.  You need to have Python installed on each OS you intend to build a stand alone executable for (with all dependencies) and have the app/script working.  I work on a Mac and use a virtual machine for the Windows build normally.\n\nI choose cxfreeze if you don't want python installed on the target machine. It bundles everything needed, bit it does make your distribution a fair bit larger.\n\n[deleted]\n\n[deleted]\n\n[deleted]\n\n[deleted]\n\n[PySimpleGUI](https://pysimplegui.readthedocs.io/) (which wraps both) is a lot easier to learn than either.\n\nI\u2019d say it\u2019s initially harder, but ultimately offers you far more control in how you want signals to work.  It\u2019s really not that much harder, but it\u2019s worth it.\n\n[deleted]\n\n[deleted]\n\n[deleted]\n\nMy recommendation: http://zetcode.com/gui/pyqt5/\n\nI haven't watched any videos; just the website explanations, cookbook and method documentation, and found it very very good. I've gone from nothing to a fully interactive, responsive GUI in no time. There are things to improve, for sure, but the dev is highly active and I'm loving his work.\n\nFor a beginner, yes.  I switched from tk to wx to qt and each time got a better looking GUI with an easier API and less code.  Most of GUI programming is event handling, which qt excels at, but it\u2019s a bit more work to learn.  Once you get it, you\u2019ll hate tk\u2019s approach.\n\n[deleted]\n\nYou're welcome\n\nBy the way, the tutorial is pretty modular so you can skip around to find what you are looking for.\n\nThe other thing is that there are 2 ways to build the layout files for GUI programs. One way is to manually do it by hand, the other is to design the GUI in another GUI. Here is a thread about that: https://www.reddit.com/r/Python/comments/acm67i/best_gui_builder_for_2019/ I have not used a GUI builder myself, but the comment is recommending `QT Designer` so that be might worth checking out.", "id": "edz60he", "owner_tier": 0.3, "score": 0.9999999999601593}, {"content": "You can use pyinstaller or py2exe to create a stand alone application for both windows or mac (you can get problem with mac, if your program is using PyQt).\n\nAnd remember, that if you want to run your program on the mac, then you have to build it on the mac and the same for windows - so you can't build the app for another OS.\n\nTo use one of them just install with pip - `pip install pyinstaller`, and then run `pyinstaller --onefile script_name.py`\n\nUse --onefile to get just one executable file, rather than getting multiple files in different folders.\n\n> (you can get problem with mac, if your program is using PyQt).\n\nWhat would you recommend that I use for the GUI? It's really just simple input fields and a text area for the output that I need, so I'm just looking for something that's as simple as possible to use and doesn't cause a lot of problems (as you say PyQT does).\n\nI'm building on mac btw - So one more question: if i create the script and GUI on Mac, will it work on Windows as long as i just build the executable on Windows? Because I have a Windows computer too.\n\nActually want to add --windowed to that terminal command if you want a true standalone MacOS app.  so `pyinstaller --windowed scriptname.py`\n\nIf you want nice native GUI, then PyQt is a good choice, but I think that you have to know, that there is kivy, which is a library to create cross-platform GUI apps, that will work even on mobile (but with it's specific design, which is not so good). Maybe tkinter will work better with pyinstaller, but I haven't tested that with pyinstaller or py2exe, so you have to do a research for that.\n\nBut if your choice is PyQt, then for mac you can create just an executable script (because on macOS you get preinstalled python2), which will run your code - you can even check if the user's macintosh has installed modules that you want and if he/she doesn't, then it can automatically install them.\n\nWhen about windows, if you build same code on the windows with pyinstaller or py2exe, then it will work in windows as expected (except in cases, when your program references to os-specific libraries).\n\nI generally use Kivy for cross compatible GUI applications, though I'm not sure what the Windows compatibility is like these days.\n\nCan confirm tkinter works with pyinstaller. \n\nThanks, I'll try working with PyQT\n\nTkinter is easier to learn IMO especially for smaller projects. ", "id": "edz5ywv", "owner_tier": 0.1, "score": 0.11553784856573705}, {"content": "Welcome to one of the greatest problems plaguing the language.\n\nIn addition to the other suggestions, have you considered making it into a webapp?\n\nYeah, but I don't know how to implement the script to HTML, and I don't want to end up making the whole script from the bottom in Javascript\n\nYou don't need to do it in HTML or JS. A framework like Flask or Django can help you. You keep your script in Python, you put together a bare bones website, and just use a form on your website as an input.\n\n&#x200B;\n\nI know, packaging the existing Python would be far easier, and that other comments have those solutions, but they don't always work. \n\nI picked up that Humble Bundle and idly wondered what I'd need Flask or Django for. Now I know, thanks!\n\nBest,\nA grateful newb\n\nOh that's what I am looking for, now I need to find some tutorials about Flask/Django. Thanks mate.\n\nGubbbo,\n\nI have the same issue - I have a python terminal app that I\u2019d like to package into a web interface. \n\nI\u2019ve looked at Django, but I can\u2019t seem to make any progress getting it set up and working. Can you recommend a few good examples/tutorials?\n\nI just need a barebones interface with about 10 input fields, the user input is validated and used by python app. \n\nIdeally, down the road I\u2019d also like to add a DB to store everything input and output. But for now, I would just like to get the form working. \n\n\nYour idea is so ingenious. Can you mentor me ? Or at least advise me ? Please ?\n\nI have a Selenium script i need to run on other machines. My problem is in cross-compiling. I have access to a Windows laptop only, and I'm not a fan of having a virtual machine for Mac (I'm not aware if there are other ways to compile a python script for Mac other than owning a Mac or virtual machines, other options, if they exist, are most welcome).\n\nYour idea seems nice. I worked with Django lately. However, idk if a Selenium script would work on a website. Also, idk how to host the Django project SAFELY and for FREE. Please help\n\nwhat bundle ?\n\nSorry for so late. i'd use Flask and the Michael Grinberg Mega Tutorial (don't have a link on my phone, but google flask mega tutorial and you'll get it).\n\nhttps://www.humblebundle.com/books/python-packt-2019-books", "id": "edz7nss", "owner_tier": 0.3, "score": 0.25498007964143427}, {"content": "Just going to toss in that if your app has extra files (such as a `templates` folder for a web app) you might not want `--onefile` and instead want `-D` to denote a directory while using `--add-data` to let pyinstaller know you have a folder dependency. ", "id": "edzercs", "owner_tier": 0.5, "score": 0.015936254940239043}, {"content": "There's a YouTube video that helps you put in an executable easily https://youtu.be/OZSZHmWSOeM", "id": "edzu1kl", "owner_tier": 0.1, "score": 0.011952191195219123}, {"content": "I'd just do a web app. I ran into this problem and the easiest way for people who don't know a lick about using terminal or Github is to just package it into a web app.", "id": "edzxphv", "owner_tier": 0.7, "score": 0.015936254940239043}, {"content": "theres an import lib for that (lol)\n\nthere is PyInstaller, and also py2exe\n\nThere are probably more, do some googling for \"library python to executable\"\n\nCx_freeze is the one I use (although I use it very little)", "id": "edz5vfv", "owner_tier": 0.7, "score": 0.015936254940239043}, {"content": "If you build an exe for windows you may have an issue with windows defender, depending in your application. Add an exclusion in defender to prevent your exe from being deleted. \n\n", "id": "ee0uyut", "owner_tier": 0.3, "score": 0.0039840637051792825}, {"content": "A really simple solution would be to ask the other students to install python, and ship your code with a shell script that invokes it. They could just double click on the shell script as though it were an executable. ", "id": "ee17msn", "owner_tier": 0.9, "score": 0.0039840637051792825}, {"content": "I just tried pyinstaller it is working but it open console window with the exe file what should i do\n\nYou have to make the process run in the background using --noconsole as argument when creating the exe.\n\nthank you for your replay but what the deference between --noconsole and -w", "id": "ee17n75", "owner_tier": 0.1, "score": 0.011952191195219123}, {"content": "Macs have Python 2.7 preinstalled, so you should just check that your script works in Python 2.7.\n\nAs for Windows, there are many tools, like py2exe, for example. ", "id": "edz4ca6", "owner_tier": 0.5, "score": -3.98406374501992e-11}], "link": "https://www.reddit.com/r/learnpython/comments/afjoup/making_python_code_into_an_executable_app_on_mac/", "question": {"content": "I've been learning Python for the last couple of days and have ended up creating a program that can help me save almost an hour in my business economics exam at the end of my school year. I'm using it by by running it through terminal and typing in my input there.\n\nHere's the problem: I want to share the program with the rest of the people from my school year, and therefore I want to make it more user friendly by making it into an actual application that they can just run and type their inputs into input fields.\n\nWhat do I use to make it into an actual application? And is it possible to make it executable for both Windows and Mac users?", "id": "afjoup", "title": "Making Python code into an executable app on Mac and Windows?", "traffic_rate": 153.1240740740741}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "reddit"}, {"answers": [{"content": "I've used both Pyinstaller and Nuitka.  They work fine for very simple projects but if you're working with lots of complex dependencies both of these options just died on me with cryptic error messages.\n\nThere's one other option though: [BeeWare](https://beeware.org/), a project supported by Anaconda.  I've not used it yet, but it looks promising and the docs are solid.  It claims to support shipping your app as a binary for Linux, Mac, Windows, and Android.", "id": "jelly6i", "owner_tier": 0.5, "score": 0.8979591834693877}, {"content": "There's also Nuitka.\n\nhttps://github.com/Nuitka/Nuitka\n\nhttps://github.com/Nuitka/Nuitka#distribute\n\nUsed nuitka on my last project, the way it compiles is super interesting! Also windows defender seems to freak out less compared to pyinstaller.\n\nnuitka is my go to these days.. it's the slowest to compile (or what ever its doing)  but the end result I find is the most table and fastest", "id": "jek09ls", "owner_tier": 0.3, "score": 0.9999999997959184}, {"content": "PyInstaller is great, but I would suggest you look into building a virtual environment before doing that (venv). If you have 2GB of python libraries installed on your computer, all of those are going to be packaged with pyinstaller. If you create a fresh virtual environment and only install pyinstaller and the libraries you actually used, the file size will be much smaller", "id": "jel7qam", "owner_tier": 0.3, "score": 0.9999999997959184}, {"content": "i haven't tried this myself but it sounds neat https://github.com/exaloop/codon", "id": "jemqbl6", "owner_tier": 0.5, "score": 0.7551020406122448}, {"content": "Anyone has any idea on creating an msi instead of exe?\n\n[deleted]", "id": "jelvj0y", "owner_tier": 0.1, "score": 0.7346938773469388}, {"content": "Cc freeze is a good tool to do this", "id": "jekrd9m", "owner_tier": 0.5, "score": 0.6734693875510204}, {"content": "Worth noting that PyInstaller is better used to compile your project into a bunch of files (rather than a single exe file) especially if you have supporting text/data files, images, or anything else. \n\nIf that\u2019s the case you can use a setup compiler (I use Inno Script Setup) to take your project and package everything into a single executable installer file that, when run, provides the user all the typical options to select where they want to install it, create a desktop shortcut, etc). \n\nThe other option is to compress everything  as a zip file and distribute it that way, but building an exe installer is a more clean option", "id": "jel264x", "owner_tier": 0.5, "score": 0.6734693875510204}, {"content": "Try Codon?   [https://github.com/exaloop/codon](https://github.com/exaloop/codon)\n\nand   [https://docs.exaloop.io/codon](https://docs.exaloop.io/codon)\n\nI am not a coder, but I tried the example and thought this was interesting.  I have not tried to create a standalone executable.  If you try it, please let us know how it works...\n\n\"Codon is a high-performance Python compiler that compiles Python code to native machine code without any runtime overhead. Typical speedups over Python are on the order of 100x or more, on a single thread. Codon supports native multithreading which can lead to speedups many times higher still.\"", "id": "jeoqwnz", "owner_tier": 0.1, "score": 0.6734693875510204}, {"content": "https://youtu.be/p3tSLatmGvU", "id": "jem8gvy", "owner_tier": 0.1, "score": 0.6530612242857142}, {"content": "You just need to compile your code. That gives you a standalone app that people can run. I've never needed to do it, but I'm sure it will be relatively easy. Just Google python compiler.\n\nI've never compiled a python project before, but i did compile a visual basic program once, and it was a one click operation. It handled everything for me and I ended up with a windows app that people could run.", "id": "jemug6h", "owner_tier": 0.5, "score": 0.5918367344897959}, {"content": "yes\n\nCould you please tell me how to go about doing that?", "id": "jejtboi", "owner_tier": 0.3, "score": -2.0408164953885122e-10}, {"content": "Python is so widespread now that it's becoming a standard piece of every OS.\n\nYikes.\n\nSeems like you're not using it....\n\nI use it a lot. Every day. Several times a day sometimes. I have a very large collection of python scripts that I use to automate my work.\n\nThere is so much python out in the world that it's pretty much standard. Like Java. Is there a working desktop in the world that doesn't have java installed. \n\nGetting that way for python too.", "id": "jek5u9r", "owner_tier": 0.5, "score": 0.040816326326530594}], "link": "https://www.reddit.com/r/learnpython/comments/128qclj/is_there_a_way_to_use_turn_a_project_into_a/", "question": {"content": "Basically, I'm throwing together an autoclicker just to prove to myself that I'm capable of that, but I'm using libraries that aren't native to Python, and you have to install Python in order to use it. I might end up sharing it with a friend and I want to be able to just give my friend a single file to run, and it just works without needing them to install Python or the libraries I'm using. Is this possible?", "id": "128qclj", "title": "Is there a way to use turn a project into a single executable file that doesn't require anyone to do anything like install Python before using it?", "traffic_rate": 153.1240740740741}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "reddit"}, {"answers": [{"content": "Python is an interpreted language so the user running the script has to have python installed. However you can \u201ccompile\u201d it to an executable using PyInstaller or Nuitka. But most computers will think it\u2019s a virus haha", "id": "j97wuvc", "owner_tier": 0.1, "score": 0.9999999997222222}, {"content": "Another option is to make it available to them from your machine as a web app.\n\nHow do you do this?  I really want to know how to actually do this!\n\nFirst, you need to create a web page and from there you need to deploy to a server to host it. \n\nIn this situation, if the OP don't want to install python to the other collegues, maybe he can use a server to create a virtual machine, after that he can install python there and add the script, other users can connect remote to the virtual machine and run the script", "id": "j980gxc", "owner_tier": 0.7, "score": 0.6666666663888888}, {"content": "The easy solution is really just to ask your coworkers to download Python. It's even available on the microsoft store these days, it takes literally 5 seconds.\n\nI know people will suggest PyInstaller or Nuitka or whatever, but those are all kind of hacky and present their own issues. Python is a language built around the idea of sharing code, not compiled executables. If your end goal is to ship compiled executables, Python is the wrong tool for the job (like using a wrench to drive in a nail) and I would suggest re-writing your script in a language like C#, C++, Rust, Java, C, Haskell, etc.\n\nJust look at most large programs that need Python (like Blender or InkScape) - they're not using PyInstaller, they're just automatically installing the interpreter for you.\n\nAlternatively, you could consider making your script a web app with something like Django. You can even host this over a local network from your own computer.\n\n[deleted]\n\n> What if you are selling it as a product? Is there no way for you to hide the source code from the customer with Python?\n\nNot really, no.\n\nPyInstaller itself doesn't do any obfustication beyond compiling your code to Python bytecode (the kind of stuff you'd find in \\_\\_pycache\\_\\_ directories or .pyc files). It's nothing like compiling a C program to machine code, or even compiling a Java program to Java bytecode. Someone determined enough will be able to reverse engineer the source code very easily.\n\nPython really has no good way of obfusticating code for the purpose of keeping source code secret when distributing an app. It's not what the language is made to do. If that is your goal, the only way to do it reliably would be to deploy your code as a web app, or possibly to write an extension module in C and write bindings in Python.\n\nJust like I would never use C to write scripts, I would never use Python if secret-source distribution was my goal. It's very important in this regard to pick the right tool for the job.\n\nEdit: Note that I said \"secret source.\" Secret source (i.e. you don't want anyone being able to read your source code) is not the same as closed source. You can distribute plaintext code under any closed source license you want and it would be legally binding (NAL). Closed source programs just happen to often be secret source since it makes it easier to enforce the terms of your agreement with your clients, but it's by no means a necessity.\n\nI\u2019ll just point out that while that is all true, there are still plenty of apps and websites written in Python out there, if they are running the code on their servers they can serve anyone the app while still maintaining their code secrecy\n\nYup, that's very true: web apps are a great way to keep your code secret while still giving others the functionality. Python is an excellent server-side language.", "id": "j99dlxy", "owner_tier": 0.7, "score": 0.5833333330555556}, {"content": "there's online IDEs that dont need you to have python installed [https://www.programiz.com/python-programming/online-compiler/](https://www.programiz.com/python-programming/online-compiler/) and others they just copy and paste ur code and run it  this is how i used to practice on my phone", "id": "j97y5nz", "owner_tier": 0.3, "score": 0.13888888861111112}, {"content": "Oh, I had this same headache. And the solution I found is going to be unpopular here: learn HTML, CSS, and JavaScript. The JavaScript can be run in any web browser (via the HTML file), and you can make a nice user interface with the HTML & CSS.\n\nThere are other options, of course, but for sharing code with non-coders, this might be the best one.\n\nBrython?", "id": "j9ayj3n", "owner_tier": 0.3, "score": 0.13888888861111112}, {"content": "[Google Colab](https://colab.research.google.com/) might be a good option", "id": "j97ygyb", "owner_tier": 0.3, "score": 0.16666666638888888}, {"content": "You can package up an executable version of python along with your script using a tool like [pyinstaller](https://pyinstaller.org/en/stable/)", "id": "j97webp", "owner_tier": 0.3, "score": 0.05555555527777778}, {"content": "The simplest solution is using Pyinstaller to create a standalone executable then dragging and dropping the exe onto a shared network drive. That way, everyone who runs the file is always running the latest version of your script.\n\nGoogle Colab *works* but if your script requires the user to process files that have to be uploaded first, they can take agonisingly long.\n\nYou could try writing a web app but in my opinion this is just more to maintain and more code which could potentially break. I would rather use Azure/AWS which can provide you cloud based processing power with basically near zero downtime guaranteed.", "id": "j98qh2o", "owner_tier": 0.7, "score": 0.05555555527777778}, {"content": "Flask, Django, fast API or anything similar will make it accessible via a web UI\n\nOR\n\nAuto-py-to-exe coverts it into an executable", "id": "j9ax4ra", "owner_tier": 0.1, "score": 0.05555555527777778}, {"content": "Replit.io", "id": "j994km5", "owner_tier": 0.1, "score": 0.027777777500000003}, {"content": "I would use docker but that complicates things.", "id": "j9aj4fg", "owner_tier": 0.3, "score": 0.027777777500000003}, {"content": "PyScript or make them use the [embeddable version](https://www.python.org/ftp/python/3.10.10/python-3.10.10-embed-amd64.zip)", "id": "j99llzt", "owner_tier": 0.3, "score": -2.777777760895914e-10}, {"content": "You can use auto-py-to-exe.  Make sure to name the file something like \u201cNot_A_Virus.exe\u201d so your users know it is safe to run on their machine.", "id": "j9b99kd", "owner_tier": 0.3, "score": -2.777777760895914e-10}, {"content": "Python is becoming standard equipment for computers etc. You co-workers should update their equipment to join the modern world.\n\nConsider java. Do your workers have java installed?", "id": "j9bf3mv", "owner_tier": 0.3, "score": -2.777777760895914e-10}], "link": "https://www.reddit.com/r/learnpython/comments/116qcft/how_can_i_send_python_code_so_other_people_can/", "question": {"content": "Hello I am fairly new to python and coding in general. I recently made a script that I believe will help out my co-workers. How can I send them the python file so they can run it if they don\u2019t have python installed. I heard converting to .exe could make their computers think it\u2019s a virus.", "id": "116qcft", "title": "How can I send python code so other people can execute it without having python installed", "traffic_rate": 153.1240740740741}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "reddit"}, {"answers": [{"content": "They can edit an executable file in notepad++?\n\nOr are you talking about .py files? if .py files, make an exe using py2exe, this will make things more difficult.\n\nBesides that it's possible to \"edit\" compiled exe programs in general, that is a bit more difficult, but the general solution for things you want to hide is not to give them to anyone.\n\nWhat are you trying to hide/prevent? from your own infrastructure team...?\n\n>They can edit an executable file in notepad++?\n\nyes\n\nThat is very interesting... in my experience trying to edit a binary executable with a text editor results in a corrupt executable that no longer works.\n\nWith hex editor it's possible to change some strings... but really... what are you trying to hide from your own IT team?\n\nThen it\u2019s not an exe file. It\u2019s probably a Python file with a shebang or smth like that if it doesn\u2019t have a .py extension. Executable files are in a binary format that cannot be edited\n\nThen we have a different understanding of \"executable\".\n\nOr you are talking about editing it with an hexadecimal editor, which is pretty \"hardcore\".\n\n.py files are not executable on windows\n\nNo they cant. Editing a binary .exe file would be a nightmare to not corrupt after the editing.\n\nMake a user run it with only read rights and block anyone  from having Edit rights to the file.\n\nOr use a filecgwck system that replaced the edited file if it changes.\n\nWell, they can be edited, but it's non-trivial, and requires more than a basic text editor.\n\nI mean\u2026 not really. Unless you have something like ghidra, and even then good luck making sense of anything originally written in a language like Python. Depending on how you compiled it, you likely have the full Python virtual machine in there with the bytecode of the program. Good luck figuring that one out.", "id": "kihhkop", "owner_tier": 0.7, "score": 0.9999999998076923}, {"content": "Without knowing more: no. What edits are you afraid of them making? What is it you're trying to hide from them? Because honestly them being able to see or edit your code shouldn't cause problems, and if it does it indicates you have a bigger issue.\n\nEither a technical issue, like you're embedding secret values in your code, or a team issue like you don't trust your infra team, and if you don't trust your infra team you shouldn't be using the infra they set up", "id": "kihnt22", "owner_tier": 0.3, "score": 0.42307692288461535}, {"content": "How exactly did you convert to an \u201cexecutable\u201d? You should not be able to open executable files in a text editor\n\nWell you \"can\" but it would not be too useful unless you know what you are doing (like looking for all the statically stored strings )", "id": "kiiska0", "owner_tier": 0.3, "score": 0.1923076921153846}, {"content": "Rewrite it in another language. Serious, if you don't want people to be able to easily reverse engineer something Python is NOT the way. Companies explicitly choose Python for exactly this reason. \n\nThat said some other people have mentioned some ways to compile it. I'd love to find out if it works or not. So please update us :).", "id": "kijg0id", "owner_tier": 0.3, "score": 0.1153846151923077}, {"content": "## Direct answer:\n\nYou can package your code as a [wheel file](https://realpython.com/python-wheels/).\n (This is how most packages you download from pip these days come, for example.)\n\nThis is pretty easily done with [Poetry](https://python-poetry.org).  If you don\u2019t have poetry set-up there\u2019s a little bit of learning to do, but learning a package manager is worth it, imo.  Especially for Python which is about as leaky a system as you can get.\n\n## Caveat to Direct:  \nThis is not (nor intended) to be cryptographically secure.  I honestly don\u2019t know how easy it would be to edit the installation (because why would you \u2014 you\u2019d just fork the repo and edit that).  But to your question I\u2019ll add that note.\n\n## Step-back:\nWhat are you trying to do here?  What are you trying to prevent?  \n- Accidental edits corrupting something? (If so add a sha and a validation step to warn the user to redownload if corrupt.). \n- Disagreeing parties changing flow? (If so this, of course, sounds like a social problem.  I can\u2019t tell you what\u2019s right, but working it out on the social level is probably what\u2019s right! :)\n- Bad actors?  (Logging and verifications is probably the right step then. )\n- Hiding secrets in code \u2014 e.g. api-keys [which shouldn\u2019t be in the code, incidentally] that would grant more authority to a holder than the coded actions? (Then you probably want to use secret management \u2014 something built into most CI systems or achievable via myriad other routes.)\n\nTLDR: publishing wheels with something like Poetry is great, but it\u2019s not clear that what you\u2019re asking for matches your goals - so fyi.", "id": "kihz0jz", "owner_tier": 0.7, "score": 0.23076923057692306}, {"content": "Give them an API to interact with the automation instead of direct access. This is the only 100% fool proof way\n\nThis is the easiest way. Maybe a comfortable web interface for the average user.", "id": "kij3k9m", "owner_tier": 0.5, "score": 0.15384615365384616}, {"content": "You can convert you python files to .pyo or .pyc which are the same file as .py but not ina text format but a byte code. That may be enough for you need. \nLook for the compileall module \n[the docs](https://docs.python.org/3/library/compileall.html)", "id": "kihqibz", "owner_tier": 0.1, "score": 0.03846153826923077}, {"content": "Just a heads up as assume this is a corp network.\n\nYou CAN package a python package into a single exe with no supporting files, however it most likely will be seen as a virus which may cause you or colleagues issues.\n\nAs others have mentioned cx freeze is a good option, I've had no virus issues with this for distribution, but does mean you'll have an exe and available python code in the lib directory from your build.", "id": "kik554s", "owner_tier": 0.3, "score": 0.01923076903846154}, {"content": "Anything can be edited.  It's just a question of how hard it is going to be to do it.", "id": "kiip7rv", "owner_tier": 0.7, "score": 0.03846153826923077}, {"content": "Are you putting your password in it? Is that why you don\u2019t want your team to see it? If so stop doing that.", "id": "kijff2m", "owner_tier": 0.3, "score": 0.01923076903846154}, {"content": "I packaged a python script as an executable using CX_freeze and I\u2019m NOT able to right-click the exe file and edit the Python script with Notepad++.", "id": "kij5q8m", "owner_tier": 0.1, "score": -1.9230769113894788e-10}, {"content": "cython and cx_freeze", "id": "kij94pt", "owner_tier": 0.5, "score": -1.9230769113894788e-10}, {"content": "Compile it.", "id": "kijdb70", "owner_tier": 0.3, "score": -1.9230769113894788e-10}, {"content": "A quick solution would be to share the complied python file (.pyc extension) instead of the py file. This is not full proof if they open it in notepad it\u2019ll be incomprehensible.\n\nYou can decompile the .pyc file rather easily (source: Had to do that once when I accidentially deleted a .py file in something that was not git-tracked (stupid me))", "id": "kijph5f", "owner_tier": 0.1, "score": 0.03846153826923077}, {"content": "One other option, depending on the details, is to make your software a service and only distribute a client for the service. Then you never need to distribute whatever it is you don't want people to edit.", "id": "kijskjl", "owner_tier": 0.7, "score": -1.9230769113894788e-10}, {"content": "Wouldn't making it as \"read-only\" solve your issue?\n\nI'm struggling to understand what are you trying to achieve", "id": "kijz76z", "owner_tier": 0.5, "score": -1.9230769113894788e-10}, {"content": "Py_compile", "id": "kik16iv", "owner_tier": 0.1, "score": -1.9230769113894788e-10}, {"content": "Well if it's Linux. First you change the permissions to something like 744 or 644. Next you move your script to the bin and rename it so that its part of the environment. If you really want to make it uneditable, move it to the bin change the group and set the permissions to allow only root and cron access. It should negate the editable parameters. Additionally add in a action from github to regularly update the script with permissions and your updates to nullify any type of interference. \nThis is solid but you can add in extra safeguards with key access to force the file to run based on access to an encrypted key. Its annoying but the most secure way to keep your file accessible to you while keeping editing power out of anyone without key access", "id": "kin9wx8", "owner_tier": 0.3, "score": -1.9230769113894788e-10}], "link": "https://www.reddit.com/r/learnpython/comments/199zmjh/is_there_a_way_to_make_a_python_executable_that/", "question": {"content": "I wrote a bunch of automation utilities for my infrastructure team and convert to executable. The issue is you can right click on it and edit in notepad++.\n\n&#x200B;\n\nIs there something I can do so they can execute it but not edit it? ", "id": "199zmjh", "title": "Is there a way to make a python executable that can't be edit?", "traffic_rate": 153.1240740740741}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "reddit"}, {"answers": [{"content": "Pyinstaller is the way to go for me, and afaik for most, why was it unsuccessful?\n\nThey should probably keep trying to use Pyinstaller. It's the easiest to use. Here's a basic guide I made in reply to someone else a few weeks ago.\n\n    pyinstaller -F --icon=C:\\pathtoyouricon\\icon.ico --noconsole C:\\pathtoyourscript\\yourscript.py\n\n*note, you don't need the entire filepath if you cd in to the directory that the script is in, then you can just type the file name*\n\n\n> -f combines all files assosciated with script in to 1 exe, though you can still specify additional data files (ie program data storage) that need to be included with, but not compiled directly in to the exe (see example below)\n\n> --icon= is for assigning an icon to the exe\n\n> --noconsole makes it so that when you run the exe, you don't get a command terminal popping up with it\n\nSo when I had a program where i wanted to include data storage files with the exe in the same folder as the exe is outputted to, i did it like this (this was so that the files for storing various program data in between uses was included with the exe)\n\n    pyinstaller -F --icon=icon.ico --noconsole --add-data \"D:\\1My-Script-Projects\\Better-Prompt- \n    Manager\\recent_files.json;.\" --add-data \"D:\\1My-Script-Projects\\Better-Prompt-Manager\\window_size.bak;.\" -- \n    add-data \"D:\\1My-Script-Projects\\Better-Prompt-Manager\\window_size.dat;.\" --add-data \"D:\\1My-Script- \n    Projects\\Better-Prompt-Manager\\window_size.dir;.\" D:\\1My-Script-Projects\\Better-Prompt-Manager\\pm.py\n\n\n\nOne trick for cd'ing directly in to a folder is, in file explorer, whatever folder you have open, go to the address bar backspace the address and just type 'cmd' and hit enter, it will open cmd while also cd'ing cmd in to folder you were in (handy trick i just learned haha). \n\nOtherwise you just open cmd and go\n    cd /d C:\\Pathtoyourscript\\\nand then you once you've cd'd in to the folder you don't need the entire file path and instead can use just the filename in the command as mentioned above (helpful for once you get in to including many files in a singile compile). Anyway yeah pyinstaller will output the exe to whatever folder you're working out of. Hope that all helps.\n\nAdditionally, if you want to create a setup wizard, I recommend using Inno Setup Compiler, which has a tool called 'Script Wizard' that makes creating a basic file installer pretty straight forward. Registering the program as an installed program in the OS can help with avoiding false-flag issues, at least afaik.\n\nWell, it failed in two ways. Even when I used the --onefile command it created a bin and dist folder with a bunch of extra crap. The output file doesn't work, for my friends when I send it to them even if I include the entire Dist folder. \n\nIt works on my computer, even if I move the folder around. So that's something, but it doesn't seem to be more accessible than just asking a friend to install python.\n\nOkay but it works on your pc.. Thing is you can chuck out every file and folder it's created when it's done, they're all temp files, apart from the exe file in the dist folder, but if that file which is binary works for you, then it should work for your friend, unless your friend is doing something wrong, maybe his av is blocking it (av's sometimes flag executables they don't know), or maybe your program manipulates files, and your friend has ransomware protection turned on (which just generally blocks all programs from moving or removing files), or maybe defender doesn't allow him to execute files from an unknown source..         \nI'd say send it to another person and check it there, it might just be a \"fault\" or setting on your friends end, it's the most likely at least\n\nYeah, I'm not sure about the AV.\n\nwe're running into the issue that Pyinstaller is just spitting out a file, with no file extension. \n\nEven when I use the --onefile command I still get all those temp files and the file it's producing doesn't seem to work without them. I feel like I'm messing up something very basic.\n\nLike the guy above me said, when you use PyInstaller, it creates 2 folders in the directory you're working in, one with the temporary files it created during compile, and then the other is a folder that should have a single exe, unless you had extra files that you specified in command line (as seen in my second example). You can ignore the folder that gets created that has many files in it. They are unneeded. If you're just creating 1 exe file, then one of the output folders will have just 1 exe file and nothing else in it. That is the file you would give your friend, nothing else required.\n\nEdit: Also, might i ask, what error is your friend getting when he opens your exe on his computer?\n\ndo we know what the error is? what if it is pulling up a fileNotFoundError on their freind's computer but the file would exist on their own computer? I'm probably wrong because i have no clue how python compiling works, but just reading this it seems like this may be the case\n\nI used a speccfile to include my assets. I have like four images and a short sound file. The resultant file that pyinstaller is giving me doesn't work without the temp files, and doesn't have a file extension at all. I am using the --onefile command when I run pyinstaller.\n\nIf that is the case shouldn't pyinstaller then fail and not produce a file in dist? I think that's been the case for me at least\n\nHm weird.. But it should work without the temp files, the onefile flag should package it all into 1 file, making me wonder if you're looking at the correct file, again just to be clear, you're talking about the file inside the \"dist\" folder right?         \nCould you try to run the same again except use -F instead of --onefile? As I can confirm that works for me at least..       \nAlso could you post the entire command you did?          \n           \nIf there was a much better alternative to pyinstaller I'd just give you that instead, unfortunately afaik there isn't\n\nagain, im not familiar with this process, so ur probably right\n\nYes to confirm, I was looking in the Dist folder.\n\n```pyinstaller --onefile car_game_tutorial.spec``` and\n```pyinstaller --onefile car_game_tutorial.py``` are what I've tried.\n\n```pyinstaller -F car_game_tutorial.py``` Does create a single file for me, but it doesn't run at all.  Which is almost an improvement?\n\nNot 100% sure that this will work, but try this, maybe you need to add your specc file like this:\n\n    pyinstaller --add-data \"car_game_tutorial.spec;.\" car_game_tutorial.py\n\nor you could try with -F\n\n    pyinstaller -F --add-data \"car_game_tutorial.spec;.\" car_game_tutorial.py\n\nEdit: Also I was thinking about it, the reason it may run on your system, but not your friends, is you're running it with admin privileges/or storing it somewhere that doesn't need admin privileges, whereas he could be placing it somewhere that does need admin privileges, removing the .exe's ability to access its assosciated data files. You could try getting him to put the .exe in Documents for example and running it from there - longshot, but idk why you cant get it working to begin with, so just throwing ideas out there.\n\nThat's weird.... Well I imagine that it won't run because you didn't include any extra files it needs as it left out the spec file. If you were to write a simple helloworld and just ran pyinstaller -F helloworld.py, does it then come out with an exe extension?        \nWhat's particularly weird then is that ypu say there's no extension, yet it runs on your pc without extension? Or did I misunderstand that?\n\nTurns out the reason it runs on my machine and not on my friends is that the output of Pyinstaller is OS specific. I'm working on an ancient linux box and most of my friends are Windows Enjoyers.\n\nGiven that I think I'm gonna give up on pyinstaller for now and just focus on learning game design concepts and hooking up my machine learning agents to my little games.\n\nI do really appreciate your help. I was *so* baffled. I still am a little baffled, but much less concerned about it for now. ^=^\n\nI've given up on Pyinstaller for now. It won't be able to do what I want in that it can't be run on linux and make an executable for a windows system. If I understand their documentation right.\n\nAnd yes, you understand me correctly. The file it doesn't obviously have a file extension and it does work on my machine. Super weird.\n\nCompiling is also done on the OS, so if you need a Windows executable you need to compile it on Windows. Pyinstaller doesn't support cross compiling.\n\nWhat you can do is, paste your entire script in to ChatGPT. You may need to do this as sections. Just spam it with each section of your script until you've sent it the entire program. Then ask the bot if it can see your program sent to it over several msgs, and if so tell you the basic functions of the app so that you know its not lying.\n\nThen ask it what issues the app has that could prevent it running in Windows. This isn't always an effective strategy, it depends how long your script is, but im guessing not crazy long. I regularly paste a 1500 word script (in chunks) to the bot, and then have it make changes/suggestions/observations based on what i've sent it over a number of msgs. \n\n\nAdditionally, you'd be better off compiling it on Windows and testing it works in Linux, rather than the other way around.\nOh also, try to stick to requests that ask it to rewrite the specific section your working on, rather than letting it try and send you the full script again.\n\nAhhh hang on you were running pyinstaller on linux to generate an exe file? Maybe that's why then, I never used pyinstaller on linux, only ever on windows, maybe it cannot create a file thats not meant for the platform it's generated on, I'm not sure..        \nI do have a linux machine with python here tho, I could give it a try later and see if it gives the same result, if you're still interested that it\n\nInteresting do you preface the spamming with any sort of guiding prompt?\n\nMy games are super small right now. One is 110 lines of code and the other is just under 200. I can paste them into a prompt in their entirety. I've found though that it really only gives general help. I was having a problem with my gravity code sending my player flying and chat GPT seemed to be able to pick out the general sections related to physics but it only gave me general suggestions.\n\nI am a little wary of using cGPT. I play with it for most projects, but particularly where code is concerned it's been fairly unhelpful.\n\nPyinstaller doesn't support cross compiling. If you need a platform specific executable then you need to compile it on that platform, so if you need a Windows executable you need to compile it on Windows, same thing for Mac or Linux.\n\nAnd this is the same with most solutions for compiling an executable for Python and most programming languages. Very few programming languages support cross compiling (meaning you're able to compile an executable for all platforms on 1 type of OS).\n\nYeah, maybe? Linux does all kinds of weird stuff if you don't understand it well, and I don't yet.\n\nI'd be curious about the results of your experiment, but I don't intend to use pyinstaller going forward. it's just designed for a different use case than I need. So don't spend energy on my account, only if your own curiosity moves you.\n\nI don't bother prefacing the spamming, as it seems to forget any instructions, including \"don't explain my code to me until i ask you to\" and \"just say \"okay\" to my messages. So just ignore the fact it will insist on explaining each section of code as you send it, and power through until all sections of your script are sent to the bot. I can send an entire 1500 word script over like 10-15 msgs, and then ask \"what does my program do\" and it will describe it in full.\n\nWith ChatGPT, often you will have to try the code it gives you, and it it doesn't work, refine your prompt and try again. \n\nI only started learning python when ChatGPT came out at beginning of december last year, and i've written a 1,500 line program with the bots help, so it definetly can help write longer programs. It is a good practice that, if your script won't run, go to the windows explorer folder of your script, type 'cmd' in the address bar and hit enter, this will open CMD directly in to your scripts folder, and then run the script by typing the scripts name in to command prompt. Then if the script crashes on launch or when using certain functions, you will see the errors in the cmd console and you can take the error it provides, and feed that to the bot, to work out why the code it gave you didn't work.\n\nYeah, definitely gotta test and refine. I find it most useful for establishing overviews for what I need to learn for a given subject. I have been using it to build out a map of skills I would need to learn for web development and what the pieces of those individual skills are.\n\nYes! I live in terminal. I swear most of the process of me writing code is just running it getting an error fixing that and repeating the cycle indefinitely. I also do most of my editing in Vim because I am masochist who wants to feel like a wizard.\n\nAlso I get curious! What are you building right now and what are you working towards? I always appreciate hearing about a self motivated learner\n\nI'm making a clipboard history manager of sorts, so far, including comments, its about 1500 lines lol. If I removed comments, probs closer to 1k, but i've managed to make it pretty feature rich for a noob project. Just learn to build things one function at a time, and then test, and make sure it didn't break anything, then move on to next function, test, make sure it didn't break anything, rinse repeat.\n\nThat's pretty cool!\n\nAre you just learning python for fun?\n\nWell yes and no. I plan to start working with a friend who has an established business, and programming helps me bring more to the table. But i am also just learning coz I enjoy it, otherwise i'd learn something else useful lol.\n\nFair enough. What sort of solutions are you hoping programming will allow you to bring to the table? It's notable that you picked python and not like javascript or something.\n\nNo reason to assume I won't learn javascript and C#/C++ as well. I made a tic tac toe game in C# when i first started with this stuff right after making a python calculator which was basically my first python program.\n\n\nhttps://www.reddit.com/r/GPT3/comments/zd7f1w/made_a_calculator_using_python_with_no_python/\nhttps://imgur.com/a/n00PTGF\n\n> What sort of solutions are you hoping programming will allow you to bring to the table?\n\nBetter management of data as well as the ability to use company data to problem solve and brainstorm new ideas. Automate elements of a businesses workflow, build tools that help make tasks easier or more straightforward or drive better results. \n\nI also probably will try to incorporate some web development knowledge in parallel to all this, as there is a website I would like to rebuild with better functionality.\n\nAdditionally, I know a bunch about 3D animating, 2D animating, video editing, music making, game design, so I may use programming to thread those skills together and make some indie games, but that's just a different way to practice programming in a way i find enjoyable. At the end of the day, the idea is to build skills that help save time/problem solve/build tools that save time and problem solve. The reason I am finding it a bit easier to grasp programming is, i'd already learned a bunch of Autohotkey (super basic programming language) in the past, ChatGPT unlocked my ability to understand more complex languages. Overall I had a pretty solid grasp of IT before attempting to learn Python, and once i've learned Python, I will be able to use that solid understanding to learn other languages and use them together. \n\nEven my copy-manager program makes use of an AHK script (ahk compiled to .exe) for 1 specific task because it was proving difficult to achieve that task with python, so making languages talk to eachother can be handy.", "id": "j2zdw6n", "owner_tier": 0.7, "score": 0.9999999999145299}, {"content": "I used to use pyinstaller but 99% of everything I made was flagged as antivirus and deleted.  This of course made customer deployments not ideal.  Lately,  I've had good luck with cxfreeze.\n\n> pyinstaller but 99% of everything I made was flagged as antivirus and deleted\n\nAs I understand, this is not the fault of just the module, but is also often caused by incorrect setup of the python environment you're using. [For example, if you have a x64 architecture system, you want to make sure you're using the x64 version of python, using the x32 in a x64 environment can often cause this kind of issue](https://imgur.com/a/xINmHIR). There are other causes, but most revolve around incorrect setup of python/its modules. \n\nAdditionally, for any exe I create, I typically create setup files for the exe's using Inno Setup Compiler script wizard. It's possible that by registering the program as an installed program within the operating system, Windows is less likely to incorrectly flag it as a virus file. This may not be ideal if you're making a portable program though, but again, even my portable versions of programs have been without issue using PyInstaller so idk, this is actually the first I've ever heard of python scripts being flagged like this (but I haven't been learning that long so maybe its prevalant and i've just been lucky idk).\n\nI tried CXfreeze after I made the post last night! It did create a single file, but when i sent it to people they couldn't get it to work. )=\n\nYup those are the only two I've used, and cxfreeze is the latest. Can't remember why I switched, but I guess it looks like there's more than one reason.\n\nI think the second result in google for \"pyinstaller trojan\" is where I began all of my troubleshooting.  I followed most of those steps but I never could get pyinstaller to compile and in the end I had a Win 7 32 bit vm that I created my exe's in (not ideal) which dropped my virustotal results to about 75%.  I believe another headache was that some of our scripts needed extra lines added to deal with the logging module.  For now though, cxfreeze gives me the results I need.  Maybe if we get another junior dev or intern then they can take over our old python scripts and try their own thing.", "id": "j2zupdk", "owner_tier": 0.1, "score": 0.4188034187179487}, {"content": "I like auto-py-to-exe, real braindead to use\n\nThirding, made it super simple to generate exe files that I distribute around work. One tip I would give is to run your exe outputting what you would normally see in the terminal to a text file. You'd be surprised how easy it is to miss a dependency for your application or a driver from Windows, for example. It's usually too quick to catch when the exe crashes out.\n\nSeconding this. Surprised not more people recommend it. Had no problems with this one\n\n[deleted]\n\nI'll add it to my list. It sounds like pyinstaller is probably where I need to be, so I'm gonna spend a bit more time on that, and then give auto-py-to-exe a try.\n\nFourthing this! Just was looking this up and worked like a freaking charm. Thanks!\n\nNever used pyinstaller. The one I mentioned is basically just a gui for another thing, maybe even pyinstaller!\n\nI know im too late, but if i remember correctly auto-py-to-exe is just a gui for py2exe (the one you already used)", "id": "j309emj", "owner_tier": 0.5, "score": 0.24786324777777777}, {"content": "No there's no standard way in the same sense that other programming languages use. Python code is generally distributed as source code. That is, as .py files. \n\nFor you it sounds like a freezing tool like pyinstaller is the correct way to go. Assuming that you and your friend both use the same OS. \n\nhttps://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_create_an_executable_from_my_python_code.3F\n\nAh it normally is distributed as .py. I see. That just feels like a big ask for folks if I'm distributing a game. I took a look at your link, and it's showing me the same tools I've been fiddling with. Really sounds like I'm in the right space, just making mistakes so far.\n\nThe OS thing is a little tricky, my PC died recently so I'm developing an an old ass linux box, and most of the people I'm trying to send this to are on Windows, with a few running Macs\n\nYeah you usually don\u2019t want to write games that you intend on distributing in Python.\n\nYeah, after going through the other comments I'm coming to the same conclusion. I just started in python because one of my primary drivers is wanting to apply reinforcement learning agents to my games, and python is where I learned ML.\n\nIt sounds like I'm going to want to start learning a compiled language pretty quick here. Maybe spend a little bit more time building in python to get comfortable with the basics of game design and then start trying to build some of my projects in a more distributable language.", "id": "j2ze9jm", "owner_tier": 0.7, "score": 0.13675213666666666}, {"content": "To convert a python script (installing only the necessary libraries) into an executable file, this method worked for me:  \n\n\n1. Create a folder on your desktop where you will keep your code and files related to the executable.\n2. Copy your python code into the folder you just created.\n3. Use the command line to create a virtual environment in the folder you just created. You can do this by using the \"virtualenv\" function or by installing the \"virtualenv\" package via pip.\n4. Activate the virtual environment and install the necessary dependencies for your code using the \"pip install\" command:\n5. while running your code it will show the libraries you need to install in virtualenv as it is a \"clean\" environment\n6. Use the \"pyinstaller\" package to create an executable file from your code. You can install this package using pip.\n7. Run the executable file to verify that it works correctly. If everything went well, you should be able to use the program in the same way as before, but now in the form of an executable file.\n\nThis sounds like I would still need to get my target audience to install the necessary libraries and stuff. Which feels like a big ask for distributing games.\n\n[https://www.youtube.com/watch?v=th77Z7XC1CY](https://www.youtube.com/watch?v=th77Z7XC1CY)", "id": "j30eo77", "owner_tier": 0.1, "score": 0.08547008538461538}, {"content": "How about containerizing ir in a Docker Container? Wouldn\u2019t that solve the problem?\n\nThis is actually one of the first things I looked at! It looks like you need the other party to install docker, which defeats some of the purpose for me. If I was distributing to professionals rather than silly gamers it'd probably be an appropriate solution.", "id": "j31vs0i", "owner_tier": 0.3, "score": 0.09401709393162393}, {"content": "I had this same problem a few years ago, and I came to the conclusion that this is not possible in a nice way. Your executable needs to include a complete Python runtime so the application, however simple it may be, will be stupidly large. Additionally, since it's not from a reputable source (you) it will swiftly be marked as a possible virus, because you could have easily made a virus.\n\nThere are 2 solutions, and both of them involve learning new stuff: Either learn a language that can be compiled to machine code (Rust, Go, C/C++) or learn web development. I learned both and the latter is adviced if you need a graphical user interface (which I imagine is the game if you're making a game). If you learn a bit of networking as well you could even have the program run in Python on a server and send the output to the webpage.\n\nIt really sucks but that's how it is, I wrote my original project 3 years ago (begin of corona) and I only now feel well-versed enough in web development to create the same thing from scratch again. On the positive side, my original application landed me a part time job which after 2 years led to another parttime job in web development which pays ridiculously well.\n\nOh! Thank you for your in depth response.\n\nI can see now why what I want is difficult. \n\nWeb development or C might be where I go in the long run once I'm more comfortable with the basic game design concepts. I think I'm leaning towards C/C++ because my next step is to make a reinforcement learning agent that can learn to play my game, and that seems like it would be easier to manage.\n\nC/C++ are both wonderful languages but I strongly recommend learning these languages if you have the help of someone more experienced as they're on the more difficult side.\n\nMost machine learning stuff like reinforcement learning for games is actually done on Python, which sucks because that makes games hard to distribute. However there is a simple-ish solution!\n\nAny machine learning is just throwing a set of inputs into a model and getting the output (the decision) which is usually done in Python. Python also has great web server support (check out FastAPI!).\n1. Have a web server running in Python connected to a machine learning model \n2. Make your game in any language you want\n3. Send the state of your game to the web server, this set of inputs is thrown into the ML model, and the output is returned as a response which can then be used to control the game.\n\nIt is actually very similar to what I've made before when I couldn't get a machine learning model running on a phone itself, so we just send the phone's data to a web server for processing using a ML model, and return the response back to the phone. Downside is that the game needs internet, upside is that it saves you a whole bunch of headaches and development time (but downside is that you need to learn a few more tools/languages).\n\nIt sounds like a fun project! If you ever need any help then you can always send me a message and I'd be happy to support you!\n\nFair enough. Learning those languages is probably still a ways out for me. I'm still in the beginning of my career. I working on data analyst/scientist work since that's what I'm trained in. Just fiddling with game design on the side because I love the idea of training agents to learn the world. I feel like C/C++ are the kind of thing that needs to wait until I'm a little more settled, as it seems non-trivial to get to a comfortable place in it.\n\nFastAPI looks neat. I'm toying with the idea of pivoting to web development because most of my community are javascript developer. So FastAPI would be useful in that space, or even just coordinating with my friends projets.\n\nThanks for the offer of support! I'm certain I'm going to get stuck many more times.  I didn't expect such a supportive community, coding has been a remarkably isolated experience thus far. A friendly informed voice is a non-trivial boon.", "id": "j30zcf8", "owner_tier": 0.5, "score": 0.10256410247863247}, {"content": "I've had the best luck with Pyinstaller myself. Especially because the apps I made needed to be cross platform with Win/Mac (and sometimes Linux). It does a good job working on each OS as providing a decent, but large executable. \n\nI started to learn Nim for this very reason. Nim is a language kind of similar to Python, but gets translated to C and compiled. I turned one of my Python scripts into a Nim program and it went from being 67mb to 517kb. \n\nIf size and speed aren't an issue then Pyinstaller will be just fine. Just make sure to create a new virtual environment before installing it. It will include any packages you have installed already which makes the executable even bigger. If you use a virtual environment and only include packages you need it'll be smaller.\n\nI will probably have to learn a compiled language down the line, that's what the other comments are leading more towards as well.\n\nfor now though, larger files sizes are fine. My games are minuscule studies built mostly to help me learn and to encourage friends that making games is possible. However I'm not really sure I understand what you mean by making a new virtual environment. I've never used a virtual environment and wouldn't know where to start. Would you mind expounding on that idea a little further? It sounds like it might be the missing piece for me.\n\nHere's a write up on virtual environments. It looks like a lot, but it's really only one command to create one and one to activate them. https://www.freecodecamp.org/news/how-to-setup-virtual-environments-in-python/\n\nThe basic idea is, you create a virtual environment which creates a new folder wherever you run the command. That folder contains your environment. You then have to \"activate\" that environment (also in the doc I sent). Once it's activated, you have a fresh instance of Python that has no external packages installed. This is good for when you want to use pip but don't want to have it available to all Python apps on your PC. It's a self contained python instance. \n\nPyinstaller includes all packages that are installed so that's why you want to make a virtual environment. If you have 600mb of packages installed those will all install when you run it. Making a venv (virtual environment) you can only install the packages you need for your project. \n\nAlso if you're making games, maybe look at Godot. It uses a scripting language called GDscript that is very similar to Python in syntax. It's free/open source and creates pretty small binaries when you build the project.\n\nAh, I see. that's all fairly sensical. I see why the files I was making were like 1000x times the size of the program I was trying to wrap up now. \n\nI'm fairly cautious about learning another language. I feel like if I'm gonna learn another language I should probably just bite the bullet and learn C++ or C# or something more generalizable.", "id": "j32nj6i", "owner_tier": 0.3, "score": 0.10256410247863247}, {"content": "I will suggest pyinstaller, but raise you one [Auto-py-to-exe](https://pypi.org/project/auto-py-to-exe/). It is a gui frontend that helps you understand and set and save the values for pyinstaller. When I want to update the exe to the new code, I just load the profile that I have found works(rarely need to update the profile, only if assets change), and hit the convert button.", "id": "j33aadt", "owner_tier": 0.5, "score": 0.05982905974358974}, {"content": "What a cool idea! \n\nAnother approach (to packaging) would be to deploy the game as a web app. I believe there are many tutorials to make this relatively straightforward.\n\nThat may be a route I have to take. My next project is to make a reinforcement learning agent to play the game, and the web route might be the best way to show that off anyway. It's just another skill to learn web stuff, so I've been a little cautious.", "id": "j2zp66p", "owner_tier": 0.7, "score": 0.09401709393162393}, {"content": "Nuitka has for years been an attempt to create python executables \"the right way\".\n\nWhat's the right way?\n\nApparently the right way is to translate all the python calls into equivalent C++ commands, then optimise and compile accordingly. Makes for faster running programs.\n\nI think in practice it really does depend on the program itself, but in the developer's site he posts a few videos on his thought process in creating the tool", "id": "j31ehqi", "owner_tier": 0.1, "score": 0.0683760682905983}, {"content": "make sure its prepped for a venv and have requirements, then zip it\n\nOP's explicitly expressed constraint on answers was:\n\n> a single executable file I can send to a friend, such that they won't have to install anything to run it.\n\nYour solution requires that the end-users OP is sending his program to have Python installed already or else have to install Python.\n\nEDIT. Not sure why you're downvoting, feel free to explain. \"I don't want the people I'm sending it to to have to install anything\" is highly likely to imply \"I don't want the Windows users I show it to to have to download a Python installer,\" especially since the title of the topic ends with \"... my friend who does not have Python.\"", "id": "j309ugf", "owner_tier": 0.7, "score": -8.547008495064351e-11}, {"content": "PyInstaller works for me.", "id": "j312tm5", "owner_tier": 0.3, "score": 0.0512820511965812}, {"content": "I would try a bit more with pyinstaller and see if you can get that working.", "id": "j31ax1t", "owner_tier": 0.7, "score": 0.0512820511965812}, {"content": "Pex file? This was the standard for distribution at a few places I've worked, maybe worth a try. \n\nhttps://pex.readthedocs.io/en/v2.1.40/buildingpex.html\n\nThis looks neat, and would be good if I was trying to share with other coders, but I'm hoping to share my little games with the tech illiterate as well.\n\nI would try it out. It should work just like an exe file, but I personally haven't tried it on windows. It's basically an executable zip file that includes python interpreter and all the needed modules.", "id": "j32t7w6", "owner_tier": 0.3, "score": 0.0683760682905983}, {"content": "Try [nuitka](https://nuitka.net) BTW I have used the mentioned here pyinstaller, pex \u2026 last time I needed to this, nuitka worked flawlessly and better than pyinstaller\n\nI'll add it to my list, it sounds like I need to spend some more time reading the Pyinstaller docs. I was getting frustrated so I wanted to reach out and see if I was heading even the right direction before I poured in more effort. Looks like I was!", "id": "j33jqmb", "owner_tier": 0.1, "score": 0.0683760682905983}], "link": "https://www.reddit.com/r/learnpython/comments/103jd0z/how_do_i_package_my_python_code_into_an/", "question": {"content": "Hiya thanks for reading! I followed a tutorial and built a tiny game with pygame. I am trying to wrap it up in a single executable file I can send to a friend, such that they won't have to install anything to run it. I have unsuccessfully used p2exe and pyinstaller. Is there a standard way to package python applications? I can share my code or the tutorials/links I am looking at if that is desirable.\nIn gratitude,\nPrathmun", "id": "103jd0z", "title": "How do I package my python code into an executable I can send to my friend who does not have python?", "traffic_rate": 153.1240740740741}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "reddit"}, {"answers": [{"content": "There are applications like PyInstaller.", "id": "ixxbvpe", "owner_tier": 0.7, "score": 0.99999999990099}, {"content": "Nuitka is an amazing solution to generate executables across any platform. \n\nhttps://github.com/Nuitka/Nuitka", "id": "ixxshwz", "owner_tier": 0.3, "score": 0.603960395940594}, {"content": "cx_freeze for MacOS its like PyInstaller or pytoexe or pytoapp hope this help\n\nIm self-taught too, just keep practicing and researching.", "id": "ixxjqmx", "owner_tier": 0.1, "score": 0.19801980188118812}, {"content": "[here](https://datatofish.com/executable-pyinstaller/) you go\n\nI want to click this, but I\u2019m resisting\n\nI'm sad this was really helpful and not a rickroll.\n\nSafe click. Don\u2019t worry\n\nKeep clicking links, never give up, never let it down...\n\nThanks for taking the risk. How\u2019s your computer? \ud83d\udc40\ud83e\udd23\n\nComputer is fine since I\u2019m on mobile. However\u2026. My incognito history was sent to all my relatives via iMessage\n\n\ud83e\udd23\ud83e\udd23\ud83e\udd23\ud83e\udd23", "id": "ixxcxs0", "owner_tier": 0.1, "score": 0.4158415840594059}, {"content": "The downside to all of the options that package into an exe is I\u2019ve found they are considered suspicious or flagged as a virus by most antivirus programs.\n\nThat's not a downside of Python, any unknown executable can fall to the same fate. The proper way to do it is to sign your executable, however it's a complex process and not free.\n\nI never said that was Pythons fault. \n\nAnd signing the exe doesn\u2019t matter. Maybe it helps with some AVs, but I went this route to try and distribute exes at work at the AV still picked them up as potentially malicious and wouldn\u2019t run it without an override.", "id": "ixysihe", "owner_tier": 0.3, "score": 0.1485148513861386}, {"content": "I use PyInstaller too", "id": "ixyw884", "owner_tier": 0.1, "score": 0.108910890990099}, {"content": "There are more than a few bundler tools.  The programmers here would likely build from source, but there are things like pyinstaller, py2win, and numerous other tools to package for deployment.", "id": "ixz1vxz", "owner_tier": 0.7, "score": 0.108910890990099}, {"content": "Bat files with task scheduler is a great way to schedule it. You basically write the commands to follow in a bat file ( its actually a text file in origin) and use it with the scheduler. You need to write some keywords in scheduelr to open cmd. Then the bat file will do the rest.\n\nOh this is awesome, I\u2019ll look into this. Scheduling program to switch on an auto basis was my next step", "id": "iy0f5mk", "owner_tier": 0.1, "score": 0.11881188108910891}, {"content": "A Python file is, per se, an executable program. I believe you want an executable program with integrated functionality for your OS. Since this is not really an issue for UNIX-based systems, I also believe that your OS is Windows.\n\nThere are tools to turn Python scripts into .exe files that you can easily double click and execute. I would recomend [auto-py-to-exe](https://pypi.org/project/auto-py-to-exe/) for this purpose. Hope it helps! :)\n\n>A Python file is, per se, an executable program.\n\nNo, it's not. It's a text file. Sure, you can call that an executable, but not in the sense OP wants.\n\n> A Python file is, per se, an executable program.\n\nI would not call it that at all.\n\nA python file is a human readable script that an OS is unable to run without an interpreter. The python interpreter is an executable; not the python scripts.\n\n[deleted]\n\nWell, I woudn't know, I'm a UNIX user. Sorry :P", "id": "ixxk05q", "owner_tier": 0.1, "score": 0.4752475246534653}, {"content": "Skip pyinstaller and use auto-py-to-exe", "id": "ixz6f6w", "owner_tier": 0.1, "score": 0.108910890990099}, {"content": "PyInstaller or Auto-py-to-exe. I personally like the second module better.", "id": "ixxqhnv", "owner_tier": 0.1, "score": 0.0990099008910891}, {"content": "Wow guys, thank you! So many replies. Looks auto-py-to-exe is the way to go due to my Windows OS. I will look at everything else too, thank you", "id": "iy1e4cp", "owner_tier": 0.3, "score": 0.0990099008910891}, {"content": "I can report complete success with auto-py/pyinstaller. Thanks guys!!", "id": "iy2uqla", "owner_tier": 0.3, "score": 0.0990099008910891}, {"content": "A .py file is kind of a executable, all you have to do is tell your os to open the file with an interpreter instead of an editor.\n\nExcept that anyone who tries to run it needs Python installed, so it's not ideal if you're trying to share your app or whatever with people\n\nRuntime libraries have to be installed, that's the way it is on operating systems, e.g. DirectX is no different, nobody complains about that.\n\nThe most common solution is to provide a portable python version with the required modules in an exe file, but this is not ideal either.", "id": "ixxd5o2", "owner_tier": 0.7, "score": 0.1287128711881188}, {"content": "Auto-Py-To-Exe", "id": "ixxn564", "owner_tier": 0.1, "score": 0.0990099008910891}, {"content": "# #!/usr/bin/python\n\n\nAdd this to the top of your script. Then run with ./script", "id": "ixzne2e", "owner_tier": 0.5, "score": 0.0990099008910891}, {"content": "The script you write in a plain text file is executable through the Python interpreter that is installed to most systems these days -- given the amount of python in circulation. And given you are using pycharm then it is installed to your system. \n\nSee here https://www.jetbrains.com/help/pycharm/configuring-python-interpreter.html\n\nYou can run your script outside pycharm by giving its name to the interpreter your pycharm is using (or any other python interpreter of suitable version):\n\n     python myscript.py\n\nMost file managers offer a way of associating python scripts with the interpreter so that you click to run a python script in your file manager's listings. \n\nBTW, generally it is a good idea to do *some* work outside an IDE using as few layers of execution as your OS will support. If you are going to distribute your application you do not want to ship it with IDE dependencies.", "id": "iy09oyc", "owner_tier": 0.5, "score": 0.0990099008910891}, {"content": "Step one, learn c++", "id": "ixzm9ck", "owner_tier": 0.3, "score": 0.0693069305940594}, {"content": "Python's not usually used for desktop applications. It's good on servers tho\n\nhttps://wiki.python.org/moin/PythonGames", "id": "ixy2zsv", "owner_tier": 0.7, "score": 0.03960396029702969}, {"content": ".py can work for me qith no issues, even without a compiler", "id": "ixyiw5t", "owner_tier": 0.3, "score": -9.900990918221495e-11}, {"content": "I was just thinking this today. Thanks for posting for me! \n\nI wrote a Twitter API programmer just to analyze some key words for my work place. I was wondering how I could give it to them without them having to open up an IDE or anything and running the .py. like, how do I get it under a button in our intranet or even as a .exe that people can download and just run from their desktop.\n\nI hate executables generally because it's easy to embed additional malicious scripts in them, also since python can be crossplatform, you would want to have it also work on Mac and Linux etc as well.\n\nYou should add a build script with the source so it can package the tool based on it's environment, leveraging one of the many packages afforded to you to wrap up all the packages to 1 executable.", "id": "ixzuaex", "owner_tier": 0.5, "score": 0.108910890990099}, {"content": "Easy solution that does the job:\n.Bat files (now .Cmd files)", "id": "iy0bxge", "owner_tier": 0.3, "score": 0.0990099008910891}, {"content": "!RemindMe 7 days\n\nI will be messaging you in 7 days on [**2022-12-04 21:02:58 UTC**](http://www.wolframalpha.com/input/?i=2022-12-04%2021:02:58%20UTC%20To%20Local%20Time) to remind you of [**this link**](https://www.reddit.com/r/learnpython/comments/z5pde2/how_do_i_go_from_a_py_script_to_an_executable/iy0l73x/?context=3)\n\n[**CLICK THIS LINK**](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Reminder&message=%5Bhttps%3A%2F%2Fwww.reddit.com%2Fr%2Flearnpython%2Fcomments%2Fz5pde2%2Fhow_do_i_go_from_a_py_script_to_an_executable%2Fiy0l73x%2F%5D%0A%0ARemindMe%21%202022-12-04%2021%3A02%3A58%20UTC) to send a PM to also be reminded and to reduce spam.\n\n^(Parent commenter can ) [^(delete this message to hide from others.)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Delete%20Comment&message=Delete%21%20z5pde2)\n\n*****\n\n|[^(Info)](https://www.reddit.com/r/RemindMeBot/comments/e1bko7/remindmebot_info_v21/)|[^(Custom)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Reminder&message=%5BLink%20or%20message%20inside%20square%20brackets%5D%0A%0ARemindMe%21%20Time%20period%20here)|[^(Your Reminders)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=List%20Of%20Reminders&message=MyReminders%21)|[^(Feedback)](https://www.reddit.com/message/compose/?to=Watchful1&subject=RemindMeBot%20Feedback)|\n|-|-|-|-|", "id": "iy0l73x", "owner_tier": 0.3, "score": 0.11881188108910891}, {"content": "Personally, I use the auto-py-to-exe script which you can get by opening up your terminal and doing \n\n>!python -m pip install auto-py-to-exe!<\n\nand do this to open it:\n\n>!python -m auto\\_py\\_to\\_exe!<\n\n&#x200B;\n\nI'm 100% sure there are better alternatives that can do more, but this is what I use", "id": "iy0nv1i", "owner_tier": 0.1, "score": 0.0990099008910891}, {"content": "I would look into pyinstaller. It essentially allows you to package your Python project and it\u2019s dependencies into an executable application and is pretty straightforward!", "id": "iy1ed03", "owner_tier": 0.1, "score": 0.0990099008910891}, {"content": "Use trinket", "id": "iy1lesp", "owner_tier": 0.3, "score": 0.0990099008910891}, {"content": "If you want some basic UI you can use tkinter, and then pyinstaller as mentioned", "id": "iy1n1cj", "owner_tier": 0.3, "score": 0.0990099008910891}], "link": "https://www.reddit.com/r/learnpython/comments/z5pde2/how_do_i_go_from_a_py_script_to_an_executable/", "question": {"content": "As per the title - I apologise if this is a bit basic. \n\nI pretty much use PyCharm exclusively for writing all of my scripts, but how do I advance to utilising them outside of this? As in via (but certainly not limited to) a desktop application/executable you can simply click and run in the background. \n\nI\u2019m 100% self-taught, so my knowledge is extremely limited outside of the actual coding aspect of things.", "id": "z5pde2", "title": "How do I go from a .py script to an executable program?", "traffic_rate": 153.1240740740741}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "reddit"}, {"answers": [{"content": "\nContinuing from the comments.\n\r\nIf we talk about a \"step\", then you are not missing rather adding a few steps. :laugh:\n\r\nIf we talk about the \"point\", then you missed the point of counting the \"overall\" steps needed by each method. The goal of a binary search is to find elements in O(logN) but it requires the data to be sorted to work; otherwise, it doesn't guarantee correct output. \n\r\nIf you end up sorting the array for each search operation, then you end up adding an extra O(N logN) for sorting, for each search. This leads to extra steps in binary search and leading to the incorrect notion that binary search takes extra steps.\n\r\nI hope this helps you understand what I am trying to say.\n\r\nThere are two things that you can do here:\n\r\n1. Sort the data\r\n1. Do not sort the data (and do not add the list.sort either)\n\r\nBut, if you sort the data then binary search is at a huge advantage over a linear search. \n\r\nIf you do not sort the data, then they are both are a random chance with linear search being more accurate and binary search leading to incorrect results at times.\nI said it:Oh, and a quick point, do not name your variables/parameters to list, set or map, which are Python method names. Doing this will lead to problems when you want to create a new list or a map, because Python will continue using your variable and hide the underlying Python keywords.\n", "id": "2_5286470_1", "owner_tier": 0.5, "score": 0}], "link": "https://www.codeproject.com/Questions/5286340/Binary-search-related-issue-in-a-Python-script", "question": {"content": "\r\n\t\t\t    Hi All,\n\r\nI have a question regarding a Python script that related with binary search. Please refer the below brief. The script has built with Python 3\n\r\nHas 3 functions \r\n1. linear_search()\r\n2. binary_search()\r\n3. best_search() - The best_search function compares linear_search and binary_search functions, to locate a key in the list, and returns how many steps each method took, and which one is the best for that situation.\n\r\nThe list does not need to be sorted, as the binary_search function sorts it before proceeding (and uses one step to do so). Here, linear_search and binary_search functions both return the number of steps that it took to either locate the key, or determine that it's not in the list. \n\r\nIf the number of steps is the same for both methods (including the extra step for sorting in binary_search), then the result is a tie. \n\r\nI want to know what should I fill the blank spaces to get the correct answers.\n\nWhat I have tried:\n\nPython\n\r\n<pre>def linear_search(list, key):\r\n    #Returns the number of steps to determine if key is in the list \r\n\r\n    #Initialize the counter of steps\r\n    steps=0\r\n    for i, item in enumerate(list):\r\n        steps += 1\r\n        if item == key:\r\n            break\r\n    return ___ \r\n\r\ndef binary_search(list, key):\r\n    #Returns the number of steps to determine if key is in the list \r\n\r\n    #List must be sorted:\r\n    list.sort()\r\n\r\n    #The Sort was 1 step, so initialize the counter of steps to 1\r\n    steps=1\r\n\r\n    left = 0\r\n    right = len(list) - 1\r\n    while left <= right:\r\n        steps += 1\r\n        middle = (left + right) // 2\r\n        \r\n        if list[middle] == key:\r\n            break\r\n        if list[middle] > key:\r\n            right = middle - 1\r\n        if list[middle] < key:\r\n            left = middle + 1\r\n    return ___ \r\n\r\ndef best_search(list, key):\r\n    steps_linear = ___ \r\n    steps_binary = ___ \r\n    results = \"Linear: \" + str(steps_linear) + \" steps, \"\r\n    results += \"Binary: \" + str(steps_binary) + \" steps. \"\r\n    if (___):\r\n        results += \"Best Search is Linear.\"\r\n    elif (___):\r\n        results += \"Best Search is Binary.\"\r\n    else:\r\n        results += \"Result is a Tie.\"\r\n\r\n    return results\r\n\r\nprint(best_search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))\r\n#Should be: Linear: 1 steps, Binary: 4 steps. Best Search is Linear.\r\n\r\nprint(best_search([10, 2, 9, 1, 7, 5, 3, 4, 6, 8], 1))\r\n#Should be: Linear: 4 steps, Binary: 4 steps. Result is a Tie.\r\n\r\nprint(best_search([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 7))\r\n#Should be: Linear: 4 steps, Binary: 5 steps. Best Search is Linear.\r\n\r\nprint(best_search([1, 3, 5, 7, 9, 10, 2, 4, 6, 8], 10))\r\n#Should be: Linear: 6 steps, Binary: 5 steps. Best Search is Binary.\r\n\r\nprint(best_search([5, 1, 8, 2, 4, 10, 7, 6, 3, 9], 11))\r\n#Should be: Linear: 10 steps, Binary: 5 steps. Best Search is Binary.\n", "id": "5286340", "title": "Binary search related issue in a Python script", "traffic_rate": 0}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "codeproject", "tags": ["Python"]}, {"answers": [{"content": "\r\n    These two lines are incorrect:\nPython\n\r\nfor i in range(0, len(data), 7):\r\n    temp_data = int(data[i:i + 7])\r\n\r\nEach binary part is 8 digits long not 7, so they should be:\nPython\n\r\nfor i in range(0, len(data), 8):\r\n    temp_data = int(data[i:i + 8])\r\n\n", "id": "2_5338413_1", "owner_tier": 0.7, "score": 3.0}, {"content": "\r\n    instead of\n\n\r\nreturn str(''.join(format(ord(i), '08b') for i in data))\r\n\r\nuse\n\n\r\nreturn str(''.join(format(ord(i), '07b') for i in data))\r\n\n\r\nASCII represents 128 characters (the equivalent of 7 bits) with 8 bits rather than 256.\n\nCharacters - Data representation - Higher Computing Science Revision - BBC Bitesize[^]\n\r\nIf you break up the text to 7bit chunks, you have to read it 7 bits at a time, and vice-versa with 8 bits.\r\n", "id": "2_5359640_5", "owner_tier": 0.1, "score": 1.0}], "link": "https://www.codeproject.com/Questions/5338411/Python-binary-string-conversions-gives-wrong-value", "question": {"content": "\r\n\t\t\t    I followed a tutorial on GeeksForGeeks, and this is my code:\nPython\n\r\ndef StringToBinary(data: str):\r\n    return str(''.join(format(ord(i), '08b') for i in data))\r\n\r\ndef BinaryToDecimal(data: str):\r\n    data1 = data                //data1 is unused, no idea why they did this\r\n    decimal, i, n = 0, 0, 0     //n is again unused\r\n    while (data != 0):\r\n        dec = data % 10\r\n        decimal = decimal + dec * pow(2, i)\r\n        data = data//10\r\n        i += 1\r\n    return (decimal)\r\n\r\ndef BinaryToString(data: str):\r\n    str_data = \" \"\r\n    for i in range(0, len(data), 7):\r\n        temp_data = int(data[i:i + 7])\r\n        decimal_data = BinaryToDecimal(temp_data)\r\n        str_data = str_data + chr(decimal_data)\r\n    return str_data\r\n\r\nstring0 = StringToBinary(\"Geeks\")\r\nstring1 = BinaryToString(string0)\r\nprint(string0)\r\nprint(string1)\r\nThis program outputs this:\n \n\r\n0100011101100101011001010110101101110011\r\n #Y,V[!!\r\nWhen it's supposed to print out something like:\n \n\r\n0100011101100101011001010110101101110011\r\n Geeks\r\nWhy is this happening? I write my code the same, just changing variable names.\n\nWhat I have tried:\n\r\nI have tried checking the tutorial multiple times and my code's functionality should be completely identical\r\n\t\t    ", "id": "5338411", "title": "Python binary-string conversions gives wrong value", "traffic_rate": 0}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "codeproject", "tags": ["Python"]}, {"answers": [{"content": "\r\n    No, it's not possible, unless you go via memory in one way or another.\n\r\nLet me explain why: A text file is not line based - it's a binary file that is processed by applications which interpret the binary values as printable and unprintable characters. In the first class are the letters, number, punctuation, special characters (and in Unicode files an enormous number of other characters and language character sets).\r\nAnd in the unprintable characters are some which the app to interprets as an \"end of line character\".\n\r\nSo when you try to insert or delete lines in a file, you can't because files don't \"know\" about lines. The only ways to do it are to read the whole file into memory, modify the memory, and write it back - or read it line by line and write it out to a new file line by line, adding and removing lines as you go through by writing extras to the new file for an \"insert\", or not writing them at all for a \"delete\". When you have copied the file over, you can then close them both, delete the original, and rename the new version.\r\n", "id": "2_5343539_2", "owner_tier": 0.9, "score": 0}, {"content": "\r\n    Why not start at the obvious place: \n7. Input and Output \u2014 Python 3.10.7 documentation[^].\n\r\n[edit]\r\nAnd here is a great tutorial that shows how to create a blog web application:\nTutorial \u2014 Flask Documentation (2.2.x)[^]\r\n[/edit]\r\n", "id": "2_5343540_2", "owner_tier": 0.7, "score": 1.0}], "link": "https://www.codeproject.com/Questions/5343538/How-do-I-manage-file-lines-in-Python-3-10-or-newer", "question": {"content": "\r\n\t\t\t    so yes, here is initial file generated by python:\n\n \n\r\nabcdef\r\nqwerty\r\n\r\nlorum ispum....\n\n\r\nand few things i want to do with it:\r\n1) delete line with  \n\r\nqwerty\r\n2) edit empty line with  \n\r\n123456789\r\n3) insert line between  \n\r\nabcdef and  \n\r\n123456789 with content  \n\r\nsomethingsomething\n\r\nis it even possible in python? or c? (i can move project to other language btw)\n\r\nyes i was googling but no i dont want to put it into ram.\n\r\nbtw these things will just help me doing a bigger project and above thing is just example (irl im gonna write blog engine... code here :  engine/generator.py at main \u00b7 hacknorris-aka-penguin/engine \u00b7 GitHub[^])\n\r\nno im not doing for educational or work reasons, im an indie dev...\n\n\nWhat I have tried:\n\nhttps://stackoverflow.com/questions/10507230/insert-line-at-middle-of-file-with-python[^]\nhttps://stackoverflow.com/questions/4719438/editing-specific-line-in-text-file-in-python[^]\r\nand few other blogs but all were based on stackoverflow answers (loading into ram)\r\n\t\t    ", "id": "5343538", "title": "How do I manage file lines in Python 3.10 (or newer)", "traffic_rate": 0}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "codeproject", "tags": ["Javascript", "Python", "FileIO"]}, {"answers": [{"content": "\r\n    Rather than add to the previous comments I would merely suggest you take a look at some of the Intel Documents[^] which explain their architecture (the platform that Windows generally runs on).\r\n", "id": "2_99136_1", "owner_tier": 0.7, "score": 2.5}, {"content": "\r\n    Have a read of Andrew Tanenbaum's \"Structured Computer Organisation.\" I'd recommend 3rd or later edition if you buy one second hand. Tanenbaum takes the reader from a description of digital circuits (where high and low potential differences represent binary 0s and 1s) and builds on it until he reaches operating systems. Along the way he answers all the questions you've got here AND gives you a pretty good understanding of how computers work.\n\r\nCheers,\n\r\nAsh\r\n", "id": "2_99139_3", "owner_tier": 0.3, "score": 2.5}, {"content": "\r\n    rashidfarooq wrote: \"When there was no language except binary language then the scientists / programmers used which plate form to command the computer using binary language.\"\n\nPunched cards[^] was one way to do it. Manually setting electrical switches another.\n\r\nrashidfarooq wrote: \"And is that plate form exists today?\"\n\r\nThis can probably be a subject for a course in electro mechanics or the like, but not for any commercial use.\r\n", "id": "2_99186_1", "owner_tier": 0.3, "score": 5.0}, {"content": "\r\n    As Christian said, you are totally confused about the \"magic\" of 0's and 1's. A computer doesn't \"understand\" any language, it merely executes operations that are given to it. These operations are in fact bytes (or greater) that corresponds to a code plus arguments (also bytes) depending on the operation. You can write these codes in binary if you want, but then you'll need a binary editor (an editor that only accepts 0's and 1's and store 8 of these digits in one byte). I never heard about a binary editor.\r\nSo, if you try to write your binary code in notepad, each digit will be converted to a full byte depending on its character encoding: a zero has an ASCII code of 48 and a one has an ASCII code of 49 (see here[^]). So, if you write a sequence like this in notepad:\n0 0 1 1, it will be converted in binary to:\n110000 110000 110001 110001 (48 and 49 converted to binary). So, you see that it is totally different than what you expected.\r\nWhat you could do is put 8 bits together and look into the ASCII table for the corresponding symbol and write this one instead. Or you could use an hexadecimal editor.\n\r\nHowever, even if you succeed to write your binary file like that, you will never be able to execute it because it will not be recognized by Windows as a valid executable (it doesn't have the correct header for isntance).\n\r\nSo, to summarize, it is impossible to write in binary (it was something you could do when the first computer was invented but it is not possible anymore now). As Christian said, if you really want to go to the lowest possible level, you have to write in assembler. But if you understand what assembler is, you'll soon realize that it is close to \"binary\".\r\n", "id": "2_99087_1", "owner_tier": 0.5, "score": 1.485}, {"content": "\r\n    The core issue is that you over heard something and you don't understand it at all.  If you type a 1 in to notepad, it's stored as a byte ( 8 bits ) in a text file.  You can't write code in 1s and 0s, the best you could do is write assembler, which is ultimately what applications get compiled to, somewhere.  I suggest you forget this line of questioning, none of the answers will make sense to you, or help you in any way.  No-one writes assembler code if they can help it, and no programmer types 1s and 0s all day long.\r\n", "id": "2_99066_1", "owner_tier": 0.7, "score": 1.166}, {"content": "\r\n    You very well can. However you must understand the basics.\n\r\nWhen you type 1's and 0's in a notepad, they are written and saved as characters i.e. 8 bits (assume ASCII) which itself contains a series of 1's and 0's that are used to represent the characters \"1\" and \"0\".\n\r\nThe real binaries are a different ball game. First, they are not only dependent on the underlying processor but also on the OS that they are supposed to run on. And thats the reason a Windows executable isn't runnable on Linux and vice versa even if both OS are running on the exact same processor.\n\r\nThen, it depends on how you present the binaries to the OS. Every OS has its own format which it considers executable. For Windows, its the PE format. Read about it, understand and learn that format. But what are you going to program? You can't write C there! You got to write in low level code. So, you got to learn assembler for the target processor. Then you must become familiar with the byte encoding of the assembler mnemonics, which, believe me, isn't pretty at all. Then, after all these, get hold of a hex editor. A hex editor allows you you type binary '1' instead of ASCII '1'. Now you are ready to create an executable \"by hand\" and don't forget to save the file with the expected extension, which is \".exe\" for Windows.\n\r\nIf at all you are going to attempt this, before any fancy stuff, get that executable to work, as in, write a \"program\" that is empty and does nothing. And this itself will be really tiresome to accomplish!\n\r\nIts fun no doubt and helps you understand a lot about what exactly makes things run but this is not recommended for office work!\r\n", "id": "2_99086_1", "owner_tier": 0.1, "score": 4.0}], "link": "https://www.codeproject.com/Questions/99063/How-to-execute-a-binary-code", "question": {"content": "\r\n\t\t\t    Dear Friends.\n\r\nAs We Know that the Binary Language ( 0 and 1) is the only language that computer understands directly. But I want to know that If a computer understand binary language directly then where to apply this binary code. \r\nWhich plate form is required to run this code.\n\r\nIf I open a note pad and write 010001001 (for example) then does computer understand it. \n\r\nPlease Explain if some one can.\r\n\t\t    ", "id": "99063", "title": "How to execute a binary code", "traffic_rate": 0}, "saved_time": {"$date": "2024-07-16T02:51:39.288Z"}, "source": "codeproject", "tags": ["C++", "C"]}]}