{"result": [{"answers": [{"content": "the other answers don't account for __name__ becoming __main__ for the program entry point or don't handle it properly. this works for me:", "id": 75178449, "owner_tier": 0.1, "score": 0.021276595531914896}, {"content": "A simple way of retrieving the full module name within its package:", "id": 37476629, "owner_tier": 0.5, "score": -2.1276595615372958e-10}, {"content": "__name__ always contains the full name of the module. (Other than __main__ on main, of course.)", "id": 11705103, "owner_tier": 0.5, "score": 0.999999999787234}, {"content": "Try using the __name__ attribute of the module.", "id": 11705092, "owner_tier": 0.9, "score": 0.08510638276595744}], "link": "https://stackoverflow.com/questions/11705055/get-full-package-module-name", "question": {"content": "For verbose debug messages in my application I'm using a function that returns a helpful prefix. Consider the following example: This outputs: My issue is: When I have a module in a package, for instance 'myproject.utilities.input', the module name returned from get_verbose_prefix is still just 'input', not 'myproject.utilities.input'. This drastically reduces the helpfulness of the prefix in large projects when there can be several 'input' modules in different submodules all working together. So my question is: Is there a simple way of retrieving the full module name within it's package in Python? I'm planning on expanding the get_verbose_prefix function to check for '__init__.py' files in the parent directories of the module to extrapolate it's full name, but first I'd like to know if there's an easier way to do it.", "id": 11705055, "title": "Get full package module name", "traffic_rate": 16}, "saved_time": 1721102448, "source": "stackoverflow", "tags": ["python", "inspect"]}, {"answers": [{"content": "To obtain a reference to the __main__ module when in another: To then obtain the module's file path, which includes its name: If within the __main__ module, simply use: __file__ To obtain just the file name from the file path: To separate the file name from its extension: To obtain the name of a class instance: To obtain the name of a class:", "id": 41233151, "owner_tier": 0.3, "score": 0.32432432418918916}, {"content": "From the comment -- not the question. I am simply curious to see if what I am trying to do is possible. The answer to \"is it possible\" is always \"yes\".  Always.  Unless your question involves time travel, anti-gravity or perpetual motion. Since the answer is always \"yes\", your question is ill-formed.  The real question is \"what's a good way to have my logging module know the name of the client?\" or something like that. The answer is \"Accept it as a parameter.\"  Don't mess around with inspecting or looking for mysterious globals or other tricks. Just follow the design pattern of logging.getLogger() and use explicitly-named loggers.  A common idiom is the following That handles almost all log naming perfectly.", "id": 603460, "owner_tier": 0.9, "score": 0.999999999864865}, {"content": "To get the current file module, containing folder, here is what worked for me:", "id": 55227175, "owner_tier": 0.5, "score": -1.3513513513513513e-10}, {"content": "If you want only the name of the file:", "id": 47097725, "owner_tier": 0.5, "score": 0.06756756743243243}, {"content": "I think what you want to use is the inspect module, to inspect the python runtime stack.  Check out this tutorial.  I think it provides an almost exact example of what you want to do.", "id": 602881, "owner_tier": 0.5, "score": 0.1486486485135135}, {"content": "Using __file__ alone gives you a relative path for the main module and an absolute path for imported modules. Being aware this we can get the module file constantly either way with a little help from our os.path tools. For filename only use __file__.split(os.path.sep)[-1]. For complete path use os.path.abspath(__file__). Demo: Results: If you want to strip the '.py' off the end, you can do that easily. (But don't forget that you may run a '.pyc' instead.)", "id": 41554105, "owner_tier": 0.9, "score": 0.09459459445945946}, {"content": "This should work for referencing the current module:", "id": 7810592, "owner_tier": 0.9, "score": 0.9054054052702704}, {"content": "__file__ is the path of current module the call is made.", "id": 603503, "owner_tier": 0.5, "score": 0.2567567566216216}, {"content": "The \"currently executing module\" clearly is foo, as that's what contains the function currently running - I think a better description as to what you want is the module of foo's immediate caller (which may itself be foo if you're calling a f() from a function in foo called by a function in bar.  How far you want to go up depends on what you want this for. In any case, assuming you want the immediate caller, you can obtain this by walking up the call stack.  This can be accomplished by calling sys._getframe, with the aprropriate number of levels to walk. [Edit]:  Actually, using the inspect module as suggested above is probably a cleaner way of obtaining the stack frame.  The equivalent code is: (sys._getframe is documented as being for internal use - the inspect module is a more reliable API)", "id": 602967, "owner_tier": 0.9, "score": 0.3108108106756757}, {"content": "It's been a while since I've done python, but I believe that you can get access to the globals and locals of a caller through its traceback.", "id": 602968, "owner_tier": 0.9, "score": 0.027027026891891893}, {"content": "I don't believe that's possible since that's out of foo's scope.  foo will only be aware of its internal scope since it may be being called by countless other modules and applications.", "id": 602859, "owner_tier": 0.9, "score": 0.040540540405405404}], "link": "https://stackoverflow.com/questions/602846/how-can-i-access-the-current-executing-module-or-class-name-in-python", "question": {"content": "I would like to be able to dynamically retrieve the current executing module or class name from within an imported module.  Here is some code: foo.py: bar.py: This obviously does not work as __name__ is the name of the module that contains the function.  What I would like to be access inside the foo module is the name of the current executing module that is using foo.  So in the case above it would be bar but if any other module imported foo I would like foo to dynamically have access to the name of that module. Edit: The inspect module looks quite promising but it is not exactly what I was looking for.  What I was hoping for was some sort of global or environment-level variable that I could access that would contain the name of the current executing module.  Not that I am unwilling to traverse the stack to find that information - I just thought that Python may have exposed that data already. Edit: Here is how I am trying to use this.  I have two different Django applications that both need to log errors to file.  Lets say that they are called \"AppOne\" and \"AppTwo\".  I also have a place to which I would like to log these files: \"/home/hare/app_logs\".  In each application at any given point I would like to be able to import my logger module and call the log function which writes the log string to file.  However what I would like to do is create a directory under app_logs that is the name of the current application (\"AppOne\" or \"AppTwo\") so that each application's log files will go in their respective logging directories. In order to do this I thought that the best way would be for the logger module to have access to some sort of global variable that denotes the current application's name as it is responsible for knowing the location of the parent logging directory and creating the application's logging directory if it does not yet exist.", "id": 602846, "title": "How can I access the current executing module or class name in Python?", "traffic_rate": 27}, "saved_time": 1721102448, "source": "stackoverflow", "tags": ["python", "module"]}, {"answers": [{"content": "Use __file__ which gives full path of the module file (if saved to disk) and transform it using os.path functions:", "id": 42891626, "owner_tier": 0.9, "score": 0.999999999090909}], "link": "https://stackoverflow.com/questions/42891533/obtain-just-the-current-modules-name-in-python", "question": {"content": "How can you just obtain the current module's name in Python. Results in output of the form: I just want to print MODULE_NAME", "id": 42891533, "title": "Obtain just the current module&#39;s name in Python", "traffic_rate": 2}, "saved_time": 1721102448, "source": "stackoverflow", "tags": ["python", "module"]}, {"answers": [{"content": "I know this is outdated but I found a simpler solution in Python3 that worked for me. Long story short, there's the object's _spec_ which also stores the actual module name instead of being \"_main_\".", "id": 29971944, "owner_tier": 0.3, "score": 0.9999999992857143}, {"content": "I don't think any of the existing answers actually answer the question directly: how do you get the name of a module when it is run as __main__ ? using inspect for most of the steps... edit: as bluenote10 points out below, if you aren't doing anything whacky with your import paths and module names you can just do inspect.getmodule(obj).__spec__.name", "id": 65195774, "owner_tier": 0.1, "score": 0.2142857135714286}, {"content": "As of python 3.4,", "id": 67403132, "owner_tier": 0.1, "score": -7.142857099446636e-10}, {"content": "Edit: In retrospect, by far the best and cleanest solution is to avoid being in this situation in the first place; if it's your code that is being serialized, move all serializable functions to modules that are loaded by the main program script. This makes the origin of the function retrievable under any and all circumstances, without any need for hacks or special cases.  If that's not possible, I think your original solution (to retrieve the module name from __main__.__file__) is best and simplest. If you are worried about it seeming counter-intuitive for your users, wrap it in a nice function and document what it's for. When you run a module as __main__, python really doesn't associate it with its normal module name: If you import example, it will load the file a second time as if it's a separate module. In fact this probably happens in your case, otherwise you wouldn't be able to find your module by name in sys.modules: Module example and module __main__ really are separate runtime objects, as you'll find out if you explicitly change a module variable in one of them.", "id": 11479342, "owner_tier": 0.9, "score": 0.642857142142857}, {"content": "I actually ran across this same problem.  What I used was: Which is effectively the same as your \"hack.\" Honestly, I think its the best solution.", "id": 12286936, "owner_tier": 0.9, "score": 0.7142857135714286}, {"content": "One way you can do this -- possibly not the best way, but it works for me -- is to import your modules with __import__ and use getattr in a way something like the following. (Here I am using some ideas described in this post about dynamically loading modules.) Where modA.py looks like this: So you can see we're getting the name of the module we've imported and still getting to use the objects and methods inside the module in a normal way. When I run this I get the following: Again, this may or may not be the \"ideal\" way, but it works well and as far as I can tell doesn't entail any undesirable tradeoffs in most cases.  Hope this helps.", "id": 10756835, "owner_tier": 0.5, "score": 0.285714285}], "link": "https://stackoverflow.com/questions/10746128/python-determine-actual-current-module-not-main", "question": {"content": "I'm trying to determine the actual current module of a function (as seen if imported from elsewhere), even if the current module is the \"top level scripting environment\" __main__. It may sound like a weird thing to do, but the background is that I need to serialize a function and unserialize it (including arguments) on a different machine, for which I need to make sure the correct module AND NOT __main__ is imported before deserializing (otherwise I get an error saying AttributeError: 'module' object has no attribute my_fun). So far, I've tried inspection: which gives me  of course. I also tried finding something useful using globals(), no luck. What I really want is <module 'example' from 'example.py'>. I suppose a hacky way would be to parse it from the file name using something like  and then find the module by name sys.modules[m_name]. Is there a cleaner/better way to do this? EDIT:\nAfter learning about ipython's \"FakeModule\" and a bit more googling, I came accross this post, which describes exactly the problem that I'm facing, including my current solution to it (which is explicitly importing the current module import current_module and serializing current_module.my_fun instead of my_fun). I'm trying to avoid this, as it might not be intuitive for the users of my package.", "id": 10746128, "title": "Python: determine actual current module (not __main__)", "traffic_rate": 1}, "saved_time": 1721102448, "source": "stackoverflow", "tags": ["python", "python-module", "inspection"]}, {"answers": [{"content": "PS: see also Sargera's comment", "id": 75713082, "owner_tier": 0.5, "score": -3.787878787878788e-11}, {"content": "If all you need is to get access to module variable then use globals()['bzz'] (or vars()['bzz'] if it's module level).", "id": 70034466, "owner_tier": 0.3, "score": 0.0037878787499999998}, {"content": "According to @truppo's answer and this answer (and PEP366): Reference to \"this\" module: Reference to \"this\" package: __package__ and __name__ are the same if from a (top) __init__.py", "id": 64124377, "owner_tier": 0.5, "score": 0.02272727268939394}, {"content": "You can pass it in from outside: Not ideal but it works for my current use-case.", "id": 46312691, "owner_tier": 0.5, "score": 0.011363636325757575}, {"content": "One more technique, which doesn't import the sys module, and arguably - depends on your taste - simpler: Be aware there is no import. Python imports each module only once.", "id": 45378845, "owner_tier": 0.5, "score": 0.11742424238636363}, {"content": "If you have a class in that module, then the __module__ property of the class is the module name of the class. Thus you can access the module via sys.modules[klass.__module__]. This is also works for functions.", "id": 1676861, "owner_tier": 0.5, "score": 0.06439393935606061}, {"content": "You can get the name of the current module using __name__ The module reference can be found in the sys.modules dictionary. See the Python documentation", "id": 1676868, "owner_tier": 0.5, "score": 0.056818181780303026}, {"content": "", "id": 1676860, "owner_tier": 0.9, "score": 0.9999999999621212}], "link": "https://stackoverflow.com/questions/1676835/how-to-get-a-reference-to-a-module-inside-the-module-itself", "question": {"content": "How can I get a reference to a module from within that module? Also, how can I get a reference to the package containing that module?", "id": 1676835, "title": "How to get a reference to a module inside the module itself?", "traffic_rate": 17}, "saved_time": 1721102448, "source": "stackoverflow", "tags": ["python", "self-reference"]}, {"answers": [{"content": "Simply import a module and print its name using _name", "id": 71815091, "owner_tier": 0.1, "score": -1.6666666565375483e-09}, {"content": "The name of a module as a string is available as its __name__ attribute. This is shown in the Tutorial, by the way.", "id": 71815034, "owner_tier": 0.7, "score": 0.9999999983333333}], "link": "https://stackoverflow.com/questions/71815012/how-to-print-a-module-name-in-python", "question": {"content": "How do you print a module name in Python? I tried to import a module and print it, then it gives me <module 'time' (built-in)>. How to print just the module name?", "id": 71815012, "title": "How to print a module name in Python?", "traffic_rate": 602}, "saved_time": 1721102448, "source": "stackoverflow", "tags": ["python", "python-3.x"]}, {"answers": [{"content": "It might be late to answer, but I didn't found the correct answer for myself.\nThe most closest and precise solution (faster than inspect.stack()) in the python 3.7.x: Pros: Cons: I have an extension to the python:\nHow to import a module given the full path? The extension having wrapper functions for that case: You have to just initialize the extension properly:", "id": 58675095, "owner_tier": 0.5, "score": -4.807692278473697e-11}, {"content": "As previously mentioned, globals gives you a dictionary as opposed to dir() which gives you a list of the names defined in the module.  The way I typically see this done is like this:", "id": 991158, "owner_tier": 0.5, "score": 0.999999999951923}, {"content": "Just use globals() globals() \u2014 Return a dictionary\n  representing the current global symbol\n  table. This is always the dictionary\n  of the current module (inside a\n  function or method, this is the module\n  where it is defined, not the module\n  from which it is called). http://docs.python.org/library/functions.html#globals", "id": 990450, "owner_tier": 0.5, "score": 0.7692307691826923}], "link": "https://stackoverflow.com/questions/990422/how-to-get-a-reference-to-current-modules-attributes-in-python", "question": {"content": "What I'm trying to do would look like this in the command line: How can I get a reference to all the names defined in mymodule from within mymodule itself? Something like this:", "id": 990422, "title": "How to get a reference to current module&#39;s attributes in Python", "traffic_rate": 27}, "saved_time": 1721102448, "source": "stackoverflow", "tags": ["python"]}, {"answers": [{"content": "it does not work in interpreter! since file is meaningless there in the interpreter and is not defined. does not require os module to be imported. Explanation:\nX:\\apple\\pythonabc.py | will output pythonabc.py select the last element after splitting with slashes, then select the first element by splitting it with dot '.'. because first step gives module.py, second step gives 'module' only. __file__ is a unique variable and returns the filepath of current module. Comment any flaws or has any other pitfalls.", "id": 63929766, "owner_tier": 0.5, "score": 0.027777777500000003}, {"content": "Number of options are there to get the path/name of the current module. First be familiar with the use of __file__ in Python, Click here to see the usage. It holds the name of currently loaded module.  Check/Try the following code, it will work on both Python2 & Python3. \u00bb module_names.py Output on MAC OS X: So here we got the name of current module name and its absolute path.", "id": 47585369, "owner_tier": 0.5, "score": 0.3611111108333333}, {"content": "Why does nobody mentioned the .__module__? When doing a self.__module__ you will get the module path.\nYou can also do this outside of the class:", "id": 49880537, "owner_tier": 0.5, "score": 0.027777777500000003}, {"content": "I think you're actually looking for the __name__ special variable. From the Python documentation: Within a module, the module\u2019s name (as a string) is available as the value of the global variable __name__. If you run a file directly, this name will __main__. However, if you're in a module (as in the case where you're using the -m flag, or any other import), it will be the complete name of the module.", "id": 5183989, "owner_tier": 0.5, "score": 0.638888888611111}, {"content": "you should hardcode a.b.c in your help, if you distribute the package as such then that's the way to call it regardless of where a is located in the filesystem, as long as it's on the PYTHONPATH it'll be imported.", "id": 8791330, "owner_tier": 0.5, "score": -2.777777760895914e-10}, {"content": "This works for me: Also if I do python -m b.c from a\\ I get 'b.c' as expected. Not entirely sure what the __loader__ attribute is so let me know if this is no good. edit: It comes from PEP 302: http://www.python.org/dev/peps/pep-0302/ Interesting snippets from the link: The load_module() method has a few responsibilities that it must\n     fulfill before it runs any code: ... So it looks like it should work fine in all cases.", "id": 8789689, "owner_tier": 0.5, "score": 0.9999999997222222}, {"content": "The only way is to do path manipulation with os.getcwd(), os.path, file and whatnot, as you mentioned. Actually, it could be a good patch to implement for optparse / argparse (which currently replace \"%prog\" in the usage string with os.path.basename(sys.argv[0]) -- you are using optparse, right? -- ), i.e. another special string like %module.", "id": 8756960, "owner_tier": 0.5, "score": 0.08333333305555556}, {"content": "When run with -m, sys.path[0] contains the full path to the module.  You could use that to build the name. source: http://docs.python.org/using/cmdline.html#command-line Another option may be the __package__ built in variable which is available within modules.", "id": 5183765, "owner_tier": 0.5, "score": 0.3611111108333333}], "link": "https://stackoverflow.com/questions/5183601/how-to-get-the-current-running-module-path-name", "question": {"content": "I've searched and this seems to be a simple question without a simple answer. I have the file a/b/c.py which would be called with python -m a.b.c. I would like to obtain the value a.b.c in the module level. So when I receive the -h option, I display the USAGE without the need to actually write down the actual value in each and every script. Do I really need to go through inspect to get the desired value? Thanks. EDIT: As said, there are answers (I've searched), but not simple answers. Either use inspect, use of traceback, or manipulate __file__ and __package__ and do some substring to get the answer. But nothing as simple as if I had a class in the module, I could just use myClass.__module__ and I would get the answer I want. The use of __name__ is (unfortunately) useless as it's always \"__main__\". Also, this is in python 2.6 and I cannot use any other versions.", "id": 5183601, "title": "How to get the current running module path/name", "traffic_rate": 18}, "saved_time": 1721102448, "source": "stackoverflow", "tags": ["python", "python-2.6"]}, {"answers": [{"content": "Add the below code in your b.py file then you will get the name of the file which is importing b.", "id": 58319280, "owner_tier": 0.3, "score": 0.0}], "link": "https://stackoverflow.com/questions/58318102/how-to-get-name-of-module-which-tries-to-import-current-modulefirst-import-of-m", "question": {"content": "For an example: there are 2 files\na.py b.py Is it possible to figure out name of module which make fisrt import on another module? Import patching like here is not an option. b.py could be imported in 3rd party modules separately.", "id": 58318102, "title": "How to get name of module which tries to import current module(first import of module) in python 3.x?", "traffic_rate": 143}, "saved_time": 1721102448, "source": "stackoverflow", "tags": ["python", "python-3.x", "python-import"]}, {"answers": [{"content": "There is no more idiomatic method to get the current module object from sys.modules than what you used. __name__ is set by Python on import, essentially doing: so the __name__ reference is exactly what you want to use here.", "id": 20555420, "owner_tier": 0.9, "score": 0.999999999090909}], "link": "https://stackoverflow.com/questions/20555308/get-current-python-module-object-by-name-or-otherwise", "question": {"content": "If I wanted to get the current module, e.g. to reload it, I would do: Is there a better way to do this (e.g. not involving __name__)? Better in this context means more idiomatic, more portable, more robust, or more...any of the other things we usually desire in our software. I use python 2, but answers for python 3 will no doubt be useful to others.", "id": 20555308, "title": "Get current python module object (by name or otherwise)", "traffic_rate": 7066}, "saved_time": 1721102448, "source": "stackoverflow", "tags": ["python", "python-2.7"]}, {"answers": [{"content": "A module _name_ is not an object. It's a name that refers to a module object.\n\nAh, so it's the same as an object name like\n\n    sample = Object()\nwhere sample is a reference to an object of (in this case lol) Object?\n\nDoes it get created the same way under the hood? Like in my example would it be as if doing fibonnaci.fibb() would make an invisible reference to fibonnaci of the form fibonnaci = fibonacci(), or along those lines? Or is it just some special form handled by Python that doesn't get created that way?\n\nThanks\n\nYou can create module objects in a similar way:\n\n    import types\n    fake_module = types.ModuleType(\"fake_module\")\n    fake_module.some_member = 1114111\n\nAs for exactly what the import statement does, it's complicated.  The import mechanisms are written in C, but it does create instances of `ModuleType`.", "id": "dssfmj5", "owner_tier": 0.9, "score": 0.99999999875}, {"content": "`fibonnaci` there is a module object.  Take a look at `type(fibonnaci)`.", "id": "dssrhp0", "owner_tier": 0.1, "score": 0.12499999875000001}, {"content": "It's just a reference to a file that contains references to data, methods or classes. And since a class must be instantiated, and a function does not, why instantiate a function when you don't need to? It would just slow things down because it now needs an id for each instance it is used. The dot operator solves this problem by allowing access to functions and data in a module without instantiating the classes also defined in the whitespace. \nedit: I'm not new but I'm new so I could be off a bit here but I think its right\n", "id": "dsslrfi", "owner_tier": 0.7, "score": -1.2499999924031613e-09}], "link": "https://www.reddit.com/r/learnpython/comments/7qwml6/in_python_is_a_module_name_an_object/", "question": {"content": "I want to understand what a module name syntactically is in Python. For example, if I have a file \n      \n    *fibonacci.py*\n    def fibb():\n        return 5\nand then\n    \n    *random.py*\n    import fibonnaci\n    result = fibonnaci.fibb()\n\nI know that the fibonnaci.fibb() part is of the form modname.func, but what I'm trying to understand is what *thing* in the language the fibonnaci being accessed by the dot *is* on line 3 of the second program. \n        ", "id": "7qwml6", "title": "In Python, is a module name an object?", "traffic_rate": 153.13037037037037}, "saved_time": 1721102448, "source": "reddit", "tags": []}, {"answers": [{"content": "> I'm new to Go. \n\nWelcome!\n\n> I would like to have a short name for the module name, so that when I import a local package, I have a concise name.\n\nActually no. You want to do it like everybody else does it so that your code looks and behaves the same, the existing (and known) tooling works etc. pp.\n\nYour experience with Go, the result you produce, the effectiveness of the tooling etc all will be greater if you do stuff more \"the way it's designed\" and less driven \"by I want\".\n\nI just find the full module name a little tedious, just like you don't always call a person by their full name, and that's why we create pronouns.\n\nThe full module name is used in the import part only and typically managed by your tooling.\n\nWhen are you actually typing the full module path?", "id": "jkbyyrw", "owner_tier": 0.5, "score": 0.9999999994736841}, {"content": "No, it's not really possible. `replace` directives only apply when something is used as a main module (so not for libraries). And you want the module name to be discoverable by go-get, in general.\n\nBut also, why do you care? `goimports` or your IDE should manage your imports for you and you should never have to type them anyways. Like, our import paths are pretty long and inconvenient, but I literally never type them.\n\nI currently use goimports, which is a great tool. However, I personally feel that using `thismod` should be better than using `github.com/myname/app`.", "id": "jkburio", "owner_tier": 0.5, "score": -5.263157862750153e-10}, {"content": "in terminal \"go mod init moduleName\"", "id": "jkbtf93", "owner_tier": 0.1, "score": 0.4210526310526316}, {"content": "I'm not sure what you're asking. If your module is some `github.com/myname/some/really/long/package/path/app` then in your own package you don't need to reference the name at all (except for `package app` at the top of the file) and when you import that package, only the tail end of the package name is used in the code, like `app.MyType{}`.\n\nFor the import statement, you only see it once and you know immediately whether that's your library or a 3rd party library or the standard library. It's a single string on its own line by itself! Let it be explicit.\n\nWhat I mean is totally for the import statement.\n\nAs your example, `github.com/myname/some/really/long/package/path/app`\n\nthe `github.com/myname/some/` normally refer to the module name and the root path, so I just think, why not we have a syntax like this `~/really/long/package/path/app`\n\nwhich does not change anything, but is more concise, and I could easily identify which package is mine, since almost every third part library would start with `github.com/xxx/xxx`\n\nAgain, it's a single line in a file, and literally everywhere else it already uses a short form automatically. Is a single line of code that contains a single string literal the hill you really want to die on?\n\nYou can still easily identify which package is from the same module, because goimports groups them separately from dependencies", "id": "jkcwdl8", "owner_tier": 0.7, "score": 0.5263157889473684}, {"content": "This simpler approach might work better for you.  In the source file that you're including the `github.com/myname/app` try aliasing:\n\n    package example\n    \n    import (\n      thismod \"github.com/myname/app\"\n    )\n    \n    func SomeFn() {\n      thismod.Hello()\n    }\n    \n\nI often do this when I'm using stdlib compatible loggers.\n\n# Update\n\nIf I've misunderstood your question, for instance you're creating a project of multiple Go modules (as opposed to a singular module with packages underneath), then I'll elaborate on the error message.\n\nThe Go module replacement feature, IMHO, is most helpful when you're fixing modules that you don't ordinarily control, for instance writing a pull request for an open source project.  You add the replace line to point to a local copy of a project when you've applied some fixes and wish to build with them.\n\nThe replacement feature supports two modes of operation:\n* local checkout: alias => filesystem path (this is what the tool is inferring what you're trying to do)\n* alternative git repo with an explicit reference (this _should_ be limited to a tag or commit hash, using a branch name will work but will often result in tears of frustration).  This form will have `v...` at the end with a version reference.", "id": "jkbs3mo", "owner_tier": 0.1, "score": 0.36842105210526316}, {"content": "I agree with OP that, much like many other aspects of the language, this design is terribly user-unfriendly, and, while \"consistent\", it is simply extremely annoying to manage absolute module self-references throughout a project.\n\nIt would have been extremely easy to have unambiguous self-imports, and the fact that the language was specifically designed not to have them, will never not be a poor choice.\n\nMind you, I completely disagree with Python-style relative imports. I'm merely referring to some kind of `import /pkg/whatever/else`.\n\nIf you move to another repo, you need to change a million imports, and without an IDE, when making quick changes in Vim, you spend unnecessary time typing out the stupid absolute paths. There's a great reason why no other remotely popular language does this, because the user-experience is straight-up atrocious.\n\n\"The way it's designed\" is most certainly not always the best, nor the most effective, nor the most efficient way.\n\nThis is my cold take after using the language for the past 6 years. The modules were an absolutely necessary addition, of course, and everyone welcomed them, but the self-reference implementation is awful and introduces unnecessary room for typo-squatting, which, given how the compiler automatically handles new dependencies, could easily introduce hilarious malicious code into your programs.", "id": "jrdvwt3", "owner_tier": 0.3, "score": 0.36842105210526316}, {"content": "Welcome. Go is readable by its design. Any feature that could possibly make the code unreadable is unwanted.\n\nAlso note that readability sometimes comes at cost of longer code.\n\nMy intention for renaming is actually for readability, anything starting with `thismod` is in the current module. It is more readable to me than the whole name `github.com/myname/app`. And also easier to write if necessary.\n\n    package github.com/a/b/c/d/e\n\n    import thismod\n\nWhich package does `thismod` imports?\n- github.com/a\n- github.com/a/b\n- github.com/a/b/c\n- github.com/a/b/c/e\n\nWe know the first one is an org or user, so it can't be a module. But the other 3 can, all of them could even be independent modules nested within each other, with different replacement rules and whatnot.\n\nGo's import is explicit so you know what you are getting from looking just at the import, that is why there is no aliasing.\n\nThe replace directive has a different purpose, it is to allow for fixes to be made in forks or local copies and linked in place of the original package.\n\n`thismod` just refer to the root path, normally it would be [`github.com/a/b`](https://github.com/a/b), so if I want to import the following\n\n    github.com/a/b/c\n    github.com/a/b/c/e\n\nmy version is\n\n    thismod/c\n    thismod/c/e\n    \n    // or more concise like this\n    ~/c\n    ~/c/e", "id": "jkc2csh", "owner_tier": 0.3, "score": 0.15789473631578949}, {"content": "This is not possible, and it\u2019s not possible by design - others have covered why, so I won\u2019t rehash it. One of the things you\u2019re going to find as you dive into go, though, is that it\u2019s an extremely opinionated language by design. There\u2019s generally only one right way to do things, and that right way is enforced by either the compiler or the tooling. \n\nIt leads to trade offs sometimes, but it prevents unnecessary cleverness (for the most part), it means that anyone who knows go can generally understand your code, and it means the tooling can easily be as robust as it is (gofmt, goimports, etc, all take advantage of the opinionated nature of go).\n\nI understand the inclination, but this is where the downvotes are coming from - a lot of us have been writing go long enough to balk at someone trying to circumvent go\u2019s opinions, forgetting most folks come from languages with significantly less rules", "id": "jkdcwts", "owner_tier": 0.3, "score": 0.31578947315789474}], "link": "https://www.reddit.com/r/golang/comments/13iul8r/how_can_i_have_an_alias_to_the_current_module_name/", "question": {"content": "I'm new to Go. I would like to have a short name for the module name, so that when I import a local package, I have a concise name. And I tried to do this, but it did not work for me.\n\n    module github.com/myname/app\n    \n    go 1.20\n    \n    replace thismod => github.com/myname/app \n\nError: replacement module without version must be directory path (rooted or starting with ./ or ../)", "id": "13iul8r", "title": "How can I have an alias to the current module name?", "traffic_rate": 48.87912702853945}, "saved_time": 1721102448, "source": "reddit", "tags": []}, {"answers": [{"content": "using ```dir()``` returns attributes in scope for a variety of types, and ```vars()``` returns specifically the ```__dict__``` attribute (so it won't work if there is none). One or the other will usually get you what you want.\n\nI settled with \n\n    import sys\n    \n    module_dict = sys.modules[__name__].__dict__\n\nThis is pretty much exactly what I wanted. ", "id": "e78esng", "owner_tier": 0.5, "score": 0.9999999975}], "link": "https://www.reddit.com/r/learnpython/comments/9lmdts/calling_dict_from_within_a_module_itself/", "question": {"content": "Hello. \n\nI know that I can import a module and get a dictionary of that modules' namespace by calling\n\n    import example\n    \n    print(example.__dict__)\n\nBut how can I do that WITHIN the example module itself? I know I could use globals(), but that contains additional unneccesary stuff. \n\n&#x200B;\n\nFYI I am using this for a game in which I have a sprite factory that reads xml data that has the object name as strings and instantiates objects from it. ", "id": "9lmdts", "title": "Calling __dict__ from within a module itself", "traffic_rate": 153.13037037037037}, "saved_time": 1721102448, "source": "reddit", "tags": []}, {"answers": [{"content": "> says it's not looking where pip installed it\n\nIf you run \"pip -V\" in the cli it will display where pip will install.\n\nIf you run 'import sysconfig; print(sysconfig.get\\_paths()\\[\"purelib\"\\])' it will show where python looks for packages.\n\nIf you know which interpreter you want to use, you can ensure an install will be going to the right place by running \"python3 -m pip install mymodule\" .\n\nbest solution after spending like 3 hours\n\nThank you, had this problem for months and finally fixed it.\n\nBoth the address are coming different.\n\nwhat to do then?", "id": "h6rb0mr", "owner_tier": 0.3, "score": 0.9999999980000001}, {"content": "I know this has already been answered, but just to throw it out here:\n\n&#x200B;\n\nYou can also type \"pip list -v\" in CMD to list locations of all installed packages", "id": "jhnapyf", "owner_tier": 0.5, "score": -1.999999987845058e-09}], "link": "https://www.reddit.com/r/learnpython/comments/osvtik/python_cant_find_module_even_after_pip_install/", "question": {"content": "I'm trying to import/use an ETL package, PETL, with    \n`import\u00a0petl\u00a0as\u00a0etl`\n\nI did \n\n`pip install petl`   \nfrom my project's root library; it appeared to install fine but VSCode is telling me it can't find the module; and when I try to run it from the terminal there it gives syntax error   \n\n\nI'm using python 3.7; I don't think I have multiple versions of python installed, but not sure how to check that    \nthis seems to be a relatively common problem; a quick google answer says it's not looking where pip installed it    \n6 months ago I installed pymssql, am using that in the same script, and am able to find that fine (I'm just now getting back into a small python project)", "id": "osvtik", "title": "Python can't find module, even after pip install", "traffic_rate": 153.13037037037037}, "saved_time": 1721102448, "source": "reddit", "tags": []}, {"answers": [{"content": "> In this course I'm doing, I've learned that when invoking a function, I should use the phrase \"if name == 'main'.\n\nThat's not what you should do. What you should do is get into the habit of putting your script's entrypoint under this *guard*, so that it doesn't execute if your script is imported as a module.\n\nThat's all it does - if your script is executed rather than imported, the variable `__name__` is set to \"main\". Because it's the entrypoint, or *main* module. If your script is imported as a module the variable `__name__` is set instead to the module name of the script.\n\nAbsolutely agreed, but I hate typing `if __name__ == \"__main__\":`. A new developer is wondering why one is quoted and the other is not. They're wondering what's happening with the weird pre- and postfix double-underscores. Oh, and they've misspelled it as `\"_main_\"` and it's silently failing and they have no idea what's going on.\n\nThis is such a common idiom that I would love to see it pushed into the language itself:\n\n    # not a great name, but showing the idea\n    if running_as_script():\n        ...\n\nI think that would be less fiddly and also easier for newer developers to understand. Plus, if it's misspelled, it's a compile error, not a silent runtime failure.\n\nThe best explanation I've encountered so far. Simple, explicit and it does not repeat itself.\n\nIs that two underscores or three?\n\nFor me, in some games I make I have one program execute another, so I don't use this much. But sometimes, yeah, it's useful.\n\nHonestly it seems like it would clear up a lot of confusion. \n\nI was thinking something like 'if not_running_as_module()', but that might just be odd.\n\n2, it's called a \"dunderscore\"\n\nMaybe written as `if not running_as_module():`? But yeah, still odd.\n\nOr this:\n\n    import sanemain\n\n    # lots of code\n    def MAIN():\n        # only called if __name__ == '__main__'\n\n*Edit*: Or doing it as a decorator:\n\n    @main\n    def any_function_name():\n         ...\n\ndecorator is the best one, but it should probably be called something other than `main`, because most people will call their main function, well, `main`\n\nBoth approaches would require teaching python interpreter to look for a function with main decorator and executing it. But what if there are no functions with decorator? Or what if there is, but also there's top level code written? What should be executed first? Main function or top level code?\n\nIt all brings a lot of ambiguity that should be avoided by the language, so I think the current approach is the most python way to do it - straightforward and simple (from technical perspective) with no room for ambiguity", "id": "l2s3scc", "owner_tier": 0.5, "score": 0.9999999999593495}, {"content": "You only need to use this if you get into writing libraries that will get included in other programs.\n\nWhen you write code outside a function or class then it gets executed as the main program right? What if a library file that you included actually had some code like that in it? It would get executed as main program which would be really confusing.\n\nThis construct guards against that. If you put your main program inside this if statement then it will get executed if it is in the file being run, but not if it is in a file being included.\n\nIf you are really advanced you can use this to include self testing code in your libraries. Running the library file directly will run the self test code. But when your library is included it gets skipped.\n\nIf you're really advanced you're using proper testing, not what you just wrote here.", "id": "l2s6y54", "owner_tier": 0.9, "score": 0.13008130077235772}, {"content": "[https://realpython.com/if-name-main-python/](https://realpython.com/if-name-main-python/)", "id": "l2s0bte", "owner_tier": 0.7, "score": 0.10162601621951219}, {"content": "> Can't I just call it without my function being under an if statement?\n\nYou can. Try it. However, if you import that file as a module - for example, to reuse the class it contains - the code will execute and you normally wouldn't want that behavior", "id": "l2s1ssp", "owner_tier": 0.1, "score": 0.06504065036585366}, {"content": "Any code under that will run only if you\u2019re running the script directly. That way, if you import that module from another script, it won\u2019t automatically run the code under the block. It\u2019s a safe guard to ensure the code doesn\u2019t run when importing the script into another script.\n\nBest, and most succinct, explanation here. Thank you!", "id": "l2sew7n", "owner_tier": 0.1, "score": 0.06097560971544715}, {"content": "People have given great answers but I would like to provide just  a small real life usecase that will help new programmers. Let's say you are writing a set of functions and that will be reused in another \"main\"(`main.py` for eg) calling python file. But usually, you want to run each function once in `func1.py`,  and see how it runs, do testing tweak it then you can just put the testing and other codeblocks under `if __name__ == '__main__':`\n\nThis means when you run `func1.py`, the code under the `__main__` block gets executed. But it won't run when the function is inside `main.py` and `main.py` is executed.", "id": "l2seo6r", "owner_tier": 0.5, "score": 0.02439024386178862}, {"content": "I've always disliked this soft requirement. In my opinion it's a poorly thought out oddity that can be confusing to new programmers much like using underscores to denote \"private\" functions or methods, since Python lacks that feature entirely.\n\nThis is a wart in Python, an ugly weirdness that is unusual in a language that mostly is well designed and easy to understand.  It all makes sense but I feel bad for people new to programming who have to figure out what's going on. (I've been programming for 45 years and have opinions.)\n\nI wouldn't say it's poorly thought out, it's just that whole early/mid-90s generation of interpreted languages (php, ruby, python, javascript) was coming on the heels of perl and bash scripts. Their focus was wildly different from ours nowadays, so good design decisions in one domain can seem like oversights in another. It's mostly from pure dumb luck that arguably the least well thought out of that generation (JavaScript) became so popular, even server-side, because it stumbled upon how valuable first class functions and event driven architectures would become. Turns out writing a scripting language originally meant to sit inside onClick attributes satisfies those requirements.\n\nIf we had something like`runtime.on(\"load\", module=this, fn=my_entry)` that would make more sense for a large app but would be silly to see in a shell script.", "id": "l2s9flk", "owner_tier": 0.3, "score": 0.02845528451219512}, {"content": "People here have provided some great answers but this is how I like to think about it:  \n  \nIf I run this file, anything below if name = main is the code I want to execute. Everything above is preparing for the code below to run (or to be referenced in another file). \n\nSo the whole function or application would live above, and I\u2019d call the function (that triggers the rest above) below.\n\n I\u2019m sure there are better ways to think about it.\n\nBest beginner answer\n\nI got the gist of it from everybody else. But this is the true explanation for a beginner. Thank you for your answer.", "id": "l2s9cwj", "owner_tier": 0.5, "score": 0.02845528451219512}, {"content": "Had a similar question when I was taking CS50p. It was explained alongside unit testing with pytest.\n\nEssentially, we had to create a separate py file that imported the functions we coded in the main py file. Without the if statement in main py, pytest would run the entire main py, when we really only want to test the functions we wrote in main py.", "id": "l2sh5cs", "owner_tier": 0.3, "score": 0.020325203211382113}, {"content": "Create two files, \u201cfile_a\u201d and \u201cfile_b\u201d. In file_a, write `print(1)`. Import file_a into file_b. See what happens. Afterwards, put the if statement guard in file_a and import file_b. See what happens. This is what cleared it up for me a long time ago.", "id": "l2t2x4r", "owner_tier": 0.1, "score": 0.012195121910569106}, {"content": "If you import a function from a different program you wrote, it stops that from running Main() and only imports to function without calling it.", "id": "l2sy501", "owner_tier": 0.1, "score": 0.012195121910569106}, {"content": "I an trying to write the shortest answer:\n\nYou can import your .py file in other .py files to use the functions. If your imported file's code (except functions and else) is not under \"if name..\", the code would also run instead of just giviny access to functions.\n\nTry it. You can understand better with experience.", "id": "l2su52u", "owner_tier": 0.3, "score": 0.008130081260162602}, {"content": "Sometimes when you import a Python script you don't want some things to run, so you can regulate this with that check.", "id": "l2uey3n", "owner_tier": 0.5, "score": 0.008130081260162602}, {"content": "I'll start from the very bottom.\n\nTry: `print(dir())` it gives you the _namespace_ of things you currently have. There's not much there if that's the first line of code.\n\nTry `import math` and then try  `print(dir())`. Try also `from math import *` or `from math import sqrt` and the again  `print(dir())`.\n\nYou can see that the contents of `dir()` change. That's everything you currently can use. Okay, now let's look at the listing. There is a thing called `__builtins__`. Let's try\n\n`print(dir(__builtins__))`\n\nOk, now we have another list, with all the built in functions, like int(), input(), min, max, and all the exceptions and errors. Neat.\n\nBut okay, there is the file `__name__` ! So it's a thing we can use. Try:\n\n`print(__name__)`\n\nThat's the name of the current program, or rather the current module. That should be called `\"__main__\"`. But now, if you create a file called `something.py` and put a line there: `print(__name__)`\n\nAnd then create another file, and put in this line:\n\n`import something`\n\nIt actually runs the something.py. But the `__name__` that you printed shows something else now.\n\nThat's the name of the other module. \n\n\nThe `if __name__ == \"__main__\":` is just checking, if the variable contains text `\"__main__\"`. This is the way of checking, if the file is ran as is, or if the file is imported.", "id": "l2tm0vu", "owner_tier": 0.1, "score": 0.004065040609756097}, {"content": "I\u2019d just like to add, my mentor got me in the habit of using if __name__ == \u2018__main__\u2019: and while I didn\u2019t really know what it did at the time, one reason I like it is that it visually separated out the portion of code that actually gets called, especially in longer files.\n\nI was getting a little confused if we had a ton of functions up top and then just a one or two line call at the bottom, but I think this is a good way to further organize your code for later reference.", "id": "l2ur5fx", "owner_tier": 0.3, "score": 0.004065040609756097}, {"content": "The purpose of this convention will become more clear once you begin to write multi-file applications of python. Essentially, the line in your title will only evaluate as True in the case where you\u2019ve executed that file specifically.\n\nIf you have a multi-file application, you will only have one file where the parameter _ _ name_ _ is equivalent to the string \u2018_ _ main _ _\u2019, therefore ignoring certain statements in the other accompanying .py files.", "id": "l2v8z9m", "owner_tier": 0.3, "score": 0.004065040609756097}, {"content": "tons of youtube videos about that:  \n[https://www.youtube.com/results?search\\_query=\\_\\_main\\_\\_](https://www.youtube.com/results?search_query=__main__)", "id": "l2vpag5", "owner_tier": 0.5, "score": 0.004065040609756097}, {"content": "It's probably more confusing than helpful for a newbie. I wouldn't do it until the need becomes apparent.", "id": "l2vxkas", "owner_tier": 0.3, "score": 0.004065040609756097}, {"content": "I kinda think they should use import to control that\nLike if you want to run codes in the import files\nYou can write \"import a as b -w\" w means whole.", "id": "l2t0n3c", "owner_tier": 0.1, "score": -4.065040650406504e-11}], "link": "https://www.reddit.com/r/learnpython/comments/1cl8f9t/what_does_if_name_main_do_exactly/", "question": {"content": "[deleted]", "id": "1cl8f9t", "title": "What does if __name__ == '__main__' do exactly?", "traffic_rate": 153.13037037037037}, "saved_time": 1721102448, "source": "reddit", "tags": []}, {"answers": [{"content": "means code under that if name bla bla will only run WHEN that script is run directly.\n\nNOT when it's called as an import.\n\n(when importing all the code will run.. UNLESS it's under one of them if \\_\\_name\\_\\_ blocks)\n\n    #nerd.py\n    \n    me = \"NERD\"\n    \n    if _name__ == \"__main__\":\n        me = \"NOT A NERD\"\n        print(me)\n\nrun that file directly.\n\nand then run this.\n\n    #nerdy.py\n    import nerd\n    \n    print(nerd.me)\n\nOk that makes sense to me now, thanks lol.\n\nWell done simply explaining one of the more difficult concepts succinctly.  I have been using this for 3 years without understanding this!\n\nGreat example. But your name should have two underscores in prefix.\n\nYou shoul\u2019ve asked sooner, lol.", "id": "joe00u7", "owner_tier": 0.3, "score": 0.9999999999122807}, {"content": "The symbol `__name__` is a build in constant of the type `str`. It is hence predefined without ever being assigned in you code or imported.\nWhen you code is executed directly aka being called using `python yourscript.py` or `./yourscript.py`, the value of `__name__` will be assigned the string `\"__main__\"`. If it is a module imported via `import mymod`. `__name__` will be assigned the string `\"mymod\"`.\n\nThe line you mentioned will hence just check if `__name__` is `\"__main__\"`. If thats the case the the if body is executed. Hence you can use it to write some stuff that will not be executed, if you import you code as a module.", "id": "joe3bjo", "owner_tier": 0.7, "score": 0.11403508763157894}, {"content": "[Here's the docs!](https://docs.python.org/3/library/__main__.html#module-__main__)\n\n> `__main__` is the name of the environment where top-level code is run. \u201cTop-level code\u201d is the first user-specified Python module that starts running. It\u2019s \u201ctop-level\u201d because it imports all other modules that the program needs. Sometimes \u201ctop-level code\u201d is called an entry point to the application.\n\n[This is a special case compared to the other modules that get imported](https://docs.python.org/3/reference/import.html#special-considerations-for-main).\n\n---\n\nA file with just a bunch of classes and functions is a *library*, which another program can import. A file that also executes toplevel code is a *script*, which is meant to be executed as a program.\n\nHaving a conditional block of `if __name__ == \"__main__\"` allows you to have both - a file that functions as a library when imported and runs as a script when you execute it directly.", "id": "jofpg89", "owner_tier": 0.9, "score": 0.10526315780701753}, {"content": "As for the second question: in python, if you write a class, all of the class\u2019s variables can be accessed. \n\nBut what if you had a class to convert from Celsius to Fahrenheit? The ratio might be in the class but if someone else was using the class they could change it and it would break. How do you communicate that it\u2019s not to be messed with?\n\n\nIn Python the convention is to put _ or __before the name. If you spot a variable in a class with that, probably best to leave it alone.\n\n\nThere\u2019s more to it than that but it\u2019s the gist. Also there are some other special things in classes that get __ before and after. It might be fun to dig into that if you\u2019re writing lots of classes now.\n\nThanks a lot, that helps!", "id": "jogo3op", "owner_tier": 0.7, "score": 0.061403508684210524}, {"content": "I did a little 5 minute video on this, trying to explain its with a simple example.\nHope this helps!\n\nhttps://youtu.be/oUaeSSq03Mk", "id": "jogy4om", "owner_tier": 0.1, "score": 0.04385964903508772}, {"content": "When a script is run, and the script imports py files, different \\_\\_name\\_\\_ values are assigned to the script and the imported py files.  \n\nwhere \"\\_\\_main\\_\\_\" is assigned to the running script, and different \\_\\_name\\_\\_ values are assigned to the imported files.  \n\nAlso, importing py files will automatically execute their contents. If you put the \"if \\_\\_name\\_\\_\" statement in each of the imported py file, the file will check its own \\_\\_name\\_\\_ value first. Since the \"\\_\\_main\\_\\_\" is only assigned to the running script, that means the imported py files will stop executing after the if-statement.", "id": "jof46c9", "owner_tier": 0.3, "score": 0.035087719210526315}, {"content": "Say if you have a module [script] that invokes others according to the parameters given or received, then the main doesn\u2019t matter.. The great thing about that though is that with that feature, you can now have specific actions ran if something causes that \u201cmain\u201d script to run.\n\na runs, a turns b on, b invokes main\u2026 Now main, instead of having a sequence to go off of or other scripts, it could act as a loop system or a way to even stop the sequence.\n\nIf b invokes main, it has to run the script directly instead of playing module leap.\n\nDoes that help? Also see m0us3_rat\u2019s post to clarify more.\n\nIf you want more info, please ask. If not, have a good one!", "id": "jofb84j", "owner_tier": 0.1, "score": 0.035087719210526315}, {"content": "The \\`if \\_\\_name\\_\\_ == \"\\_\\_main\\_\\_\"\\` condition is used in Python to determine whether a script is being run as the main program or being imported as a module. It allows you to write code that will only run when the script is executed directly.\r  \n\r  \nTo understand it better, let's break it down:\r  \n\r  \n\\- \\`\\_\\_name\\_\\_\\` is a built-in variable in Python that stores the name of the current module. When a Python file is executed directly, the value of \\`\\_\\_name\\_\\_\\` is set to \\`\"\\_\\_main\\_\\_\"\\`. When the file is imported as a module into another script, the value of \\`\\_\\_name\\_\\_\\` is set to the name of the module.\r  \n\r  \n\\- The \\`if \\_\\_name\\_\\_ == \"\\_\\_main\\_\\_\"\\` condition checks whether the value of \\`\\_\\_name\\_\\_\\` is equal to \\`\"\\_\\_main\\_\\_\"\\`. If it is, it means the script is being executed directly, so the code inside the \\`if\\` block will be executed. If it's not equal to \\`\"\\_\\_main\\_\\_\"\\`, it means the script is being imported as a module, so the code inside the \\`if\\` block will be skipped.\r  \n\r  \nThe purpose of using this condition is to allow certain code to be executed only when the script is run directly, but not when it is imported as a module. This can be useful when you have some code that should only be executed when the script is the main entry point, like running tests, performing initial setup, or calling specific functions.\r  \n\r  \nRegarding the use of underscores for unused variables, it's a convention in Python to indicate that a variable is intended to be ignored. By convention, a single underscore \\`\\_\\` is used for such variables. It serves as a visual cue to other developers that the variable is intentionally not being used in the code.\r  \n\r  \nWhile it's true that you could simply not declare the variable if you don't intend to use it, there might be cases where the variable is required as part of a function signature or when unpacking values from an iterable, but you have no use for that specific value. In such cases, using an underscore indicates that you are aware of the value but choose not to utilize it. It helps improve code readability and signals your intent to other programmers who might read or maintain your code in the future.", "id": "jofhq9x", "owner_tier": 0.1, "score": 0.035087719210526315}, {"content": "When you run a Python script, Python gives that script a name and stores it in the variable __name__. \n\nSo try a few things:\n\nCreate a file a.py and b.py and have them both just contain `print(__name__)` and run each. What do they print?\n\nNow have a.py import b.py and see what it prints. \n\nYou can use the name to know if a file is run as the main script or imported. Using that information you can make your script act differently depending on if it\u2019s imported or run directly.", "id": "jogj15o", "owner_tier": 0.1, "score": 0.035087719210526315}, {"content": "> While on that note I also want to know why some people list variables as an underscore meaning they aren't to be used, why not just not declare the variable if you won't use it?\n\nBecause you need something else that's returned at the same time.\n\nSay you have a function that returns two values (or technically, a tuple of two values). You can assign both of them:\n\n    first, second = foo()\n\nIf you only care about one of them though, you can indicate via underscore convention that you're throwing the other away:\n\n    first, _ = foo()\n    # or:\n    _, second = foo()", "id": "john631", "owner_tier": 0.7, "score": 0.035087719210526315}, {"content": "Save a .py file that just has:\n\n    print(__name__)\n\nThen run the file.\n\nThen run python and import the file.", "id": "joevc82", "owner_tier": 0.5, "score": -8.771929771250255e-11}], "link": "https://www.reddit.com/r/learnpython/comments/14b5vww/how_does_if_name_main_work_ive_tried_to_look_at/", "question": {"content": "I've watched many videos over and over, read forums, and gone to w3schools but the explanation just seems like spaghetti to me and I lose what they mean (ive been studying python/programming for a few months). Can someone explain in the simplest way possible what it is for?\n\nWhile on that note I also want to know why some people list variables as an underscore meaning they aren't to be used, why not just not declare the variable if you won't use it?", "id": "14b5vww", "title": "How does if __name__ == \u201c__main__\u201d work? I've tried to look at so many sources but my brain just doesn't get it.", "traffic_rate": 153.13037037037037}, "saved_time": 1721102448, "source": "reddit", "tags": []}, {"answers": [{"content": "Why?\n\nI have a bunch of rather long modules that use imports of the format \"from parent\\_directory.module import function\", and as I don't feel like either rewriting every import or adding each subcomponent to an \\_\\_init\\_\\_.py, it this seemed like a good solution. Plus I think it's fun, you always learn more when you stray from the norm.", "id": "gcgoqz1", "owner_tier": 0.9, "score": 0.9999999900000002}, {"content": "This makes brittle, non-re-usable code. Don't.", "id": "gch8pd9", "owner_tier": 0.5, "score": 0.9999999900000002}], "link": "https://www.reddit.com/r/learnpython/comments/juzkmc/how_to_find_what_module_imported_current_module/", "question": {"content": "Say you have module A which imports module B, how can module B find out what it was imported by?\n\nI've tried a few different methods, inspect being the most effective so far, but I'd rather do without it if that's possible. If it's not possible to do it without inspect then it'd be great to just find a method that works consistently (ex. my current method works from the terminal but not IDLE).\n\nEdit: My current method is \ninspect.getframeinfo([i for i in inspect.getouterframes(inspect.currentframe()) if \"frozen importlib._bootstrap\" not in i.filename][1][0])[0]", "id": "juzkmc", "title": "How to find what module imported current module", "traffic_rate": 153.17222222222222}, "saved_time": 1721102448, "source": "reddit", "tags": []}, {"answers": [{"content": "The `-m` flag searches your shell PATH for module and runs the contents, typically the `__main__.py` file. You typically would not run a file as a module, such as the example you included. Instead, if you ever install a package via pip, then want to execute it via CLI instead of through another python script, you can invoke it via this `-m` flag. I hope this helps clear up some misconceptions you may have.\n\n&#x200B;\n\nHere are some of the relevant docs which explain this better than I do. \n\n\\[[Python -m docs](https://docs.python.org/3/using/cmdline.html#cmdoption-m)\\]\n\n\\[[Python \\_\\_main\\_\\_ docs](https://docs.python.org/3/library/__main__.html#main-py-in-python-packages)\n\nI see, thanks! I had no idea a \\_\\_main\\_\\_.py file even existed", "id": "ihij9sw", "owner_tier": 0.3, "score": 0.9999999985714284}, {"content": "As u/jarulsamy said, it's a way you can run a CLI interface to a module, instead of importing it and writing your own code to use it.\n\nIf you just give it a package name (eg, rich, requests), then it will find that package and run the `__main__.py` file in that package. But if you give it an actual script name, it will run that script as if you'd just run it directly.\n\nA good example is the [Rich](https://rich.readthedocs.io/en/stable/) module's \"demo\" feature. For example, you could read the doco on `rich.prompt` and write your own code; or just run `python -m rich.prompt` from the CLI and see the author's example / demo. The `-m` there is basically finding \"rich\" in your system path (which would be your local Python site library / virtual environment) and then running the \"[prompt.py](https://prompt.py)\" code there as the main script.\n\nSo, instead of having to type `python /really/long/system/path/you/wont/remember/rich/prompt.py`, Python does the work for you and finds the Rich module in your path.\n\nI see, thanks!", "id": "ihil7tk", "owner_tier": 0.1, "score": -1.428571419889327e-09}], "link": "https://www.reddit.com/r/learnpython/comments/w79p95/python_m_flag/", "question": {"content": "What actually happens when python imports a package using python -m flag? Does it bring the module into your current directory?\n\nFor instance, what is the difference between python [hello.py](https://hello.py) vs python -m [hello.py](https://hello.py).\n\nI tried reding it up on sites like quora, but I didn't really understand the explanations all too well.", "id": "w79p95", "title": "python -m flag", "traffic_rate": 153.17222222222222}, "saved_time": 1721102448, "source": "reddit", "tags": []}, {"answers": [{"content": "You left out the command. It's supposed to be:\n\n    if __name__ == \"__main__\":\n        main()\n\nThis translates to: \"if this file was run directly (not imported), then run the 'main()' function.\"\n\nI might add, this is useful because you can add tests for your code easily, by putting them into a main function, and they'll run every time you're using the code directly (and you're more likely to be making changes, therefore needing tests) and when you're importing the file it will not run these tests. Another use is if you have some complex code that defines some classes and functions, and then uses them. If you didn't have the `== __main__` bit you couldn't import that file and use the classes and functions without running the rest of the code (though you should probably be putting them into a separate file anyway). So I wouldn't be surprised if you start using them too! \n\nFor claiming to be so clear, I feel like Python has a whole lot of magic constants you just sorta need to know.\n\nPython is incredibly clear *in comparison to other programming languages*. \n\nIf you want to learn about the 'magic methods', aka the 'dunder' methods, you can [read this](http://www.rafekettler.com/magicmethods.html), but for most applications you don't need them. ", "id": "cy0aqv7", "owner_tier": 0.7, "score": 0.9999999989999999}, {"content": "I'm going to assume you know about objects attributes.  When you import a module, say the `math` module, if you do (at a Python prompt)\n\n    >>> import math\n    >>> print(math.__name__)\n    math\n\nThe `__name__` attribute is the name of the module. However, when you run a program directly, instead of importing it, it gets a special `__name__` attribute called `\"__main__\"`.    Without a module, you can simply query the `__name__` attribute without prefixing it by the module name itself.  So, by checking to see if the `__name__` attribute has been set to `\"__main__\"` or not, you can determine if the module has been imported by another module/program, or if it is the script that was first executed.", "id": "cy0eowj", "owner_tier": 0.5, "score": 0.599999999}, {"content": "A Python program consists of one or more modules.  A module is just a namespace: a set of names and their corresponding values.  The main module is the module that was invoked.  For example, if you run `python foo.py`, then `foo.py` is the main module.  But you could also use `foo.py` not as the main module by importing it from another module with `import foo`.\n\n`__name__` inside a module is the name of that module.  If it's the main module, its name will be `'__main__'`.  The test in your example is checking to see if the current module is the main module.  If so then presumably you're going to take some action.\n\nThis idiom is used to write a script that can both be used as a standalone script but can also as a support library that can be imported by other scripts.  But in the latter case you just want the functions and other symbols to be made available for use, you don't want to take any action.  Importing a module should generally not cause anything to happen, other what's needed to initialize the module.  If you made a to-do list program for example that displays a users list of items and asks for input, you wouldn't want any of that to run if the script was imported by another module.  You'd just want the functions that you defined for adding and removing to-do items to be callable from elsewhere.\n\nEdit: I'd like to add that if you are *not* doing what I just described, you should not slavishly copy this line into every script you write.  It's perfectly fine to write a Python script that does not have a `main()` and just contains code that is run from top to bottom.  If you later decide that you want to import that script for use in another script, you can easily stick the whole thing in a `main()` function and add this idiom.  There's nothing worse then cargo cult programming where people add things to their code that don't apply or that they don't understand because someone else told them they should be doing it.\n\nIs there even a reason besides quick testing and using multiprocessing to use the `if __name__ == \"__main__\"` idom?\n\nOften it looks like that was introduced for the people that comming from java and need an entry point.\n\nThere can be many reasons....  I wrote a few programs that do text transformation.  I can run them from the command line, giving them a file as an argument\n\n    $ python transform.py some_file.txt result.txt\n\nin which case I will use the `if __name__ == \"__main__\"` idiom to do the file handling, or import this module from another program, and only use the text transformation.\n\nFor my programming style this would be a reason to refactor the core functionality into an extra util module. But my scripts are kinda simple so i can't say this is practical for larger projects.\n\nRight, but you might still want to run some default functionality when the script is run directly. You don't need to separate it into \"library\" and \"tiny script that uses library\".  \n\nFor example I have a reddit bot that checks for new posts in a subreddit. I can do it on demand by running the script which has an `if __name__ == \"__main__\"` or I can import that file and use it as a library. The code inside `main()` is 3 lines long so it would be pretty silly to pull it out.", "id": "cy0m7qs", "owner_tier": 0.7, "score": 0.699999999}, {"content": "In English, allows you to change what happens when the script is run and when it is imported. \n\nWhen you import a file, the interpreter actually runs the code in the file. Using `if __name__ == \"__main__\":` is a way to hide code from this automatic process. Code inside that block will run when that file is run, and not when it is imported. ", "id": "cy150xr", "owner_tier": 0.9, "score": -9.99999993922529e-10}], "link": "https://www.reddit.com/r/learnpython/comments/3x00vd/what_does_if_name_main_mean/", "question": {"content": "what's \n\n    if __name__ == \"__main__\":\n\nin english?", "id": "3x00vd", "title": "what does if __name__ == \"__main__\": mean?", "traffic_rate": 153.17222222222222}, "saved_time": 1721102448, "source": "reddit", "tags": []}, {"answers": [{"content": "The main thing to remember is that python does not really have a two-pass compiler.  It executes each statement as it is parsed.  It also differentiates between a file loaded as a \"main script\" from the command line, and a file imported as a module.\n\nSo, the problem is that when you run \"python Modules.py\", the Modules.py file is executed directly as a script, NOT imported as a module.  Any symbols declared in the script are \"global\" symbols, not \"module\" symbols.\n\npython comes across \"import Module1\", which it executes, looks in its list of modules (sys.modules\\[\\]), and not finding an entry for \"Module1\" searches for a file to parse and finds \"Module1.py\", and starts parsing it, first creating an entry in sys.modules\\[\"Module1\"\\] to hold any objects declared in the module.\n\nModule1.py's first line is \"import Modules\".  Python again looks in its list of modules to see if it's already got a module by that name.  Since it doesn't, it looks for something to import, and finds \"Modules.py\" in the current directory.\n\nPython begins parsing Modules.py, Again!  But, this time, as a module, so it makes an entry in sys.modules\\[\"Modules\"\\], to hold the symbols declared.\n\nThe first line is \"import Module1, Module2\", which python dutifully executes.\n\nIt notices that Module1 already exists in sys.modules\\[\\], so it doesn't import that, and it moves on to Module2, searching for it in sys.modules.\n\nSince Module2 doesn't exist in sys.modules, python looks for a file and finds \"Module2.py\"\n\nIt parses Module2.py, the first line of which is \"import Modules, Module1\"\n\nSo python looks in sys.modules\\[\\] for \"Modules\", and finds the module object (even though it's not fully populated yet, because Modules.py isn't finished being parsed).  It looks in sys.modules\\[\\] for \"Module1\" and finds it, too (again, even though it's not fully parsed).\n\nPython continues parsing Module2.py until it comes across the class declaration for Class2, when it executes the class declaration, it tries to find the parent class \"Module1.Class1\" -- it knows about Module1 (it's in sys.modules), but there's no symbol for Class1 yet, because the parser hasn't gotten that far in Module1.py, and thus:\n\n    AttributeError: module object has no attribute Class1.\n\nYou have a circular dependency ( Program \u2192 Class1 \u2192 Class2 \u2192 Program).\n\nYou need to break that cycle.  If you're just using \"Program\" as a repository for some constants that Class1 and Class2 need, you could split that out into a separate class that all three (Program, Class2, and Class1) import.\n\nAnother solution would be to pass \"Program\" (or a Program object) in to the Module1 and Module2 (dependency injection!) functions when you call them (or call some kind of Module1.SetProgram(self) function from the Program.run() method.\n\n# One final word\n\nThe good news is that you were balked by an error while trying to use this pattern; Importing \"Modules.py\" and running \"Modules.py\" causes two separate namespaces to be created, and can lead to some very confusing errors!\n\nSay, for example, that you got your code to work (By removing the inheritance, or some other method), but you were still importing \"Modules\" from \"Module1\" or \"Module2\".\n\nWhen you referenced a symbol in Modules from Module1 or Module2, you'd be referencing the versions of the objects that were compiled when Modules.py was parsed as a module.\n\n>HOWEVER: your **main** Program object would be referencing symbols in Modules.py that were parsed as a \"global\" script.  So changing Program.staticField (like, with a command line option) wouldn't change the value that Class1/Class2 would see!\n\nI created a separate class with static fields, but I'm very unpleased with this solution. A friend of mine told me that there is no such need in other languages, even interpreted, like PHP.   \n\n\n>Another solution would be to pass \"Program\" (or a Program object) in to   \nthe Module1 and Module2 (dependency injection!) functions when you call   \nthem\n\nHow to do it? Can you show me some pseudocode? I again would need to import Program in Module1 and Module2 and vice versa, wouldn't I?   \n\n\n>or call some kind of Module1.SetProgram(self) function from the Program.run() method.  \n\n\nI'm sorry I don't get it. Could you show me some pseudocode?\n\nit looks like what you're doing is trying to have some kind of common, global configuration that all of your modules can use.\n\n    # file: ProgramConfig.py\n    class ProgramConfig:\n        configValue1 = 30\n        configValue2 = \"/usr/bin\"\n        \n    # file: Program.py\n    from ProgramConfig import ProgramConfig\n    class Program:\n        def parseArgs(self):\n            # ... parse cmd line args \n            args = ...\n            \n            ProgramConfig.configValue1 = args.configValue1\n            ProgramConfig.configValue2 = args.configValue2\n        def run(self):\n            self.parseArgs();\n            m1 = Module1()\n            m2 = Module2()\n            self.doStuff(m1,m2)\n            \n    if __name__ == \"__main__\":\n        p = Program()\n        p.run()\n        \n    # file: Module1.py\n    from ProgramConfig import ProgramConfig\n    \n    class Module1:\n        def __init__(self):\n            self.doSomething(ProgramConfig.configValue1)\n    # ...\n            \n    # file: Module2.py\n    from ProgramConfig import ProgramConfig\n    from Module1 import Module1\n    \n    class Module2(Module1):\n        def __init__(self):\n            self.doAnotherThing(ProgramConfig.configValue2)\n    # ...\n\nThis is not a *great* pattern, because you are relying on global variables (a singleton pattern, which some consider an *anti*\\-pattern).  A better evolution would be the separate configuration object (vs. class) that you can set as the configuration for the ModuleXX classes.  Something like this:\n\n    # file: ProgramConfig.py\n    class ProgramConfig:\n        def __init__(self, **kwargs):\n            # get params passed in as kwargs, or default values.\n        self.configValue1 = kwargs.get(\"configValue1\", 30)\n        self.configValue2 = kwargs.get(\"configValue2\", \"/usr/bin\")\n        \n    # file: Program.py\n    from ProgramConfig import ProgramConfig\n    from Module1 import Module1\n    from Module2 import Module2\n    \n    class Program:\n        def __init__(self):\n            # parse command line args, return a dictionary.\n            args = self.parseArgs()\n            # create global program configuration\n            pc = ProgramConfig(**args)\n            \n            Module1.setConfig(pc)\n            Module2.setConfig(pc)\n            \n            m1 = Module1()\n            m2 = Module2()\n            \n    # file: Module1\n    class Module1:\n        config = None\n        \n        @classmethod\n        def setConfig(klass, programConfig)\n            klass.config = programConfig\n        \n        def __init__(self):\n            self.doSomething(config.configValue1)\n            \n    # file: Module2\n    from Module1 import Module1\n    class Module2(Module1):\n        config = None\n        \n        @classmethod\n        def setConfig(klass, programConfig)\n            klass.config = programConfig\n        \n        def __init__(self):\n            self.doAnotherThing(config.configValue2)\n\n(To be continued...)\n\nNow, there are a couple of problems with this method.  First, there's a lot of duplication of code in Module1 and Module2.  So that can be factored out into a common base class (which we can handily put into ProgramConfig.py):\n\n    # file: ProgramConfig.py\n    class ProgramConfig:\n        def __init__(self, **kwargs):\n            # get params passed in as kwargs, or default values.\n        self.configValue1 = kwargs.get(\"configValue1\", 30)\n        self.configValue2 = kwargs.get(\"configValue2\", \"/usr/bin\")\n        \n    class GlobalConfigModule:\n        # two __ means that the value is private to this class\n        __config = None\n        \n        @classmethod \n        def setConfig(klass, programConfig):\n            klass.__config = programConfig\n            \n        # wrap config as a property with a sanity check to make sure\n        # that it's been set!\n    @property \n    def config(self):\n        if not self.__config:\n            raise RuntimeError(\"No global config for %r\" % (self.__class__))\n        return self.__config\n\nNow Module1 can inherit from GlobalConfigModule (Module2 will get it automatically, because it inherits from Module1):\n\n    # file: Module1.py\n    from ProgramConfig import GlobalConfigModule\n    \n    class Module1(GlobalConfigModule):\n        def __init__(self):\n            self.doSomething(config.configValue1)\n    # ...\n\nSince GlobalConfigModule holds that global config as a class static member, the main program only has to set the value once:\n\n    # file: Program.py\n    from ProgramConfig import ProgramConfig, GlobalConfigModule\n    from Module1 import Module1\n    from Module2 import Module2\n    \n    class Program:\n        def __init__(self):\n            # parse command line args, return a dictionary.\n            args = self.parseArgs()\n            # create global program configuration\n            pc = ProgramConfig(**args)\n            \n            GlobalConfigMoudule.setConfig(pc)\n            \n            # Module1 and Module2 will use the global config, because\n            # they inherit from GlobalConfigModule\n            m1 = Module1()\n            m2 = Module2()\n\nThere's still an issue, which may or may not be a problem for you.  This is still a singleton pattern, which, as I said above, some people consider an anti-pattern.  The main reason being that it's hard to write TDD (Test Driven Development) code when using singletons.  So a different solution would be to have the main program create the configuration object, and then pass that configuration object in to each Module, as it's created.\n\nSomething like this:\n\n    # file: ProgramConfig.py\n    class ProgramConfig:\n        def __init__(self, **kwargs):\n            # get params passed in as kwargs, or default values.\n        self.configValue1 = kwargs.get(\"configValue1\", 30)\n        self.configValue2 = kwargs.get(\"configValue2\", \"/usr/bin\")\n        \n    class GlobalConfigModule:\n        \n        # no longer a class member.\n        def setConfig(klass, programConfig):\n            self.__config = programConfig\n            \n        # wrap config as a property with a sanity check to make sure\n        # that it's been set!\n    @property \n    def config(self):\n        if not self.__config:\n            raise RuntimeError(\"No global config for %r\" % (self.__class__))\n        return self.__config\n\nModules still inherit from ProgramConfig.GlobalConfigModule, but they expect the configuration to be passed in at construction:\n\n    # file: Module1.py\n    from ProgramConfig import GlobalConfigModule\n    \n    class Module1(GlobalConfigModule):\n        def __init__(self, globalConfig):\n            self.setConfig(globalConfig)    # each instance now has its own config\n            self.doSomething(config.configValue1)\n    # ...\n\nWhich makes it the onus of the main program to create and pass in that configuration.  The advantage is that different modules can use different configurations:\n\n    # file: Program.py\n    from ProgramConfig import ProgramConfig, GlobalConfigModule\n    from Module1 import Module1\n    from Module2 import Module2\n    \n    class Program:\n        def __init__(self):\n            # parse command line args, return a dictionary.\n            args = self.parseArgs()\n            # create global program configuration\n            pc1 = ProgramConfig(**args)\n            \n            # module2 uses a different config\n            pc2 = ProgramConfig( configValue2 = \"/usr/local/bin\" )\n            \n            # pass configuration to modules\n            m1 = Module1(pc1)\n            m2 = Module2(pc2)\n\nI hope this helps!\n\nMother of God, what a lot of code. Thank you very much :D I will need to learn a lot to even understand this :D For instance what `@property` and `**` means. A moment ago I didn't even know python has `@classmethod` (I knew only `@staticmethod`). For now I've got two questions:\n\n1. I understand config in your `config = none` is only a variable, not a key word of python?\n2. It seems you made a typo and wrote `klass` instead of `self` in one of the last of your examples, doesn't it?\n3. So you managed to get rid of \"global variables\" completly? And there is no \"circular import\" issues? Have you often used such framework?\n\n1.  yes, 'config' is just a variable. \n2. 'klass' is not a typo -- the function is declared as a class method (with the  '@classmethod' decorator).  the first argument to class method is the class object, but 'class' is a keyword, thus, the convention of 'klass' (sometimes people will use an abbreviation like 'cls', I just happen to prefer 'klass').\n3. Yes.  there should be no circular dependencies.  I've used similar frameworks in the past.  I tend towards the last solution that I gave, because it allows more flexibility.\n\nthe '@property' and '@classmethod' are called 'decorators', and they are a bit of python magic.  Read up on them here: [https://realpython.com/primer-on-python-decorators/](https://realpython.com/primer-on-python-decorators/)\n\nthe '\\*args' and '\\*\\*kwargs' are a way of passing variable numbers of arguments to python.  unnamed arguments are put into args\\[\\] as a list, and named arguments are put into a kwargs\\[\\] as a dictionary, with the key being the argument name and the value being the argument value.  read up on that, here: [https://realpython.com/python-kwargs-and-args/](https://realpython.com/python-kwargs-and-args/) \n\n(I'm not affiliated with [realpython.com](https://realpython.com), they're just the first reasonable site I found when I googled :-)", "id": "hmmsbnh", "owner_tier": 0.1, "score": 0.999999999090909}, {"content": "Static variables are often an anti-pattern - you shouldn't use them unless you're absolutely sure it's the right approach. I would suggest reading up on OOP concepts and how they relate to python - it's been too long for me to have a book on-hand to recommend, but there's plenty of resources. The general idea is that each instance of `Class1` should have their own variables, same with each instance of `Class2`. You would tie these instances in some way through your main app logic.\n\nWould putting all static fields of the class `Program` in a separate class (say `StaticFields`) be a good OO practice? Or is there something better I can do?", "id": "hmmslj1", "owner_tier": 0.7, "score": 0.09090909000000001}, {"content": "I don't entirely understand what you're trying to do. In python when you have subclasses, you can use `super().__init__()` to call the parent class' init ([long explainer here](https://stackoverflow.com/questions/222877/what-does-super-do-in-python-difference-between-super-init-and-expl)). Since you've set self.field to the same value in both classes you can defer setting self.field to its parent (aka super class):\n\n    class Class2(Module1.Class1): \n        def __init__(self):\n            super().__init__()\n\nAlso, better than accessing the static, you could pass that value into the classes:\n\n\n    class Class1:\n        def __init__(self, val):\n            self.field = 2*val\n\n    # ...\n\n    class Class2(Module1.Class1): \n        def __init__(self, val):\n            super().__init__(val)\n\n    # ...\n\n        def run(self):\n            object1 = Module1.Class1(staticField)\n            object2 = Module2.Class2(staticField)\n            print(\"I created the objects.\")         \n\nSometimes it makes a lot of sense to have statics that you treat as constants (like if you have a configuration loaded from an ini where you access different parts of it across your program). But when your code is as simple as what you posted, it's better to pass it in and make the data dependencies obvious. That would also allow you to pass values computed in `run()` into the constructors.", "id": "hn09pfw", "owner_tier": 0.5, "score": -9.090909035659355e-10}], "link": "https://www.reddit.com/r/gamedev/comments/r5bcek/importing_modules_and_inheritance_in_python_why/", "question": {"content": "Ok, lets say I've got 2 classes + the main part of the program, which I included in a class called Program. Additionally `Class1` and `Class2` use static variables of the class `Program`. `Class2` inherits after the `Class1`. I want to devide my program into three different files and import them as modules. The first file called [Module1.py](https://Module1.py) contain:\n\n    import Modules\n    \n    class Class1:\n        def __init__(self):\n            self.field = 2*Modules.Program.staticField\n\n&#x200B;\n\nThe second file called [Module2.py](https://Module1.py) contains the following code:\n\n    import Modules, Module1\n    \n    \n    class Class2(Module1.Class1): \n    \n        def __init__(self):\n            self.field = 2*Modules.Program.staticField\n\n&#x200B;\n\nAnd here is the main file called Modules.py:\n\n&#x200B;\n\n    import Module1, Module2\n    \n    \n    class Program: \n        staticField = 30\n    \n    \n        def run(self):\n            object1 = Module1.Class1()\n            object2 = Module2.Class2()\n            print(\"I created the objects.\") \u00a0 \u00a0 \u00a0 \u00a0 \n    \n    \n    def main():\n        program = Program()\n        program.run()\n    \n    if __name__ == \"__main__\": \n        main()\n\nBut it doesn't work. When `Class2` **doesn't** inherit after the `Class1` it works. But when `Class2` inherits after the `Class1` it doesn't work.\n\nCould you tell me why it doesn't work and, more importantly, how am I supposed to code it if `Class2` needs to inherit after the `Class1` and both classes need to use the `staticField` from the class `Program`? There may be several dozen needed static fields and their values may be known only after runing the `run` method. That's why I don't have an idea how could I code it differently provided the code is supposed to be elegant.", "id": "r5bcek", "title": "Importing modules and inheritance in python - why does it work?", "traffic_rate": 269.8159633960346}, "saved_time": 1721102448, "source": "reddit", "tags": []}, {"answers": [{"content": "\r\n    This would be better posted in the dedicated forum: CodeProject.AI Discussions[^]\r\n", "id": "2_5376486_1", "owner_tier": 0.9, "score": 5.0}], "link": "https://www.codeproject.com/Questions/5376484/Cant-get-modules-to-run-after-updating-to-latest-C", "question": {"content": "\r\n\t\t\t    Everything was working fine on the last beta version but once I updated last night to the latest 2.5.1 version of codeproject I can't get any Object Detection Module to run at all.  I keep getting install errors and have completely uninstalled codeproject and deleted directories and restarted the computer many many times. \n\n\n\r\n12:50:19:System:           Windows\r\n12:50:19:Operating System: Windows (Microsoft Windows 11 version 10.0.22631)\r\n12:50:19:CPUs:             Intel(R) Core(TM) i5-8500 CPU @ 3.00GHz (Intel)\r\n12:50:19:                  1 CPU x 6 cores. 6 logical processors (x64)\r\n12:50:19:GPU (Primary):    NVIDIA GeForce GTX 1650 (4 GiB) (NVIDIA)\r\n12:50:19:                  Driver: 551.23, CUDA: 12.4 (up to: 12.4), Compute: 7.5, cuDNN: 8.5\r\n12:50:19:System RAM:       32 GiB\r\n12:50:19:Platform:         Windows\r\n12:50:19:BuildConfig:      Release\r\n12:50:19:Execution Env:    Native\r\n12:50:19:Runtime Env:      Production\r\n12:50:19:.NET framework:   .NET 7.0.5\r\n12:50:19:Default Python:\r\n12:50:19:App DataDir:      C:\\ProgramData\\CodeProject\\AI\r\n12:50:19:Video adapter info:\r\n12:50:19:  NVIDIA GeForce GTX 1650:\r\n12:50:19:    Driver Version     31.0.15.5123\r\n12:50:19:    Video Processor    NVIDIA GeForce GTX 1650\r\n12:50:19:  Intel(R) UHD Graphics 630:\r\n12:50:19:    Driver Version     31.0.101.2115\r\n12:50:19:    Video Processor    Intel(R) UHD Graphics Family\r\n12:50:19:STARTING CODEPROJECT.AI SERVER\r\n12:50:19:RUNTIMES_PATH             = C:\\Program Files\\CodeProject\\AI\\runtimes\r\n12:50:19:PREINSTALLED_MODULES_PATH = C:\\Program Files\\CodeProject\\AI\\preinstalled-modules\r\n12:50:19:MODULES_PATH              = C:\\Program Files\\CodeProject\\AI\\modules\r\n12:50:19:PYTHON_PATH               = \\bin\\windows\\%PYTHON_NAME%\\venv\\Scripts\\python\r\n12:50:19:Data Dir                  = C:\\ProgramData\\CodeProject\\AI\r\n12:50:19:Server version:   2.5.1\r\n12:50:20:ModuleRunner Start\r\n12:50:20:Starting Background AI Modules\r\n12:50:23:Setting up initial modules. Please be patient...\r\n12:50:23:Installing initial module FaceProcessing.\r\n12:50:23:Preparing to install module 'FaceProcessing'\r\n12:50:23:Downloading module 'FaceProcessing'\r\n12:50:24:Installing module 'FaceProcessing'\r\n12:50:24:Installer script at 'C:\\Program Files\\CodeProject\\AI\\setup.bat'\r\n12:50:24:FaceProcessing:              Installing CodeProject.AI Analysis Module                \r\n12:50:24:FaceProcessing: ======================================================================\r\n12:50:25:FaceProcessing:                    CodeProject.AI Installer                           \r\n12:50:25:FaceProcessing: ======================================================================\r\n12:50:25:Current Version is 2.5.1\r\n12:50:25:Server: This is the latest version\r\n12:50:25:FaceProcessing: 309.1Gb of 482Gb available on Windows\r\n12:50:25:FaceProcessing: General CodeProject.AI setup                                          \r\n12:50:26:FaceProcessing: Creating Directories...Done\r\n12:50:26:FaceProcessing: GPU support                                                           \r\n12:50:27:FaceProcessing: CUDA Present...Yes (CUDA 12.3, cuDNN 8.5)\r\n12:50:28:FaceProcessing: ROCm Present...No\r\n12:50:31:FaceProcessing: Reading FaceProcessing settings.......Done\r\n12:50:31:FaceProcessing: Installing module Face Processing 1.10.0                              \r\n12:50:31:FaceProcessing: Installing Python 3.7\r\n12:50:32:FaceProcessing: Start-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:32:FaceProcessing: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:32:FaceProcessing: the file specified.\r\n12:50:32:FaceProcessing: At line:1 char:1\r\n12:50:32:FaceProcessing: + Start-BitsTransfer -Source 'https://codeproject-ai.s3.ca-central-1.am ...\r\n12:50:32:FaceProcessing: + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n12:50:32:FaceProcessing:     + CategoryInfo          : NotSpecified: (:) [Start-BitsTransfer], FileNotFoundException\r\n12:50:32:FaceProcessing:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.NewBi \r\n12:50:32:FaceProcessing:    tsTransferCommand\r\n12:50:33:FaceProcessing: Get-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:33:FaceProcessing: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:33:FaceProcessing: the file specified.\r\n12:50:33:FaceProcessing: At line:1 char:1\r\n12:50:33:FaceProcessing: + Get-BitsTransfer | Remove-BitsTransfer\r\n12:50:33:FaceProcessing: + ~~~~~~~~~~~~~~~~\r\n12:50:33:FaceProcessing:     + CategoryInfo          : NotSpecified: (:) [Get-BitsTransfer], FileNotFoundException\r\n12:50:33:FaceProcessing:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.GetBi \r\n12:50:33:FaceProcessing:    tsTransfer\r\n12:50:34:FaceProcessing: Start-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:34:FaceProcessing: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:34:FaceProcessing: the file specified.\r\n12:50:34:FaceProcessing: At line:1 char:1\r\n12:50:34:FaceProcessing: + Start-BitsTransfer -Source 'https://codeproject-ai.s3.ca-central-1.am ...\r\n12:50:34:FaceProcessing: + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n12:50:34:FaceProcessing:     + CategoryInfo          : NotSpecified: (:) [Start-BitsTransfer], FileNotFoundException\r\n12:50:34:FaceProcessing:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.NewBi \r\n12:50:34:FaceProcessing:    tsTransferCommand\r\n12:50:34:FaceProcessing: Downloading Python 3.7 interpreter...BITS transfer failed. Trying Powershell....\r\n12:50:35:FaceProcessing: Invoke-WebRequest : The term 'Invoke-WebRequest' is not recognized as the name of a cmdlet, function, script file, or \r\n12:50:35:FaceProcessing: operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try \r\n12:50:35:FaceProcessing: again.\r\n12:50:35:FaceProcessing: At line:1 char:1\r\n12:50:35:FaceProcessing: + Invoke-WebRequest 'https://codeproject-ai.s3.ca-central-1.amazonaws.c ...\r\n12:50:35:FaceProcessing: + ~~~~~~~~~~~~~~~~~\r\n12:50:35:FaceProcessing:     + CategoryInfo          : ObjectNotFound: (Invoke-WebRequest:String) [], CommandNotFoundException\r\n12:50:35:FaceProcessing:     + FullyQualifiedErrorId : CommandNotFoundException\r\n12:50:35:FaceProcessing: Download failed. Sorry.\r\n12:50:35:FaceProcessing: '\"C:\\Program Files\\CodeProject\\AI\\runtimes\\bin\\windows\\python37\\python.exe\"' is not recognized as an internal or external command,\r\n12:50:35:FaceProcessing: operable program or batch file.\r\n12:50:35:FaceProcessing: Creating Virtual Environment (Shared)...Done\r\n12:50:35:FaceProcessing: The system cannot find the path specified.\r\n12:50:35:FaceProcessing: Confirming we have Python 3.7 in our virtual environment...\r\n12:50:35:Module FaceProcessing installed successfully.\r\n12:50:35:Running module using: C:\\Program Files\\CodeProject\\AI\\runtimes\\bin\\windows\\python37\\venv\\Scripts\\python\r\n12:50:35:\r\n12:50:35:Attempting to start FaceProcessing with C:\\Program Files\\CodeProject\\AI\\runtimes\\bin\\windows\\python37\\venv\\Scripts\\python \"C:\\Program Files\\CodeProject\\AI\\modules\\FaceProcessing\\intelligencelayer\\face.py\"\r\n12:50:35:Starting C:\\Program Files...ws\\python37\\venv\\Scripts\\python \"C:\\Program Files...ing\\intelligencelayer\\face.py\"\r\n12:50:35:\r\n12:50:35:Module 'Face Processing' 1.10.0 (ID: FaceProcessing)\r\n12:50:35:Valid:         True\r\n12:50:35:Module Path:   <root>\\modules\\FaceProcessing\r\n12:50:35:AutoStart:     True\r\n12:50:35:Queue:         faceprocessing_queue\r\n12:50:35:Runtime:       python3.7\r\n12:50:35:Runtime Loc:   Shared\r\n12:50:35:FilePath:      intelligencelayer\\face.py\r\n12:50:35:Pre installed: False\r\n12:50:35:Start pause:   3 sec\r\n12:50:35:LogVerbosity:\r\n12:50:35:Platforms:     all,!raspberrypi,!jetson\r\n12:50:35:GPU Libraries: installed if available\r\n12:50:35:GPU Enabled:   enabled\r\n12:50:35:Parallelism:   0\r\n12:50:35:Accelerator:\r\n12:50:35:Half Precis.:  enable\r\n12:50:35:Environment Variables\r\n12:50:35:APPDIR             = <root>\\modules\\FaceProcessing\\intelligencelayer\r\n12:50:35:DATA_DIR           = C:\\ProgramData\\CodeProject\\AI\r\n12:50:35:MODE               = MEDIUM\r\n12:50:35:MODELS_DIR         = <root>\\modules\\FaceProcessing\\assets\r\n12:50:35:PROFILE            = desktop_gpu\r\n12:50:35:USE_CUDA           = True\r\n12:50:35:YOLOv5_AUTOINSTALL = false\r\n12:50:35:YOLOv5_VERBOSE     = false\r\n12:50:35:\r\n12:50:35:Error trying to start Face Processing (intelligencelayer/face.py)\r\n12:50:35:Error is: An error occurred trying to start process 'C:\\Program Files\\CodeProject\\AI\\runtimes\\bin\\windows\\python37\\venv\\Scripts\\python' with working directory 'C:\\Program Files\\CodeProject\\AI\\modules\\FaceProcessing'. The system cannot find the file specified.\r\n12:50:35:   at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo)\r\n   at CodeProject.AI.Server.Modules.ModuleProcessServices.StartProcess(ModuleConfig module, String installSummary)\r\n12:50:35:Please check the CodeProject.AI installation completed successfully\r\n12:50:35:Module FaceProcessing started successfully.\r\n12:50:35:Installer exited with code 255\r\n12:50:35:Installing initial module ObjectDetectionYOLOv5-6.2.\r\n12:50:35:Preparing to install module 'ObjectDetectionYOLOv5-6.2'\r\n12:50:35:Downloading module 'ObjectDetectionYOLOv5-6.2'\r\n12:50:35:Installing module 'ObjectDetectionYOLOv5-6.2'\r\n12:50:35:Installer script at 'C:\\Program Files\\CodeProject\\AI\\setup.bat'\r\n12:50:35:ObjectDetectionYOLOv5-6.2:              Installing CodeProject.AI Analysis Module                \r\n12:50:36:ObjectDetectionYOLOv5-6.2: ======================================================================\r\n12:50:36:ObjectDetectionYOLOv5-6.2:                    CodeProject.AI Installer                           \r\n12:50:36:ObjectDetectionYOLOv5-6.2: ======================================================================\r\n12:50:36:ObjectDetectionYOLOv5-6.2: 309.1Gb of 482Gb available on Windows\r\n12:50:36:ObjectDetectionYOLOv5-6.2: General CodeProject.AI setup                                          \r\n12:50:36:ObjectDetectionYOLOv5-6.2: Creating Directories...Done\r\n12:50:36:ObjectDetectionYOLOv5-6.2: GPU support                                                           \r\n12:50:37:ObjectDetectionYOLOv5-6.2: CUDA Present...Yes (CUDA 12.3, cuDNN 8.5)\r\n12:50:37:ObjectDetectionYOLOv5-6.2: ROCm Present...No\r\n12:50:40:ObjectDetectionYOLOv5-6.2: Reading ObjectDetectionYOLOv5-6.2 settings.......Done\r\n12:50:40:ObjectDetectionYOLOv5-6.2: Installing module Object Detection (YOLOv5 6.2) 1.9.0                 \r\n12:50:40:ObjectDetectionYOLOv5-6.2: Installing Python 3.7\r\n12:50:40:ObjectDetectionYOLOv5-6.2: '\"C:\\Program Files\\CodeProject\\AI\\runtimes\\bin\\windows\\python37\\python.exe\"' is not recognized as an internal or external command,\r\n12:50:40:ObjectDetectionYOLOv5-6.2: operable program or batch file.\r\n12:50:40:ObjectDetectionYOLOv5-6.2: Creating Virtual Environment (Shared)...Done\r\n12:50:40:ObjectDetectionYOLOv5-6.2: The system cannot find the path specified.\r\n12:50:40:ObjectDetectionYOLOv5-6.2: Confirming we have Python 3.7 in our virtual environment...\r\n12:50:40:Module ObjectDetectionYOLOv5-6.2 installed successfully.\r\n12:50:40:Running module using: C:\\Program Files\\CodeProject\\AI\\runtimes\\bin\\windows\\python37\\venv\\Scripts\\python\r\n12:50:40:\r\n12:50:40:Attempting to start ObjectDetectionYOLOv5-6.2 with C:\\Program Files\\CodeProject\\AI\\runtimes\\bin\\windows\\python37\\venv\\Scripts\\python \"C:\\Program Files\\CodeProject\\AI\\modules\\ObjectDetectionYOLOv5-6.2\\detect_adapter.py\"\r\n12:50:40:Starting C:\\Program Files...ws\\python37\\venv\\Scripts\\python \"C:\\Program Files...nYOLOv5-6.2\\detect_adapter.py\"\r\n12:50:40:\r\n12:50:40:Module 'Object Detection (YOLOv5 6.2)' 1.9.0 (ID: ObjectDetectionYOLOv5-6.2)\r\n12:50:40:Valid:         True\r\n12:50:40:Module Path:   <root>\\modules\\ObjectDetectionYOLOv5-6.2\r\n12:50:40:AutoStart:     True\r\n12:50:40:Queue:         objectdetection_queue\r\n12:50:40:Runtime:       python3.7\r\n12:50:40:Runtime Loc:   Shared\r\n12:50:40:FilePath:      detect_adapter.py\r\n12:50:40:Pre installed: False\r\n12:50:40:Start pause:   1 sec\r\n12:50:40:LogVerbosity:\r\n12:50:40:Platforms:     all,!raspberrypi,!jetson\r\n12:50:40:GPU Libraries: installed if available\r\n12:50:40:GPU Enabled:   enabled\r\n12:50:40:Parallelism:   0\r\n12:50:40:Accelerator:\r\n12:50:40:Half Precis.:  enable\r\n12:50:40:Environment Variables\r\n12:50:40:APPDIR             = <root>\\modules\\ObjectDetectionYOLOv5-6.2\r\n12:50:40:CUSTOM_MODELS_DIR  = <root>\\modules\\ObjectDetectionYOLOv5-6.2\\custom-models\r\n12:50:40:MODELS_DIR         = <root>\\modules\\ObjectDetectionYOLOv5-6.2\\assets\r\n12:50:40:MODEL_SIZE         = Medium\r\n12:50:40:USE_CUDA           = True\r\n12:50:40:YOLOv5_AUTOINSTALL = false\r\n12:50:40:YOLOv5_VERBOSE     = false\r\n12:50:40:\r\n12:50:40:Error trying to start Object Detection (YOLOv5 6.2) (detect_adapter.py)\r\n12:50:40:Error is: An error occurred trying to start process 'C:\\Program Files\\CodeProject\\AI\\runtimes\\bin\\windows\\python37\\venv\\Scripts\\python' with working directory 'C:\\Program Files\\CodeProject\\AI\\modules\\ObjectDetectionYOLOv5-6.2'. The system cannot find the file specified.\r\n12:50:40:   at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo)\r\n   at CodeProject.AI.Server.Modules.ModuleProcessServices.StartProcess(ModuleConfig module, String installSummary)\r\n12:50:40:Please check the CodeProject.AI installation completed successfully\r\n12:50:40:Module ObjectDetectionYOLOv5-6.2 started successfully.\r\n12:50:40:Installer exited with code 255\r\n12:50:40:Installing initial module ObjectDetectionYOLOv5Net.\r\n12:50:40:Preparing to install module 'ObjectDetectionYOLOv5Net'\r\n12:50:40:Downloading module 'ObjectDetectionYOLOv5Net'\r\n12:50:40:Installing module 'ObjectDetectionYOLOv5Net'\r\n12:50:40:Installer script at 'C:\\Program Files\\CodeProject\\AI\\setup.bat'\r\n12:50:40:ObjectDetectionYOLOv5Net:              Installing CodeProject.AI Analysis Module                \r\n12:50:40:ObjectDetectionYOLOv5Net: ======================================================================\r\n12:50:40:ObjectDetectionYOLOv5Net:                    CodeProject.AI Installer                           \r\n12:50:40:ObjectDetectionYOLOv5Net: ======================================================================\r\n12:50:41:ObjectDetectionYOLOv5Net: 309.1Gb of 482Gb available on Windows\r\n12:50:41:ObjectDetectionYOLOv5Net: General CodeProject.AI setup                                          \r\n12:50:41:ObjectDetectionYOLOv5Net: Creating Directories...Done\r\n12:50:41:ObjectDetectionYOLOv5Net: GPU support                                                           \r\n12:50:42:ObjectDetectionYOLOv5Net: CUDA Present...Yes (CUDA 12.3, cuDNN 8.5)\r\n12:50:42:ObjectDetectionYOLOv5Net: ROCm Present...No\r\n12:50:44:ObjectDetectionYOLOv5Net: Reading ObjectDetectionYOLOv5Net settings.......Done\r\n12:50:44:ObjectDetectionYOLOv5Net: Installing module Object Detection (YOLOv5 .NET) 1.9.2                \r\n12:50:45:ObjectDetectionYOLOv5Net: Start-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:45:ObjectDetectionYOLOv5Net: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:45:ObjectDetectionYOLOv5Net: the file specified.\r\n12:50:45:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:45:ObjectDetectionYOLOv5Net: + Start-BitsTransfer -Source 'https://codeproject-ai.s3.ca-central-1.am ...\r\n12:50:45:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n12:50:45:ObjectDetectionYOLOv5Net:     + CategoryInfo          : NotSpecified: (:) [Start-BitsTransfer], FileNotFoundException\r\n12:50:45:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.NewBi \r\n12:50:45:ObjectDetectionYOLOv5Net:    tsTransferCommand\r\n12:50:46:ObjectDetectionYOLOv5Net: Get-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:46:ObjectDetectionYOLOv5Net: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:46:ObjectDetectionYOLOv5Net: the file specified.\r\n12:50:46:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:46:ObjectDetectionYOLOv5Net: + Get-BitsTransfer | Remove-BitsTransfer\r\n12:50:46:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~\r\n12:50:46:ObjectDetectionYOLOv5Net:     + CategoryInfo          : NotSpecified: (:) [Get-BitsTransfer], FileNotFoundException\r\n12:50:46:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.GetBi \r\n12:50:46:ObjectDetectionYOLOv5Net:    tsTransfer\r\n12:50:47:ObjectDetectionYOLOv5Net: Start-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:47:ObjectDetectionYOLOv5Net: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:47:ObjectDetectionYOLOv5Net: the file specified.\r\n12:50:47:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:47:ObjectDetectionYOLOv5Net: + Start-BitsTransfer -Source 'https://codeproject-ai.s3.ca-central-1.am ...\r\n12:50:47:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n12:50:47:ObjectDetectionYOLOv5Net:     + CategoryInfo          : NotSpecified: (:) [Start-BitsTransfer], FileNotFoundException\r\n12:50:47:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.NewBi \r\n12:50:47:ObjectDetectionYOLOv5Net:    tsTransferCommand\r\n12:50:47:ObjectDetectionYOLOv5Net: Downloading ObjectDetectionYOLOv5Net-DirectML-1.9.2.zip...BITS transfer failed. Trying Powershell....\r\n12:50:48:ObjectDetectionYOLOv5Net: Invoke-WebRequest : The term 'Invoke-WebRequest' is not recognized as the name of a cmdlet, function, script file, or \r\n12:50:48:ObjectDetectionYOLOv5Net: operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try \r\n12:50:48:ObjectDetectionYOLOv5Net: again.\r\n12:50:48:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:48:ObjectDetectionYOLOv5Net: + Invoke-WebRequest 'https://codeproject-ai.s3.ca-central-1.amazonaws.c ...\r\n12:50:48:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~~\r\n12:50:48:ObjectDetectionYOLOv5Net:     + CategoryInfo          : ObjectNotFound: (Invoke-WebRequest:String) [], CommandNotFoundException\r\n12:50:48:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : CommandNotFoundException\r\n12:50:48:ObjectDetectionYOLOv5Net: Download failed. Sorry.\r\n12:50:48:ObjectDetectionYOLOv5Net: Failed to download and extract ObjectDetectionYOLOv5Net-DirectML-1.9.2.zip\r\n12:50:49:ObjectDetectionYOLOv5Net: Start-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:49:ObjectDetectionYOLOv5Net: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:49:ObjectDetectionYOLOv5Net: the file specified.\r\n12:50:49:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:49:ObjectDetectionYOLOv5Net: + Start-BitsTransfer -Source 'https://codeproject-ai.s3.ca-central-1.am ...\r\n12:50:49:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n12:50:49:ObjectDetectionYOLOv5Net:     + CategoryInfo          : NotSpecified: (:) [Start-BitsTransfer], FileNotFoundException\r\n12:50:49:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.NewBi \r\n12:50:49:ObjectDetectionYOLOv5Net:    tsTransferCommand\r\n12:50:50:ObjectDetectionYOLOv5Net: Get-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:50:ObjectDetectionYOLOv5Net: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:50:ObjectDetectionYOLOv5Net: the file specified.\r\n12:50:50:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:50:ObjectDetectionYOLOv5Net: + Get-BitsTransfer | Remove-BitsTransfer\r\n12:50:50:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~\r\n12:50:50:ObjectDetectionYOLOv5Net:     + CategoryInfo          : NotSpecified: (:) [Get-BitsTransfer], FileNotFoundException\r\n12:50:50:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.GetBi \r\n12:50:50:ObjectDetectionYOLOv5Net:    tsTransfer\r\n12:50:51:ObjectDetectionYOLOv5Net: Start-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:51:ObjectDetectionYOLOv5Net: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:51:ObjectDetectionYOLOv5Net: the file specified.\r\n12:50:51:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:51:ObjectDetectionYOLOv5Net: + Start-BitsTransfer -Source 'https://codeproject-ai.s3.ca-central-1.am ...\r\n12:50:51:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n12:50:51:ObjectDetectionYOLOv5Net:     + CategoryInfo          : NotSpecified: (:) [Start-BitsTransfer], FileNotFoundException\r\n12:50:51:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.NewBi \r\n12:50:51:ObjectDetectionYOLOv5Net:    tsTransferCommand\r\n12:50:51:ObjectDetectionYOLOv5Net: Downloading YOLO ONNX models...BITS transfer failed. Trying Powershell....\r\n12:50:52:ObjectDetectionYOLOv5Net: Invoke-WebRequest : The term 'Invoke-WebRequest' is not recognized as the name of a cmdlet, function, script file, or \r\n12:50:52:ObjectDetectionYOLOv5Net: operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try \r\n12:50:52:ObjectDetectionYOLOv5Net: again.\r\n12:50:52:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:52:ObjectDetectionYOLOv5Net: + Invoke-WebRequest 'https://codeproject-ai.s3.ca-central-1.amazonaws.c ...\r\n12:50:52:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~~\r\n12:50:52:ObjectDetectionYOLOv5Net:     + CategoryInfo          : ObjectNotFound: (Invoke-WebRequest:String) [], CommandNotFoundException\r\n12:50:52:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : CommandNotFoundException\r\n12:50:52:ObjectDetectionYOLOv5Net: Download failed. Sorry.\r\n12:50:52:ObjectDetectionYOLOv5Net: Failed to download and extract yolonet-models.zip\r\n12:50:53:ObjectDetectionYOLOv5Net: Start-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:53:ObjectDetectionYOLOv5Net: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:53:ObjectDetectionYOLOv5Net: the file specified.\r\n12:50:53:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:53:ObjectDetectionYOLOv5Net: + Start-BitsTransfer -Source 'https://codeproject-ai.s3.ca-central-1.am ...\r\n12:50:53:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n12:50:53:ObjectDetectionYOLOv5Net:     + CategoryInfo          : NotSpecified: (:) [Start-BitsTransfer], FileNotFoundException\r\n12:50:53:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.NewBi \r\n12:50:53:ObjectDetectionYOLOv5Net:    tsTransferCommand\r\n12:50:53:ObjectDetectionYOLOv5Net: Get-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:53:ObjectDetectionYOLOv5Net: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:53:ObjectDetectionYOLOv5Net: the file specified.\r\n12:50:54:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:54:ObjectDetectionYOLOv5Net: + Get-BitsTransfer | Remove-BitsTransfer\r\n12:50:54:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~\r\n12:50:54:ObjectDetectionYOLOv5Net:     + CategoryInfo          : NotSpecified: (:) [Get-BitsTransfer], FileNotFoundException\r\n12:50:54:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.GetBi \r\n12:50:54:ObjectDetectionYOLOv5Net:    tsTransfer\r\n12:50:54:ObjectDetectionYOLOv5Net: Start-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:54:ObjectDetectionYOLOv5Net: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:54:ObjectDetectionYOLOv5Net: the file specified.\r\n12:50:54:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:54:ObjectDetectionYOLOv5Net: + Start-BitsTransfer -Source 'https://codeproject-ai.s3.ca-central-1.am ...\r\n12:50:54:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n12:50:54:ObjectDetectionYOLOv5Net:     + CategoryInfo          : NotSpecified: (:) [Start-BitsTransfer], FileNotFoundException\r\n12:50:54:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.NewBi \r\n12:50:54:ObjectDetectionYOLOv5Net:    tsTransferCommand\r\n12:50:54:ObjectDetectionYOLOv5Net: Downloading Custom YOLO ONNX models...BITS transfer failed. Trying Powershell....\r\n12:50:55:ObjectDetectionYOLOv5Net: Invoke-WebRequest : The term 'Invoke-WebRequest' is not recognized as the name of a cmdlet, function, script file, or \r\n12:50:55:ObjectDetectionYOLOv5Net: operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try \r\n12:50:55:ObjectDetectionYOLOv5Net: again.\r\n12:50:55:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:55:ObjectDetectionYOLOv5Net: + Invoke-WebRequest 'https://codeproject-ai.s3.ca-central-1.amazonaws.c ...\r\n12:50:55:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~~\r\n12:50:55:ObjectDetectionYOLOv5Net:     + CategoryInfo          : ObjectNotFound: (Invoke-WebRequest:String) [], CommandNotFoundException\r\n12:50:55:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : CommandNotFoundException\r\n12:50:55:ObjectDetectionYOLOv5Net: Download failed. Sorry.\r\n12:50:55:ObjectDetectionYOLOv5Net: Failed to download and extract yolonet-custom-models.zip\r\n12:50:55:ObjectDetectionYOLOv5Net: Self test: .\\bin\\ObjectDetectionYOLOv5Net.exe does not exist\r\n12:50:55:ObjectDetectionYOLOv5Net: No self-test available\r\n12:50:55:ObjectDetectionYOLOv5Net: Module setup time 00:00:13.56\r\n12:50:56:ObjectDetectionYOLOv5Net: Setup complete                                                        \r\n12:50:56:ObjectDetectionYOLOv5Net: Total setup time 00:00:15.06\r\n12:50:56:Module ObjectDetectionYOLOv5Net installed successfully.\r\n12:50:56:Module ObjectDetectionYOLOv5Net not configured to AutoStart.\r\n12:50:56:Installer exited with code 0\n\nWhat I have tried:\n\r\nI have uninstalled codeproject and stopped blueiris while trying to install codeproject. I also reinstalled python and updated NVIDIA drivers.\r\n\t\t    ", "id": "5376484", "title": "Can't get modules to run after updating to latest CodeProject server version", "traffic_rate": 0}, "saved_time": 1721102448, "source": "codeproject", "tags": ["BlueIris"]}, {"answers": [{"content": "the other answers don't account for __name__ becoming __main__ for the program entry point or don't handle it properly. this works for me:", "id": 75178449, "owner_tier": 0.1, "score": 0.021276595531914896}, {"content": "A simple way of retrieving the full module name within its package:", "id": 37476629, "owner_tier": 0.5, "score": -2.1276595615372958e-10}, {"content": "__name__ always contains the full name of the module. (Other than __main__ on main, of course.)", "id": 11705103, "owner_tier": 0.5, "score": 0.999999999787234}, {"content": "Try using the __name__ attribute of the module.", "id": 11705092, "owner_tier": 0.9, "score": 0.08510638276595744}], "link": "https://stackoverflow.com/questions/11705055/get-full-package-module-name", "question": {"content": "For verbose debug messages in my application I'm using a function that returns a helpful prefix. Consider the following example: This outputs: My issue is: When I have a module in a package, for instance 'myproject.utilities.input', the module name returned from get_verbose_prefix is still just 'input', not 'myproject.utilities.input'. This drastically reduces the helpfulness of the prefix in large projects when there can be several 'input' modules in different submodules all working together. So my question is: Is there a simple way of retrieving the full module name within it's package in Python? I'm planning on expanding the get_verbose_prefix function to check for '__init__.py' files in the parent directories of the module to extrapolate it's full name, but first I'd like to know if there's an easier way to do it.", "id": 11705055, "title": "Get full package module name", "traffic_rate": 16}, "saved_time": "Tue, 16 Jul 2024 04:00:48 GMT", "source": "stackoverflow", "tags": ["python", "inspect"]}, {"answers": [{"content": "To obtain a reference to the __main__ module when in another: To then obtain the module's file path, which includes its name: If within the __main__ module, simply use: __file__ To obtain just the file name from the file path: To separate the file name from its extension: To obtain the name of a class instance: To obtain the name of a class:", "id": 41233151, "owner_tier": 0.3, "score": 0.32432432418918916}, {"content": "From the comment -- not the question. I am simply curious to see if what I am trying to do is possible. The answer to \"is it possible\" is always \"yes\".  Always.  Unless your question involves time travel, anti-gravity or perpetual motion. Since the answer is always \"yes\", your question is ill-formed.  The real question is \"what's a good way to have my logging module know the name of the client?\" or something like that. The answer is \"Accept it as a parameter.\"  Don't mess around with inspecting or looking for mysterious globals or other tricks. Just follow the design pattern of logging.getLogger() and use explicitly-named loggers.  A common idiom is the following That handles almost all log naming perfectly.", "id": 603460, "owner_tier": 0.9, "score": 0.999999999864865}, {"content": "To get the current file module, containing folder, here is what worked for me:", "id": 55227175, "owner_tier": 0.5, "score": -1.3513513513513513e-10}, {"content": "If you want only the name of the file:", "id": 47097725, "owner_tier": 0.5, "score": 0.06756756743243243}, {"content": "I think what you want to use is the inspect module, to inspect the python runtime stack.  Check out this tutorial.  I think it provides an almost exact example of what you want to do.", "id": 602881, "owner_tier": 0.5, "score": 0.1486486485135135}, {"content": "Using __file__ alone gives you a relative path for the main module and an absolute path for imported modules. Being aware this we can get the module file constantly either way with a little help from our os.path tools. For filename only use __file__.split(os.path.sep)[-1]. For complete path use os.path.abspath(__file__). Demo: Results: If you want to strip the '.py' off the end, you can do that easily. (But don't forget that you may run a '.pyc' instead.)", "id": 41554105, "owner_tier": 0.9, "score": 0.09459459445945946}, {"content": "This should work for referencing the current module:", "id": 7810592, "owner_tier": 0.9, "score": 0.9054054052702704}, {"content": "__file__ is the path of current module the call is made.", "id": 603503, "owner_tier": 0.5, "score": 0.2567567566216216}, {"content": "The \"currently executing module\" clearly is foo, as that's what contains the function currently running - I think a better description as to what you want is the module of foo's immediate caller (which may itself be foo if you're calling a f() from a function in foo called by a function in bar.  How far you want to go up depends on what you want this for. In any case, assuming you want the immediate caller, you can obtain this by walking up the call stack.  This can be accomplished by calling sys._getframe, with the aprropriate number of levels to walk. [Edit]:  Actually, using the inspect module as suggested above is probably a cleaner way of obtaining the stack frame.  The equivalent code is: (sys._getframe is documented as being for internal use - the inspect module is a more reliable API)", "id": 602967, "owner_tier": 0.9, "score": 0.3108108106756757}, {"content": "It's been a while since I've done python, but I believe that you can get access to the globals and locals of a caller through its traceback.", "id": 602968, "owner_tier": 0.9, "score": 0.027027026891891893}, {"content": "I don't believe that's possible since that's out of foo's scope.  foo will only be aware of its internal scope since it may be being called by countless other modules and applications.", "id": 602859, "owner_tier": 0.9, "score": 0.040540540405405404}], "link": "https://stackoverflow.com/questions/602846/how-can-i-access-the-current-executing-module-or-class-name-in-python", "question": {"content": "I would like to be able to dynamically retrieve the current executing module or class name from within an imported module.  Here is some code: foo.py: bar.py: This obviously does not work as __name__ is the name of the module that contains the function.  What I would like to be access inside the foo module is the name of the current executing module that is using foo.  So in the case above it would be bar but if any other module imported foo I would like foo to dynamically have access to the name of that module. Edit: The inspect module looks quite promising but it is not exactly what I was looking for.  What I was hoping for was some sort of global or environment-level variable that I could access that would contain the name of the current executing module.  Not that I am unwilling to traverse the stack to find that information - I just thought that Python may have exposed that data already. Edit: Here is how I am trying to use this.  I have two different Django applications that both need to log errors to file.  Lets say that they are called \"AppOne\" and \"AppTwo\".  I also have a place to which I would like to log these files: \"/home/hare/app_logs\".  In each application at any given point I would like to be able to import my logger module and call the log function which writes the log string to file.  However what I would like to do is create a directory under app_logs that is the name of the current application (\"AppOne\" or \"AppTwo\") so that each application's log files will go in their respective logging directories. In order to do this I thought that the best way would be for the logger module to have access to some sort of global variable that denotes the current application's name as it is responsible for knowing the location of the parent logging directory and creating the application's logging directory if it does not yet exist.", "id": 602846, "title": "How can I access the current executing module or class name in Python?", "traffic_rate": 27}, "saved_time": "Tue, 16 Jul 2024 04:00:48 GMT", "source": "stackoverflow", "tags": ["python", "module"]}, {"answers": [{"content": "Use __file__ which gives full path of the module file (if saved to disk) and transform it using os.path functions:", "id": 42891626, "owner_tier": 0.9, "score": 0.999999999090909}], "link": "https://stackoverflow.com/questions/42891533/obtain-just-the-current-modules-name-in-python", "question": {"content": "How can you just obtain the current module's name in Python. Results in output of the form: I just want to print MODULE_NAME", "id": 42891533, "title": "Obtain just the current module&#39;s name in Python", "traffic_rate": 2}, "saved_time": "Tue, 16 Jul 2024 04:00:48 GMT", "source": "stackoverflow", "tags": ["python", "module"]}, {"answers": [{"content": "I know this is outdated but I found a simpler solution in Python3 that worked for me. Long story short, there's the object's _spec_ which also stores the actual module name instead of being \"_main_\".", "id": 29971944, "owner_tier": 0.3, "score": 0.9999999992857143}, {"content": "I don't think any of the existing answers actually answer the question directly: how do you get the name of a module when it is run as __main__ ? using inspect for most of the steps... edit: as bluenote10 points out below, if you aren't doing anything whacky with your import paths and module names you can just do inspect.getmodule(obj).__spec__.name", "id": 65195774, "owner_tier": 0.1, "score": 0.2142857135714286}, {"content": "As of python 3.4,", "id": 67403132, "owner_tier": 0.1, "score": -7.142857099446636e-10}, {"content": "Edit: In retrospect, by far the best and cleanest solution is to avoid being in this situation in the first place; if it's your code that is being serialized, move all serializable functions to modules that are loaded by the main program script. This makes the origin of the function retrievable under any and all circumstances, without any need for hacks or special cases.  If that's not possible, I think your original solution (to retrieve the module name from __main__.__file__) is best and simplest. If you are worried about it seeming counter-intuitive for your users, wrap it in a nice function and document what it's for. When you run a module as __main__, python really doesn't associate it with its normal module name: If you import example, it will load the file a second time as if it's a separate module. In fact this probably happens in your case, otherwise you wouldn't be able to find your module by name in sys.modules: Module example and module __main__ really are separate runtime objects, as you'll find out if you explicitly change a module variable in one of them.", "id": 11479342, "owner_tier": 0.9, "score": 0.642857142142857}, {"content": "I actually ran across this same problem.  What I used was: Which is effectively the same as your \"hack.\" Honestly, I think its the best solution.", "id": 12286936, "owner_tier": 0.9, "score": 0.7142857135714286}, {"content": "One way you can do this -- possibly not the best way, but it works for me -- is to import your modules with __import__ and use getattr in a way something like the following. (Here I am using some ideas described in this post about dynamically loading modules.) Where modA.py looks like this: So you can see we're getting the name of the module we've imported and still getting to use the objects and methods inside the module in a normal way. When I run this I get the following: Again, this may or may not be the \"ideal\" way, but it works well and as far as I can tell doesn't entail any undesirable tradeoffs in most cases.  Hope this helps.", "id": 10756835, "owner_tier": 0.5, "score": 0.285714285}], "link": "https://stackoverflow.com/questions/10746128/python-determine-actual-current-module-not-main", "question": {"content": "I'm trying to determine the actual current module of a function (as seen if imported from elsewhere), even if the current module is the \"top level scripting environment\" __main__. It may sound like a weird thing to do, but the background is that I need to serialize a function and unserialize it (including arguments) on a different machine, for which I need to make sure the correct module AND NOT __main__ is imported before deserializing (otherwise I get an error saying AttributeError: 'module' object has no attribute my_fun). So far, I've tried inspection: which gives me  of course. I also tried finding something useful using globals(), no luck. What I really want is <module 'example' from 'example.py'>. I suppose a hacky way would be to parse it from the file name using something like  and then find the module by name sys.modules[m_name]. Is there a cleaner/better way to do this? EDIT:\nAfter learning about ipython's \"FakeModule\" and a bit more googling, I came accross this post, which describes exactly the problem that I'm facing, including my current solution to it (which is explicitly importing the current module import current_module and serializing current_module.my_fun instead of my_fun). I'm trying to avoid this, as it might not be intuitive for the users of my package.", "id": 10746128, "title": "Python: determine actual current module (not __main__)", "traffic_rate": 1}, "saved_time": "Tue, 16 Jul 2024 04:00:48 GMT", "source": "stackoverflow", "tags": ["python", "python-module", "inspection"]}, {"answers": [{"content": "PS: see also Sargera's comment", "id": 75713082, "owner_tier": 0.5, "score": -3.787878787878788e-11}, {"content": "If all you need is to get access to module variable then use globals()['bzz'] (or vars()['bzz'] if it's module level).", "id": 70034466, "owner_tier": 0.3, "score": 0.0037878787499999998}, {"content": "According to @truppo's answer and this answer (and PEP366): Reference to \"this\" module: Reference to \"this\" package: __package__ and __name__ are the same if from a (top) __init__.py", "id": 64124377, "owner_tier": 0.5, "score": 0.02272727268939394}, {"content": "You can pass it in from outside: Not ideal but it works for my current use-case.", "id": 46312691, "owner_tier": 0.5, "score": 0.011363636325757575}, {"content": "One more technique, which doesn't import the sys module, and arguably - depends on your taste - simpler: Be aware there is no import. Python imports each module only once.", "id": 45378845, "owner_tier": 0.5, "score": 0.11742424238636363}, {"content": "If you have a class in that module, then the __module__ property of the class is the module name of the class. Thus you can access the module via sys.modules[klass.__module__]. This is also works for functions.", "id": 1676861, "owner_tier": 0.5, "score": 0.06439393935606061}, {"content": "You can get the name of the current module using __name__ The module reference can be found in the sys.modules dictionary. See the Python documentation", "id": 1676868, "owner_tier": 0.5, "score": 0.056818181780303026}, {"content": "", "id": 1676860, "owner_tier": 0.9, "score": 0.9999999999621212}], "link": "https://stackoverflow.com/questions/1676835/how-to-get-a-reference-to-a-module-inside-the-module-itself", "question": {"content": "How can I get a reference to a module from within that module? Also, how can I get a reference to the package containing that module?", "id": 1676835, "title": "How to get a reference to a module inside the module itself?", "traffic_rate": 17}, "saved_time": "Tue, 16 Jul 2024 04:00:48 GMT", "source": "stackoverflow", "tags": ["python", "self-reference"]}, {"answers": [{"content": "Simply import a module and print its name using _name", "id": 71815091, "owner_tier": 0.1, "score": -1.6666666565375483e-09}, {"content": "The name of a module as a string is available as its __name__ attribute. This is shown in the Tutorial, by the way.", "id": 71815034, "owner_tier": 0.7, "score": 0.9999999983333333}], "link": "https://stackoverflow.com/questions/71815012/how-to-print-a-module-name-in-python", "question": {"content": "How do you print a module name in Python? I tried to import a module and print it, then it gives me <module 'time' (built-in)>. How to print just the module name?", "id": 71815012, "title": "How to print a module name in Python?", "traffic_rate": 602}, "saved_time": "Tue, 16 Jul 2024 04:00:48 GMT", "source": "stackoverflow", "tags": ["python", "python-3.x"]}, {"answers": [{"content": "It might be late to answer, but I didn't found the correct answer for myself.\nThe most closest and precise solution (faster than inspect.stack()) in the python 3.7.x: Pros: Cons: I have an extension to the python:\nHow to import a module given the full path? The extension having wrapper functions for that case: You have to just initialize the extension properly:", "id": 58675095, "owner_tier": 0.5, "score": -4.807692278473697e-11}, {"content": "As previously mentioned, globals gives you a dictionary as opposed to dir() which gives you a list of the names defined in the module.  The way I typically see this done is like this:", "id": 991158, "owner_tier": 0.5, "score": 0.999999999951923}, {"content": "Just use globals() globals() \u2014 Return a dictionary\n  representing the current global symbol\n  table. This is always the dictionary\n  of the current module (inside a\n  function or method, this is the module\n  where it is defined, not the module\n  from which it is called). http://docs.python.org/library/functions.html#globals", "id": 990450, "owner_tier": 0.5, "score": 0.7692307691826923}], "link": "https://stackoverflow.com/questions/990422/how-to-get-a-reference-to-current-modules-attributes-in-python", "question": {"content": "What I'm trying to do would look like this in the command line: How can I get a reference to all the names defined in mymodule from within mymodule itself? Something like this:", "id": 990422, "title": "How to get a reference to current module&#39;s attributes in Python", "traffic_rate": 27}, "saved_time": "Tue, 16 Jul 2024 04:00:48 GMT", "source": "stackoverflow", "tags": ["python"]}, {"answers": [{"content": "it does not work in interpreter! since file is meaningless there in the interpreter and is not defined. does not require os module to be imported. Explanation:\nX:\\apple\\pythonabc.py | will output pythonabc.py select the last element after splitting with slashes, then select the first element by splitting it with dot '.'. because first step gives module.py, second step gives 'module' only. __file__ is a unique variable and returns the filepath of current module. Comment any flaws or has any other pitfalls.", "id": 63929766, "owner_tier": 0.5, "score": 0.027777777500000003}, {"content": "Number of options are there to get the path/name of the current module. First be familiar with the use of __file__ in Python, Click here to see the usage. It holds the name of currently loaded module.  Check/Try the following code, it will work on both Python2 & Python3. \u00bb module_names.py Output on MAC OS X: So here we got the name of current module name and its absolute path.", "id": 47585369, "owner_tier": 0.5, "score": 0.3611111108333333}, {"content": "Why does nobody mentioned the .__module__? When doing a self.__module__ you will get the module path.\nYou can also do this outside of the class:", "id": 49880537, "owner_tier": 0.5, "score": 0.027777777500000003}, {"content": "I think you're actually looking for the __name__ special variable. From the Python documentation: Within a module, the module\u2019s name (as a string) is available as the value of the global variable __name__. If you run a file directly, this name will __main__. However, if you're in a module (as in the case where you're using the -m flag, or any other import), it will be the complete name of the module.", "id": 5183989, "owner_tier": 0.5, "score": 0.638888888611111}, {"content": "you should hardcode a.b.c in your help, if you distribute the package as such then that's the way to call it regardless of where a is located in the filesystem, as long as it's on the PYTHONPATH it'll be imported.", "id": 8791330, "owner_tier": 0.5, "score": -2.777777760895914e-10}, {"content": "This works for me: Also if I do python -m b.c from a\\ I get 'b.c' as expected. Not entirely sure what the __loader__ attribute is so let me know if this is no good. edit: It comes from PEP 302: http://www.python.org/dev/peps/pep-0302/ Interesting snippets from the link: The load_module() method has a few responsibilities that it must\n     fulfill before it runs any code: ... So it looks like it should work fine in all cases.", "id": 8789689, "owner_tier": 0.5, "score": 0.9999999997222222}, {"content": "The only way is to do path manipulation with os.getcwd(), os.path, file and whatnot, as you mentioned. Actually, it could be a good patch to implement for optparse / argparse (which currently replace \"%prog\" in the usage string with os.path.basename(sys.argv[0]) -- you are using optparse, right? -- ), i.e. another special string like %module.", "id": 8756960, "owner_tier": 0.5, "score": 0.08333333305555556}, {"content": "When run with -m, sys.path[0] contains the full path to the module.  You could use that to build the name. source: http://docs.python.org/using/cmdline.html#command-line Another option may be the __package__ built in variable which is available within modules.", "id": 5183765, "owner_tier": 0.5, "score": 0.3611111108333333}], "link": "https://stackoverflow.com/questions/5183601/how-to-get-the-current-running-module-path-name", "question": {"content": "I've searched and this seems to be a simple question without a simple answer. I have the file a/b/c.py which would be called with python -m a.b.c. I would like to obtain the value a.b.c in the module level. So when I receive the -h option, I display the USAGE without the need to actually write down the actual value in each and every script. Do I really need to go through inspect to get the desired value? Thanks. EDIT: As said, there are answers (I've searched), but not simple answers. Either use inspect, use of traceback, or manipulate __file__ and __package__ and do some substring to get the answer. But nothing as simple as if I had a class in the module, I could just use myClass.__module__ and I would get the answer I want. The use of __name__ is (unfortunately) useless as it's always \"__main__\". Also, this is in python 2.6 and I cannot use any other versions.", "id": 5183601, "title": "How to get the current running module path/name", "traffic_rate": 18}, "saved_time": "Tue, 16 Jul 2024 04:00:48 GMT", "source": "stackoverflow", "tags": ["python", "python-2.6"]}, {"answers": [{"content": "Add the below code in your b.py file then you will get the name of the file which is importing b.", "id": 58319280, "owner_tier": 0.3, "score": 0.0}], "link": "https://stackoverflow.com/questions/58318102/how-to-get-name-of-module-which-tries-to-import-current-modulefirst-import-of-m", "question": {"content": "For an example: there are 2 files\na.py b.py Is it possible to figure out name of module which make fisrt import on another module? Import patching like here is not an option. b.py could be imported in 3rd party modules separately.", "id": 58318102, "title": "How to get name of module which tries to import current module(first import of module) in python 3.x?", "traffic_rate": 143}, "saved_time": "Tue, 16 Jul 2024 04:00:48 GMT", "source": "stackoverflow", "tags": ["python", "python-3.x", "python-import"]}, {"answers": [{"content": "There is no more idiomatic method to get the current module object from sys.modules than what you used. __name__ is set by Python on import, essentially doing: so the __name__ reference is exactly what you want to use here.", "id": 20555420, "owner_tier": 0.9, "score": 0.999999999090909}], "link": "https://stackoverflow.com/questions/20555308/get-current-python-module-object-by-name-or-otherwise", "question": {"content": "If I wanted to get the current module, e.g. to reload it, I would do: Is there a better way to do this (e.g. not involving __name__)? Better in this context means more idiomatic, more portable, more robust, or more...any of the other things we usually desire in our software. I use python 2, but answers for python 3 will no doubt be useful to others.", "id": 20555308, "title": "Get current python module object (by name or otherwise)", "traffic_rate": 7066}, "saved_time": "Tue, 16 Jul 2024 04:00:48 GMT", "source": "stackoverflow", "tags": ["python", "python-2.7"]}, {"answers": [{"content": "A module _name_ is not an object. It's a name that refers to a module object.\n\nAh, so it's the same as an object name like\n\n    sample = Object()\nwhere sample is a reference to an object of (in this case lol) Object?\n\nDoes it get created the same way under the hood? Like in my example would it be as if doing fibonnaci.fibb() would make an invisible reference to fibonnaci of the form fibonnaci = fibonacci(), or along those lines? Or is it just some special form handled by Python that doesn't get created that way?\n\nThanks\n\nYou can create module objects in a similar way:\n\n    import types\n    fake_module = types.ModuleType(\"fake_module\")\n    fake_module.some_member = 1114111\n\nAs for exactly what the import statement does, it's complicated.  The import mechanisms are written in C, but it does create instances of `ModuleType`.", "id": "dssfmj5", "owner_tier": 0.9, "score": 0.99999999875}, {"content": "`fibonnaci` there is a module object.  Take a look at `type(fibonnaci)`.", "id": "dssrhp0", "owner_tier": 0.1, "score": 0.12499999875000001}, {"content": "It's just a reference to a file that contains references to data, methods or classes. And since a class must be instantiated, and a function does not, why instantiate a function when you don't need to? It would just slow things down because it now needs an id for each instance it is used. The dot operator solves this problem by allowing access to functions and data in a module without instantiating the classes also defined in the whitespace. \nedit: I'm not new but I'm new so I could be off a bit here but I think its right\n", "id": "dsslrfi", "owner_tier": 0.7, "score": -1.2499999924031613e-09}], "link": "https://www.reddit.com/r/learnpython/comments/7qwml6/in_python_is_a_module_name_an_object/", "question": {"content": "I want to understand what a module name syntactically is in Python. For example, if I have a file \n      \n    *fibonacci.py*\n    def fibb():\n        return 5\nand then\n    \n    *random.py*\n    import fibonnaci\n    result = fibonnaci.fibb()\n\nI know that the fibonnaci.fibb() part is of the form modname.func, but what I'm trying to understand is what *thing* in the language the fibonnaci being accessed by the dot *is* on line 3 of the second program. \n        ", "id": "7qwml6", "title": "In Python, is a module name an object?", "traffic_rate": 153.13037037037037}, "saved_time": "Tue, 16 Jul 2024 04:00:48 GMT", "source": "reddit"}, {"answers": [{"content": "> I'm new to Go. \n\nWelcome!\n\n> I would like to have a short name for the module name, so that when I import a local package, I have a concise name.\n\nActually no. You want to do it like everybody else does it so that your code looks and behaves the same, the existing (and known) tooling works etc. pp.\n\nYour experience with Go, the result you produce, the effectiveness of the tooling etc all will be greater if you do stuff more \"the way it's designed\" and less driven \"by I want\".\n\nI just find the full module name a little tedious, just like you don't always call a person by their full name, and that's why we create pronouns.\n\nThe full module name is used in the import part only and typically managed by your tooling.\n\nWhen are you actually typing the full module path?", "id": "jkbyyrw", "owner_tier": 0.5, "score": 0.9999999994736841}, {"content": "No, it's not really possible. `replace` directives only apply when something is used as a main module (so not for libraries). And you want the module name to be discoverable by go-get, in general.\n\nBut also, why do you care? `goimports` or your IDE should manage your imports for you and you should never have to type them anyways. Like, our import paths are pretty long and inconvenient, but I literally never type them.\n\nI currently use goimports, which is a great tool. However, I personally feel that using `thismod` should be better than using `github.com/myname/app`.", "id": "jkburio", "owner_tier": 0.5, "score": -5.263157862750153e-10}, {"content": "in terminal \"go mod init moduleName\"", "id": "jkbtf93", "owner_tier": 0.1, "score": 0.4210526310526316}, {"content": "I'm not sure what you're asking. If your module is some `github.com/myname/some/really/long/package/path/app` then in your own package you don't need to reference the name at all (except for `package app` at the top of the file) and when you import that package, only the tail end of the package name is used in the code, like `app.MyType{}`.\n\nFor the import statement, you only see it once and you know immediately whether that's your library or a 3rd party library or the standard library. It's a single string on its own line by itself! Let it be explicit.\n\nWhat I mean is totally for the import statement.\n\nAs your example, `github.com/myname/some/really/long/package/path/app`\n\nthe `github.com/myname/some/` normally refer to the module name and the root path, so I just think, why not we have a syntax like this `~/really/long/package/path/app`\n\nwhich does not change anything, but is more concise, and I could easily identify which package is mine, since almost every third part library would start with `github.com/xxx/xxx`\n\nAgain, it's a single line in a file, and literally everywhere else it already uses a short form automatically. Is a single line of code that contains a single string literal the hill you really want to die on?\n\nYou can still easily identify which package is from the same module, because goimports groups them separately from dependencies", "id": "jkcwdl8", "owner_tier": 0.7, "score": 0.5263157889473684}, {"content": "This simpler approach might work better for you.  In the source file that you're including the `github.com/myname/app` try aliasing:\n\n    package example\n    \n    import (\n      thismod \"github.com/myname/app\"\n    )\n    \n    func SomeFn() {\n      thismod.Hello()\n    }\n    \n\nI often do this when I'm using stdlib compatible loggers.\n\n# Update\n\nIf I've misunderstood your question, for instance you're creating a project of multiple Go modules (as opposed to a singular module with packages underneath), then I'll elaborate on the error message.\n\nThe Go module replacement feature, IMHO, is most helpful when you're fixing modules that you don't ordinarily control, for instance writing a pull request for an open source project.  You add the replace line to point to a local copy of a project when you've applied some fixes and wish to build with them.\n\nThe replacement feature supports two modes of operation:\n* local checkout: alias => filesystem path (this is what the tool is inferring what you're trying to do)\n* alternative git repo with an explicit reference (this _should_ be limited to a tag or commit hash, using a branch name will work but will often result in tears of frustration).  This form will have `v...` at the end with a version reference.", "id": "jkbs3mo", "owner_tier": 0.1, "score": 0.36842105210526316}, {"content": "I agree with OP that, much like many other aspects of the language, this design is terribly user-unfriendly, and, while \"consistent\", it is simply extremely annoying to manage absolute module self-references throughout a project.\n\nIt would have been extremely easy to have unambiguous self-imports, and the fact that the language was specifically designed not to have them, will never not be a poor choice.\n\nMind you, I completely disagree with Python-style relative imports. I'm merely referring to some kind of `import /pkg/whatever/else`.\n\nIf you move to another repo, you need to change a million imports, and without an IDE, when making quick changes in Vim, you spend unnecessary time typing out the stupid absolute paths. There's a great reason why no other remotely popular language does this, because the user-experience is straight-up atrocious.\n\n\"The way it's designed\" is most certainly not always the best, nor the most effective, nor the most efficient way.\n\nThis is my cold take after using the language for the past 6 years. The modules were an absolutely necessary addition, of course, and everyone welcomed them, but the self-reference implementation is awful and introduces unnecessary room for typo-squatting, which, given how the compiler automatically handles new dependencies, could easily introduce hilarious malicious code into your programs.", "id": "jrdvwt3", "owner_tier": 0.3, "score": 0.36842105210526316}, {"content": "Welcome. Go is readable by its design. Any feature that could possibly make the code unreadable is unwanted.\n\nAlso note that readability sometimes comes at cost of longer code.\n\nMy intention for renaming is actually for readability, anything starting with `thismod` is in the current module. It is more readable to me than the whole name `github.com/myname/app`. And also easier to write if necessary.\n\n    package github.com/a/b/c/d/e\n\n    import thismod\n\nWhich package does `thismod` imports?\n- github.com/a\n- github.com/a/b\n- github.com/a/b/c\n- github.com/a/b/c/e\n\nWe know the first one is an org or user, so it can't be a module. But the other 3 can, all of them could even be independent modules nested within each other, with different replacement rules and whatnot.\n\nGo's import is explicit so you know what you are getting from looking just at the import, that is why there is no aliasing.\n\nThe replace directive has a different purpose, it is to allow for fixes to be made in forks or local copies and linked in place of the original package.\n\n`thismod` just refer to the root path, normally it would be [`github.com/a/b`](https://github.com/a/b), so if I want to import the following\n\n    github.com/a/b/c\n    github.com/a/b/c/e\n\nmy version is\n\n    thismod/c\n    thismod/c/e\n    \n    // or more concise like this\n    ~/c\n    ~/c/e", "id": "jkc2csh", "owner_tier": 0.3, "score": 0.15789473631578949}, {"content": "This is not possible, and it\u2019s not possible by design - others have covered why, so I won\u2019t rehash it. One of the things you\u2019re going to find as you dive into go, though, is that it\u2019s an extremely opinionated language by design. There\u2019s generally only one right way to do things, and that right way is enforced by either the compiler or the tooling. \n\nIt leads to trade offs sometimes, but it prevents unnecessary cleverness (for the most part), it means that anyone who knows go can generally understand your code, and it means the tooling can easily be as robust as it is (gofmt, goimports, etc, all take advantage of the opinionated nature of go).\n\nI understand the inclination, but this is where the downvotes are coming from - a lot of us have been writing go long enough to balk at someone trying to circumvent go\u2019s opinions, forgetting most folks come from languages with significantly less rules", "id": "jkdcwts", "owner_tier": 0.3, "score": 0.31578947315789474}], "link": "https://www.reddit.com/r/golang/comments/13iul8r/how_can_i_have_an_alias_to_the_current_module_name/", "question": {"content": "I'm new to Go. I would like to have a short name for the module name, so that when I import a local package, I have a concise name. And I tried to do this, but it did not work for me.\n\n    module github.com/myname/app\n    \n    go 1.20\n    \n    replace thismod => github.com/myname/app \n\nError: replacement module without version must be directory path (rooted or starting with ./ or ../)", "id": "13iul8r", "title": "How can I have an alias to the current module name?", "traffic_rate": 48.87912702853945}, "saved_time": "Tue, 16 Jul 2024 04:00:48 GMT", "source": "reddit"}, {"answers": [{"content": "using ```dir()``` returns attributes in scope for a variety of types, and ```vars()``` returns specifically the ```__dict__``` attribute (so it won't work if there is none). One or the other will usually get you what you want.\n\nI settled with \n\n    import sys\n    \n    module_dict = sys.modules[__name__].__dict__\n\nThis is pretty much exactly what I wanted. ", "id": "e78esng", "owner_tier": 0.5, "score": 0.9999999975}], "link": "https://www.reddit.com/r/learnpython/comments/9lmdts/calling_dict_from_within_a_module_itself/", "question": {"content": "Hello. \n\nI know that I can import a module and get a dictionary of that modules' namespace by calling\n\n    import example\n    \n    print(example.__dict__)\n\nBut how can I do that WITHIN the example module itself? I know I could use globals(), but that contains additional unneccesary stuff. \n\n&#x200B;\n\nFYI I am using this for a game in which I have a sprite factory that reads xml data that has the object name as strings and instantiates objects from it. ", "id": "9lmdts", "title": "Calling __dict__ from within a module itself", "traffic_rate": 153.13037037037037}, "saved_time": "Tue, 16 Jul 2024 04:00:48 GMT", "source": "reddit"}, {"answers": [{"content": "> says it's not looking where pip installed it\n\nIf you run \"pip -V\" in the cli it will display where pip will install.\n\nIf you run 'import sysconfig; print(sysconfig.get\\_paths()\\[\"purelib\"\\])' it will show where python looks for packages.\n\nIf you know which interpreter you want to use, you can ensure an install will be going to the right place by running \"python3 -m pip install mymodule\" .\n\nbest solution after spending like 3 hours\n\nThank you, had this problem for months and finally fixed it.\n\nBoth the address are coming different.\n\nwhat to do then?", "id": "h6rb0mr", "owner_tier": 0.3, "score": 0.9999999980000001}, {"content": "I know this has already been answered, but just to throw it out here:\n\n&#x200B;\n\nYou can also type \"pip list -v\" in CMD to list locations of all installed packages", "id": "jhnapyf", "owner_tier": 0.5, "score": -1.999999987845058e-09}], "link": "https://www.reddit.com/r/learnpython/comments/osvtik/python_cant_find_module_even_after_pip_install/", "question": {"content": "I'm trying to import/use an ETL package, PETL, with    \n`import\u00a0petl\u00a0as\u00a0etl`\n\nI did \n\n`pip install petl`   \nfrom my project's root library; it appeared to install fine but VSCode is telling me it can't find the module; and when I try to run it from the terminal there it gives syntax error   \n\n\nI'm using python 3.7; I don't think I have multiple versions of python installed, but not sure how to check that    \nthis seems to be a relatively common problem; a quick google answer says it's not looking where pip installed it    \n6 months ago I installed pymssql, am using that in the same script, and am able to find that fine (I'm just now getting back into a small python project)", "id": "osvtik", "title": "Python can't find module, even after pip install", "traffic_rate": 153.13037037037037}, "saved_time": "Tue, 16 Jul 2024 04:00:48 GMT", "source": "reddit"}, {"answers": [{"content": "> In this course I'm doing, I've learned that when invoking a function, I should use the phrase \"if name == 'main'.\n\nThat's not what you should do. What you should do is get into the habit of putting your script's entrypoint under this *guard*, so that it doesn't execute if your script is imported as a module.\n\nThat's all it does - if your script is executed rather than imported, the variable `__name__` is set to \"main\". Because it's the entrypoint, or *main* module. If your script is imported as a module the variable `__name__` is set instead to the module name of the script.\n\nAbsolutely agreed, but I hate typing `if __name__ == \"__main__\":`. A new developer is wondering why one is quoted and the other is not. They're wondering what's happening with the weird pre- and postfix double-underscores. Oh, and they've misspelled it as `\"_main_\"` and it's silently failing and they have no idea what's going on.\n\nThis is such a common idiom that I would love to see it pushed into the language itself:\n\n    # not a great name, but showing the idea\n    if running_as_script():\n        ...\n\nI think that would be less fiddly and also easier for newer developers to understand. Plus, if it's misspelled, it's a compile error, not a silent runtime failure.\n\nThe best explanation I've encountered so far. Simple, explicit and it does not repeat itself.\n\nIs that two underscores or three?\n\nFor me, in some games I make I have one program execute another, so I don't use this much. But sometimes, yeah, it's useful.\n\nHonestly it seems like it would clear up a lot of confusion. \n\nI was thinking something like 'if not_running_as_module()', but that might just be odd.\n\n2, it's called a \"dunderscore\"\n\nMaybe written as `if not running_as_module():`? But yeah, still odd.\n\nOr this:\n\n    import sanemain\n\n    # lots of code\n    def MAIN():\n        # only called if __name__ == '__main__'\n\n*Edit*: Or doing it as a decorator:\n\n    @main\n    def any_function_name():\n         ...\n\ndecorator is the best one, but it should probably be called something other than `main`, because most people will call their main function, well, `main`\n\nBoth approaches would require teaching python interpreter to look for a function with main decorator and executing it. But what if there are no functions with decorator? Or what if there is, but also there's top level code written? What should be executed first? Main function or top level code?\n\nIt all brings a lot of ambiguity that should be avoided by the language, so I think the current approach is the most python way to do it - straightforward and simple (from technical perspective) with no room for ambiguity", "id": "l2s3scc", "owner_tier": 0.5, "score": 0.9999999999593495}, {"content": "You only need to use this if you get into writing libraries that will get included in other programs.\n\nWhen you write code outside a function or class then it gets executed as the main program right? What if a library file that you included actually had some code like that in it? It would get executed as main program which would be really confusing.\n\nThis construct guards against that. If you put your main program inside this if statement then it will get executed if it is in the file being run, but not if it is in a file being included.\n\nIf you are really advanced you can use this to include self testing code in your libraries. Running the library file directly will run the self test code. But when your library is included it gets skipped.\n\nIf you're really advanced you're using proper testing, not what you just wrote here.", "id": "l2s6y54", "owner_tier": 0.9, "score": 0.13008130077235772}, {"content": "[https://realpython.com/if-name-main-python/](https://realpython.com/if-name-main-python/)", "id": "l2s0bte", "owner_tier": 0.7, "score": 0.10162601621951219}, {"content": "> Can't I just call it without my function being under an if statement?\n\nYou can. Try it. However, if you import that file as a module - for example, to reuse the class it contains - the code will execute and you normally wouldn't want that behavior", "id": "l2s1ssp", "owner_tier": 0.1, "score": 0.06504065036585366}, {"content": "Any code under that will run only if you\u2019re running the script directly. That way, if you import that module from another script, it won\u2019t automatically run the code under the block. It\u2019s a safe guard to ensure the code doesn\u2019t run when importing the script into another script.\n\nBest, and most succinct, explanation here. Thank you!", "id": "l2sew7n", "owner_tier": 0.1, "score": 0.06097560971544715}, {"content": "People have given great answers but I would like to provide just  a small real life usecase that will help new programmers. Let's say you are writing a set of functions and that will be reused in another \"main\"(`main.py` for eg) calling python file. But usually, you want to run each function once in `func1.py`,  and see how it runs, do testing tweak it then you can just put the testing and other codeblocks under `if __name__ == '__main__':`\n\nThis means when you run `func1.py`, the code under the `__main__` block gets executed. But it won't run when the function is inside `main.py` and `main.py` is executed.", "id": "l2seo6r", "owner_tier": 0.5, "score": 0.02439024386178862}, {"content": "I've always disliked this soft requirement. In my opinion it's a poorly thought out oddity that can be confusing to new programmers much like using underscores to denote \"private\" functions or methods, since Python lacks that feature entirely.\n\nThis is a wart in Python, an ugly weirdness that is unusual in a language that mostly is well designed and easy to understand.  It all makes sense but I feel bad for people new to programming who have to figure out what's going on. (I've been programming for 45 years and have opinions.)\n\nI wouldn't say it's poorly thought out, it's just that whole early/mid-90s generation of interpreted languages (php, ruby, python, javascript) was coming on the heels of perl and bash scripts. Their focus was wildly different from ours nowadays, so good design decisions in one domain can seem like oversights in another. It's mostly from pure dumb luck that arguably the least well thought out of that generation (JavaScript) became so popular, even server-side, because it stumbled upon how valuable first class functions and event driven architectures would become. Turns out writing a scripting language originally meant to sit inside onClick attributes satisfies those requirements.\n\nIf we had something like`runtime.on(\"load\", module=this, fn=my_entry)` that would make more sense for a large app but would be silly to see in a shell script.", "id": "l2s9flk", "owner_tier": 0.3, "score": 0.02845528451219512}, {"content": "People here have provided some great answers but this is how I like to think about it:  \n  \nIf I run this file, anything below if name = main is the code I want to execute. Everything above is preparing for the code below to run (or to be referenced in another file). \n\nSo the whole function or application would live above, and I\u2019d call the function (that triggers the rest above) below.\n\n I\u2019m sure there are better ways to think about it.\n\nBest beginner answer\n\nI got the gist of it from everybody else. But this is the true explanation for a beginner. Thank you for your answer.", "id": "l2s9cwj", "owner_tier": 0.5, "score": 0.02845528451219512}, {"content": "Had a similar question when I was taking CS50p. It was explained alongside unit testing with pytest.\n\nEssentially, we had to create a separate py file that imported the functions we coded in the main py file. Without the if statement in main py, pytest would run the entire main py, when we really only want to test the functions we wrote in main py.", "id": "l2sh5cs", "owner_tier": 0.3, "score": 0.020325203211382113}, {"content": "Create two files, \u201cfile_a\u201d and \u201cfile_b\u201d. In file_a, write `print(1)`. Import file_a into file_b. See what happens. Afterwards, put the if statement guard in file_a and import file_b. See what happens. This is what cleared it up for me a long time ago.", "id": "l2t2x4r", "owner_tier": 0.1, "score": 0.012195121910569106}, {"content": "If you import a function from a different program you wrote, it stops that from running Main() and only imports to function without calling it.", "id": "l2sy501", "owner_tier": 0.1, "score": 0.012195121910569106}, {"content": "I an trying to write the shortest answer:\n\nYou can import your .py file in other .py files to use the functions. If your imported file's code (except functions and else) is not under \"if name..\", the code would also run instead of just giviny access to functions.\n\nTry it. You can understand better with experience.", "id": "l2su52u", "owner_tier": 0.3, "score": 0.008130081260162602}, {"content": "Sometimes when you import a Python script you don't want some things to run, so you can regulate this with that check.", "id": "l2uey3n", "owner_tier": 0.5, "score": 0.008130081260162602}, {"content": "I'll start from the very bottom.\n\nTry: `print(dir())` it gives you the _namespace_ of things you currently have. There's not much there if that's the first line of code.\n\nTry `import math` and then try  `print(dir())`. Try also `from math import *` or `from math import sqrt` and the again  `print(dir())`.\n\nYou can see that the contents of `dir()` change. That's everything you currently can use. Okay, now let's look at the listing. There is a thing called `__builtins__`. Let's try\n\n`print(dir(__builtins__))`\n\nOk, now we have another list, with all the built in functions, like int(), input(), min, max, and all the exceptions and errors. Neat.\n\nBut okay, there is the file `__name__` ! So it's a thing we can use. Try:\n\n`print(__name__)`\n\nThat's the name of the current program, or rather the current module. That should be called `\"__main__\"`. But now, if you create a file called `something.py` and put a line there: `print(__name__)`\n\nAnd then create another file, and put in this line:\n\n`import something`\n\nIt actually runs the something.py. But the `__name__` that you printed shows something else now.\n\nThat's the name of the other module. \n\n\nThe `if __name__ == \"__main__\":` is just checking, if the variable contains text `\"__main__\"`. This is the way of checking, if the file is ran as is, or if the file is imported.", "id": "l2tm0vu", "owner_tier": 0.1, "score": 0.004065040609756097}, {"content": "I\u2019d just like to add, my mentor got me in the habit of using if __name__ == \u2018__main__\u2019: and while I didn\u2019t really know what it did at the time, one reason I like it is that it visually separated out the portion of code that actually gets called, especially in longer files.\n\nI was getting a little confused if we had a ton of functions up top and then just a one or two line call at the bottom, but I think this is a good way to further organize your code for later reference.", "id": "l2ur5fx", "owner_tier": 0.3, "score": 0.004065040609756097}, {"content": "The purpose of this convention will become more clear once you begin to write multi-file applications of python. Essentially, the line in your title will only evaluate as True in the case where you\u2019ve executed that file specifically.\n\nIf you have a multi-file application, you will only have one file where the parameter _ _ name_ _ is equivalent to the string \u2018_ _ main _ _\u2019, therefore ignoring certain statements in the other accompanying .py files.", "id": "l2v8z9m", "owner_tier": 0.3, "score": 0.004065040609756097}, {"content": "tons of youtube videos about that:  \n[https://www.youtube.com/results?search\\_query=\\_\\_main\\_\\_](https://www.youtube.com/results?search_query=__main__)", "id": "l2vpag5", "owner_tier": 0.5, "score": 0.004065040609756097}, {"content": "It's probably more confusing than helpful for a newbie. I wouldn't do it until the need becomes apparent.", "id": "l2vxkas", "owner_tier": 0.3, "score": 0.004065040609756097}, {"content": "I kinda think they should use import to control that\nLike if you want to run codes in the import files\nYou can write \"import a as b -w\" w means whole.", "id": "l2t0n3c", "owner_tier": 0.1, "score": -4.065040650406504e-11}], "link": "https://www.reddit.com/r/learnpython/comments/1cl8f9t/what_does_if_name_main_do_exactly/", "question": {"content": "[deleted]", "id": "1cl8f9t", "title": "What does if __name__ == '__main__' do exactly?", "traffic_rate": 153.13037037037037}, "saved_time": "Tue, 16 Jul 2024 04:00:48 GMT", "source": "reddit"}, {"answers": [{"content": "means code under that if name bla bla will only run WHEN that script is run directly.\n\nNOT when it's called as an import.\n\n(when importing all the code will run.. UNLESS it's under one of them if \\_\\_name\\_\\_ blocks)\n\n    #nerd.py\n    \n    me = \"NERD\"\n    \n    if _name__ == \"__main__\":\n        me = \"NOT A NERD\"\n        print(me)\n\nrun that file directly.\n\nand then run this.\n\n    #nerdy.py\n    import nerd\n    \n    print(nerd.me)\n\nOk that makes sense to me now, thanks lol.\n\nWell done simply explaining one of the more difficult concepts succinctly.  I have been using this for 3 years without understanding this!\n\nGreat example. But your name should have two underscores in prefix.\n\nYou shoul\u2019ve asked sooner, lol.", "id": "joe00u7", "owner_tier": 0.3, "score": 0.9999999999122807}, {"content": "The symbol `__name__` is a build in constant of the type `str`. It is hence predefined without ever being assigned in you code or imported.\nWhen you code is executed directly aka being called using `python yourscript.py` or `./yourscript.py`, the value of `__name__` will be assigned the string `\"__main__\"`. If it is a module imported via `import mymod`. `__name__` will be assigned the string `\"mymod\"`.\n\nThe line you mentioned will hence just check if `__name__` is `\"__main__\"`. If thats the case the the if body is executed. Hence you can use it to write some stuff that will not be executed, if you import you code as a module.", "id": "joe3bjo", "owner_tier": 0.7, "score": 0.11403508763157894}, {"content": "[Here's the docs!](https://docs.python.org/3/library/__main__.html#module-__main__)\n\n> `__main__` is the name of the environment where top-level code is run. \u201cTop-level code\u201d is the first user-specified Python module that starts running. It\u2019s \u201ctop-level\u201d because it imports all other modules that the program needs. Sometimes \u201ctop-level code\u201d is called an entry point to the application.\n\n[This is a special case compared to the other modules that get imported](https://docs.python.org/3/reference/import.html#special-considerations-for-main).\n\n---\n\nA file with just a bunch of classes and functions is a *library*, which another program can import. A file that also executes toplevel code is a *script*, which is meant to be executed as a program.\n\nHaving a conditional block of `if __name__ == \"__main__\"` allows you to have both - a file that functions as a library when imported and runs as a script when you execute it directly.", "id": "jofpg89", "owner_tier": 0.9, "score": 0.10526315780701753}, {"content": "As for the second question: in python, if you write a class, all of the class\u2019s variables can be accessed. \n\nBut what if you had a class to convert from Celsius to Fahrenheit? The ratio might be in the class but if someone else was using the class they could change it and it would break. How do you communicate that it\u2019s not to be messed with?\n\n\nIn Python the convention is to put _ or __before the name. If you spot a variable in a class with that, probably best to leave it alone.\n\n\nThere\u2019s more to it than that but it\u2019s the gist. Also there are some other special things in classes that get __ before and after. It might be fun to dig into that if you\u2019re writing lots of classes now.\n\nThanks a lot, that helps!", "id": "jogo3op", "owner_tier": 0.7, "score": 0.061403508684210524}, {"content": "I did a little 5 minute video on this, trying to explain its with a simple example.\nHope this helps!\n\nhttps://youtu.be/oUaeSSq03Mk", "id": "jogy4om", "owner_tier": 0.1, "score": 0.04385964903508772}, {"content": "When a script is run, and the script imports py files, different \\_\\_name\\_\\_ values are assigned to the script and the imported py files.  \n\nwhere \"\\_\\_main\\_\\_\" is assigned to the running script, and different \\_\\_name\\_\\_ values are assigned to the imported files.  \n\nAlso, importing py files will automatically execute their contents. If you put the \"if \\_\\_name\\_\\_\" statement in each of the imported py file, the file will check its own \\_\\_name\\_\\_ value first. Since the \"\\_\\_main\\_\\_\" is only assigned to the running script, that means the imported py files will stop executing after the if-statement.", "id": "jof46c9", "owner_tier": 0.3, "score": 0.035087719210526315}, {"content": "Say if you have a module [script] that invokes others according to the parameters given or received, then the main doesn\u2019t matter.. The great thing about that though is that with that feature, you can now have specific actions ran if something causes that \u201cmain\u201d script to run.\n\na runs, a turns b on, b invokes main\u2026 Now main, instead of having a sequence to go off of or other scripts, it could act as a loop system or a way to even stop the sequence.\n\nIf b invokes main, it has to run the script directly instead of playing module leap.\n\nDoes that help? Also see m0us3_rat\u2019s post to clarify more.\n\nIf you want more info, please ask. If not, have a good one!", "id": "jofb84j", "owner_tier": 0.1, "score": 0.035087719210526315}, {"content": "The \\`if \\_\\_name\\_\\_ == \"\\_\\_main\\_\\_\"\\` condition is used in Python to determine whether a script is being run as the main program or being imported as a module. It allows you to write code that will only run when the script is executed directly.\r  \n\r  \nTo understand it better, let's break it down:\r  \n\r  \n\\- \\`\\_\\_name\\_\\_\\` is a built-in variable in Python that stores the name of the current module. When a Python file is executed directly, the value of \\`\\_\\_name\\_\\_\\` is set to \\`\"\\_\\_main\\_\\_\"\\`. When the file is imported as a module into another script, the value of \\`\\_\\_name\\_\\_\\` is set to the name of the module.\r  \n\r  \n\\- The \\`if \\_\\_name\\_\\_ == \"\\_\\_main\\_\\_\"\\` condition checks whether the value of \\`\\_\\_name\\_\\_\\` is equal to \\`\"\\_\\_main\\_\\_\"\\`. If it is, it means the script is being executed directly, so the code inside the \\`if\\` block will be executed. If it's not equal to \\`\"\\_\\_main\\_\\_\"\\`, it means the script is being imported as a module, so the code inside the \\`if\\` block will be skipped.\r  \n\r  \nThe purpose of using this condition is to allow certain code to be executed only when the script is run directly, but not when it is imported as a module. This can be useful when you have some code that should only be executed when the script is the main entry point, like running tests, performing initial setup, or calling specific functions.\r  \n\r  \nRegarding the use of underscores for unused variables, it's a convention in Python to indicate that a variable is intended to be ignored. By convention, a single underscore \\`\\_\\` is used for such variables. It serves as a visual cue to other developers that the variable is intentionally not being used in the code.\r  \n\r  \nWhile it's true that you could simply not declare the variable if you don't intend to use it, there might be cases where the variable is required as part of a function signature or when unpacking values from an iterable, but you have no use for that specific value. In such cases, using an underscore indicates that you are aware of the value but choose not to utilize it. It helps improve code readability and signals your intent to other programmers who might read or maintain your code in the future.", "id": "jofhq9x", "owner_tier": 0.1, "score": 0.035087719210526315}, {"content": "When you run a Python script, Python gives that script a name and stores it in the variable __name__. \n\nSo try a few things:\n\nCreate a file a.py and b.py and have them both just contain `print(__name__)` and run each. What do they print?\n\nNow have a.py import b.py and see what it prints. \n\nYou can use the name to know if a file is run as the main script or imported. Using that information you can make your script act differently depending on if it\u2019s imported or run directly.", "id": "jogj15o", "owner_tier": 0.1, "score": 0.035087719210526315}, {"content": "> While on that note I also want to know why some people list variables as an underscore meaning they aren't to be used, why not just not declare the variable if you won't use it?\n\nBecause you need something else that's returned at the same time.\n\nSay you have a function that returns two values (or technically, a tuple of two values). You can assign both of them:\n\n    first, second = foo()\n\nIf you only care about one of them though, you can indicate via underscore convention that you're throwing the other away:\n\n    first, _ = foo()\n    # or:\n    _, second = foo()", "id": "john631", "owner_tier": 0.7, "score": 0.035087719210526315}, {"content": "Save a .py file that just has:\n\n    print(__name__)\n\nThen run the file.\n\nThen run python and import the file.", "id": "joevc82", "owner_tier": 0.5, "score": -8.771929771250255e-11}], "link": "https://www.reddit.com/r/learnpython/comments/14b5vww/how_does_if_name_main_work_ive_tried_to_look_at/", "question": {"content": "I've watched many videos over and over, read forums, and gone to w3schools but the explanation just seems like spaghetti to me and I lose what they mean (ive been studying python/programming for a few months). Can someone explain in the simplest way possible what it is for?\n\nWhile on that note I also want to know why some people list variables as an underscore meaning they aren't to be used, why not just not declare the variable if you won't use it?", "id": "14b5vww", "title": "How does if __name__ == \u201c__main__\u201d work? I've tried to look at so many sources but my brain just doesn't get it.", "traffic_rate": 153.13037037037037}, "saved_time": "Tue, 16 Jul 2024 04:00:48 GMT", "source": "reddit"}, {"answers": [{"content": "Why?\n\nI have a bunch of rather long modules that use imports of the format \"from parent\\_directory.module import function\", and as I don't feel like either rewriting every import or adding each subcomponent to an \\_\\_init\\_\\_.py, it this seemed like a good solution. Plus I think it's fun, you always learn more when you stray from the norm.", "id": "gcgoqz1", "owner_tier": 0.9, "score": 0.9999999900000002}, {"content": "This makes brittle, non-re-usable code. Don't.", "id": "gch8pd9", "owner_tier": 0.5, "score": 0.9999999900000002}], "link": "https://www.reddit.com/r/learnpython/comments/juzkmc/how_to_find_what_module_imported_current_module/", "question": {"content": "Say you have module A which imports module B, how can module B find out what it was imported by?\n\nI've tried a few different methods, inspect being the most effective so far, but I'd rather do without it if that's possible. If it's not possible to do it without inspect then it'd be great to just find a method that works consistently (ex. my current method works from the terminal but not IDLE).\n\nEdit: My current method is \ninspect.getframeinfo([i for i in inspect.getouterframes(inspect.currentframe()) if \"frozen importlib._bootstrap\" not in i.filename][1][0])[0]", "id": "juzkmc", "title": "How to find what module imported current module", "traffic_rate": 153.17222222222222}, "saved_time": "Tue, 16 Jul 2024 04:00:48 GMT", "source": "reddit"}, {"answers": [{"content": "The `-m` flag searches your shell PATH for module and runs the contents, typically the `__main__.py` file. You typically would not run a file as a module, such as the example you included. Instead, if you ever install a package via pip, then want to execute it via CLI instead of through another python script, you can invoke it via this `-m` flag. I hope this helps clear up some misconceptions you may have.\n\n&#x200B;\n\nHere are some of the relevant docs which explain this better than I do. \n\n\\[[Python -m docs](https://docs.python.org/3/using/cmdline.html#cmdoption-m)\\]\n\n\\[[Python \\_\\_main\\_\\_ docs](https://docs.python.org/3/library/__main__.html#main-py-in-python-packages)\n\nI see, thanks! I had no idea a \\_\\_main\\_\\_.py file even existed", "id": "ihij9sw", "owner_tier": 0.3, "score": 0.9999999985714284}, {"content": "As u/jarulsamy said, it's a way you can run a CLI interface to a module, instead of importing it and writing your own code to use it.\n\nIf you just give it a package name (eg, rich, requests), then it will find that package and run the `__main__.py` file in that package. But if you give it an actual script name, it will run that script as if you'd just run it directly.\n\nA good example is the [Rich](https://rich.readthedocs.io/en/stable/) module's \"demo\" feature. For example, you could read the doco on `rich.prompt` and write your own code; or just run `python -m rich.prompt` from the CLI and see the author's example / demo. The `-m` there is basically finding \"rich\" in your system path (which would be your local Python site library / virtual environment) and then running the \"[prompt.py](https://prompt.py)\" code there as the main script.\n\nSo, instead of having to type `python /really/long/system/path/you/wont/remember/rich/prompt.py`, Python does the work for you and finds the Rich module in your path.\n\nI see, thanks!", "id": "ihil7tk", "owner_tier": 0.1, "score": -1.428571419889327e-09}], "link": "https://www.reddit.com/r/learnpython/comments/w79p95/python_m_flag/", "question": {"content": "What actually happens when python imports a package using python -m flag? Does it bring the module into your current directory?\n\nFor instance, what is the difference between python [hello.py](https://hello.py) vs python -m [hello.py](https://hello.py).\n\nI tried reding it up on sites like quora, but I didn't really understand the explanations all too well.", "id": "w79p95", "title": "python -m flag", "traffic_rate": 153.17222222222222}, "saved_time": "Tue, 16 Jul 2024 04:00:48 GMT", "source": "reddit"}, {"answers": [{"content": "You left out the command. It's supposed to be:\n\n    if __name__ == \"__main__\":\n        main()\n\nThis translates to: \"if this file was run directly (not imported), then run the 'main()' function.\"\n\nI might add, this is useful because you can add tests for your code easily, by putting them into a main function, and they'll run every time you're using the code directly (and you're more likely to be making changes, therefore needing tests) and when you're importing the file it will not run these tests. Another use is if you have some complex code that defines some classes and functions, and then uses them. If you didn't have the `== __main__` bit you couldn't import that file and use the classes and functions without running the rest of the code (though you should probably be putting them into a separate file anyway). So I wouldn't be surprised if you start using them too! \n\nFor claiming to be so clear, I feel like Python has a whole lot of magic constants you just sorta need to know.\n\nPython is incredibly clear *in comparison to other programming languages*. \n\nIf you want to learn about the 'magic methods', aka the 'dunder' methods, you can [read this](http://www.rafekettler.com/magicmethods.html), but for most applications you don't need them. ", "id": "cy0aqv7", "owner_tier": 0.7, "score": 0.9999999989999999}, {"content": "I'm going to assume you know about objects attributes.  When you import a module, say the `math` module, if you do (at a Python prompt)\n\n    >>> import math\n    >>> print(math.__name__)\n    math\n\nThe `__name__` attribute is the name of the module. However, when you run a program directly, instead of importing it, it gets a special `__name__` attribute called `\"__main__\"`.    Without a module, you can simply query the `__name__` attribute without prefixing it by the module name itself.  So, by checking to see if the `__name__` attribute has been set to `\"__main__\"` or not, you can determine if the module has been imported by another module/program, or if it is the script that was first executed.", "id": "cy0eowj", "owner_tier": 0.5, "score": 0.599999999}, {"content": "A Python program consists of one or more modules.  A module is just a namespace: a set of names and their corresponding values.  The main module is the module that was invoked.  For example, if you run `python foo.py`, then `foo.py` is the main module.  But you could also use `foo.py` not as the main module by importing it from another module with `import foo`.\n\n`__name__` inside a module is the name of that module.  If it's the main module, its name will be `'__main__'`.  The test in your example is checking to see if the current module is the main module.  If so then presumably you're going to take some action.\n\nThis idiom is used to write a script that can both be used as a standalone script but can also as a support library that can be imported by other scripts.  But in the latter case you just want the functions and other symbols to be made available for use, you don't want to take any action.  Importing a module should generally not cause anything to happen, other what's needed to initialize the module.  If you made a to-do list program for example that displays a users list of items and asks for input, you wouldn't want any of that to run if the script was imported by another module.  You'd just want the functions that you defined for adding and removing to-do items to be callable from elsewhere.\n\nEdit: I'd like to add that if you are *not* doing what I just described, you should not slavishly copy this line into every script you write.  It's perfectly fine to write a Python script that does not have a `main()` and just contains code that is run from top to bottom.  If you later decide that you want to import that script for use in another script, you can easily stick the whole thing in a `main()` function and add this idiom.  There's nothing worse then cargo cult programming where people add things to their code that don't apply or that they don't understand because someone else told them they should be doing it.\n\nIs there even a reason besides quick testing and using multiprocessing to use the `if __name__ == \"__main__\"` idom?\n\nOften it looks like that was introduced for the people that comming from java and need an entry point.\n\nThere can be many reasons....  I wrote a few programs that do text transformation.  I can run them from the command line, giving them a file as an argument\n\n    $ python transform.py some_file.txt result.txt\n\nin which case I will use the `if __name__ == \"__main__\"` idiom to do the file handling, or import this module from another program, and only use the text transformation.\n\nFor my programming style this would be a reason to refactor the core functionality into an extra util module. But my scripts are kinda simple so i can't say this is practical for larger projects.\n\nRight, but you might still want to run some default functionality when the script is run directly. You don't need to separate it into \"library\" and \"tiny script that uses library\".  \n\nFor example I have a reddit bot that checks for new posts in a subreddit. I can do it on demand by running the script which has an `if __name__ == \"__main__\"` or I can import that file and use it as a library. The code inside `main()` is 3 lines long so it would be pretty silly to pull it out.", "id": "cy0m7qs", "owner_tier": 0.7, "score": 0.699999999}, {"content": "In English, allows you to change what happens when the script is run and when it is imported. \n\nWhen you import a file, the interpreter actually runs the code in the file. Using `if __name__ == \"__main__\":` is a way to hide code from this automatic process. Code inside that block will run when that file is run, and not when it is imported. ", "id": "cy150xr", "owner_tier": 0.9, "score": -9.99999993922529e-10}], "link": "https://www.reddit.com/r/learnpython/comments/3x00vd/what_does_if_name_main_mean/", "question": {"content": "what's \n\n    if __name__ == \"__main__\":\n\nin english?", "id": "3x00vd", "title": "what does if __name__ == \"__main__\": mean?", "traffic_rate": 153.17222222222222}, "saved_time": "Tue, 16 Jul 2024 04:00:48 GMT", "source": "reddit"}, {"answers": [{"content": "The main thing to remember is that python does not really have a two-pass compiler.  It executes each statement as it is parsed.  It also differentiates between a file loaded as a \"main script\" from the command line, and a file imported as a module.\n\nSo, the problem is that when you run \"python Modules.py\", the Modules.py file is executed directly as a script, NOT imported as a module.  Any symbols declared in the script are \"global\" symbols, not \"module\" symbols.\n\npython comes across \"import Module1\", which it executes, looks in its list of modules (sys.modules\\[\\]), and not finding an entry for \"Module1\" searches for a file to parse and finds \"Module1.py\", and starts parsing it, first creating an entry in sys.modules\\[\"Module1\"\\] to hold any objects declared in the module.\n\nModule1.py's first line is \"import Modules\".  Python again looks in its list of modules to see if it's already got a module by that name.  Since it doesn't, it looks for something to import, and finds \"Modules.py\" in the current directory.\n\nPython begins parsing Modules.py, Again!  But, this time, as a module, so it makes an entry in sys.modules\\[\"Modules\"\\], to hold the symbols declared.\n\nThe first line is \"import Module1, Module2\", which python dutifully executes.\n\nIt notices that Module1 already exists in sys.modules\\[\\], so it doesn't import that, and it moves on to Module2, searching for it in sys.modules.\n\nSince Module2 doesn't exist in sys.modules, python looks for a file and finds \"Module2.py\"\n\nIt parses Module2.py, the first line of which is \"import Modules, Module1\"\n\nSo python looks in sys.modules\\[\\] for \"Modules\", and finds the module object (even though it's not fully populated yet, because Modules.py isn't finished being parsed).  It looks in sys.modules\\[\\] for \"Module1\" and finds it, too (again, even though it's not fully parsed).\n\nPython continues parsing Module2.py until it comes across the class declaration for Class2, when it executes the class declaration, it tries to find the parent class \"Module1.Class1\" -- it knows about Module1 (it's in sys.modules), but there's no symbol for Class1 yet, because the parser hasn't gotten that far in Module1.py, and thus:\n\n    AttributeError: module object has no attribute Class1.\n\nYou have a circular dependency ( Program \u2192 Class1 \u2192 Class2 \u2192 Program).\n\nYou need to break that cycle.  If you're just using \"Program\" as a repository for some constants that Class1 and Class2 need, you could split that out into a separate class that all three (Program, Class2, and Class1) import.\n\nAnother solution would be to pass \"Program\" (or a Program object) in to the Module1 and Module2 (dependency injection!) functions when you call them (or call some kind of Module1.SetProgram(self) function from the Program.run() method.\n\n# One final word\n\nThe good news is that you were balked by an error while trying to use this pattern; Importing \"Modules.py\" and running \"Modules.py\" causes two separate namespaces to be created, and can lead to some very confusing errors!\n\nSay, for example, that you got your code to work (By removing the inheritance, or some other method), but you were still importing \"Modules\" from \"Module1\" or \"Module2\".\n\nWhen you referenced a symbol in Modules from Module1 or Module2, you'd be referencing the versions of the objects that were compiled when Modules.py was parsed as a module.\n\n>HOWEVER: your **main** Program object would be referencing symbols in Modules.py that were parsed as a \"global\" script.  So changing Program.staticField (like, with a command line option) wouldn't change the value that Class1/Class2 would see!\n\nI created a separate class with static fields, but I'm very unpleased with this solution. A friend of mine told me that there is no such need in other languages, even interpreted, like PHP.   \n\n\n>Another solution would be to pass \"Program\" (or a Program object) in to   \nthe Module1 and Module2 (dependency injection!) functions when you call   \nthem\n\nHow to do it? Can you show me some pseudocode? I again would need to import Program in Module1 and Module2 and vice versa, wouldn't I?   \n\n\n>or call some kind of Module1.SetProgram(self) function from the Program.run() method.  \n\n\nI'm sorry I don't get it. Could you show me some pseudocode?\n\nit looks like what you're doing is trying to have some kind of common, global configuration that all of your modules can use.\n\n    # file: ProgramConfig.py\n    class ProgramConfig:\n        configValue1 = 30\n        configValue2 = \"/usr/bin\"\n        \n    # file: Program.py\n    from ProgramConfig import ProgramConfig\n    class Program:\n        def parseArgs(self):\n            # ... parse cmd line args \n            args = ...\n            \n            ProgramConfig.configValue1 = args.configValue1\n            ProgramConfig.configValue2 = args.configValue2\n        def run(self):\n            self.parseArgs();\n            m1 = Module1()\n            m2 = Module2()\n            self.doStuff(m1,m2)\n            \n    if __name__ == \"__main__\":\n        p = Program()\n        p.run()\n        \n    # file: Module1.py\n    from ProgramConfig import ProgramConfig\n    \n    class Module1:\n        def __init__(self):\n            self.doSomething(ProgramConfig.configValue1)\n    # ...\n            \n    # file: Module2.py\n    from ProgramConfig import ProgramConfig\n    from Module1 import Module1\n    \n    class Module2(Module1):\n        def __init__(self):\n            self.doAnotherThing(ProgramConfig.configValue2)\n    # ...\n\nThis is not a *great* pattern, because you are relying on global variables (a singleton pattern, which some consider an *anti*\\-pattern).  A better evolution would be the separate configuration object (vs. class) that you can set as the configuration for the ModuleXX classes.  Something like this:\n\n    # file: ProgramConfig.py\n    class ProgramConfig:\n        def __init__(self, **kwargs):\n            # get params passed in as kwargs, or default values.\n        self.configValue1 = kwargs.get(\"configValue1\", 30)\n        self.configValue2 = kwargs.get(\"configValue2\", \"/usr/bin\")\n        \n    # file: Program.py\n    from ProgramConfig import ProgramConfig\n    from Module1 import Module1\n    from Module2 import Module2\n    \n    class Program:\n        def __init__(self):\n            # parse command line args, return a dictionary.\n            args = self.parseArgs()\n            # create global program configuration\n            pc = ProgramConfig(**args)\n            \n            Module1.setConfig(pc)\n            Module2.setConfig(pc)\n            \n            m1 = Module1()\n            m2 = Module2()\n            \n    # file: Module1\n    class Module1:\n        config = None\n        \n        @classmethod\n        def setConfig(klass, programConfig)\n            klass.config = programConfig\n        \n        def __init__(self):\n            self.doSomething(config.configValue1)\n            \n    # file: Module2\n    from Module1 import Module1\n    class Module2(Module1):\n        config = None\n        \n        @classmethod\n        def setConfig(klass, programConfig)\n            klass.config = programConfig\n        \n        def __init__(self):\n            self.doAnotherThing(config.configValue2)\n\n(To be continued...)\n\nNow, there are a couple of problems with this method.  First, there's a lot of duplication of code in Module1 and Module2.  So that can be factored out into a common base class (which we can handily put into ProgramConfig.py):\n\n    # file: ProgramConfig.py\n    class ProgramConfig:\n        def __init__(self, **kwargs):\n            # get params passed in as kwargs, or default values.\n        self.configValue1 = kwargs.get(\"configValue1\", 30)\n        self.configValue2 = kwargs.get(\"configValue2\", \"/usr/bin\")\n        \n    class GlobalConfigModule:\n        # two __ means that the value is private to this class\n        __config = None\n        \n        @classmethod \n        def setConfig(klass, programConfig):\n            klass.__config = programConfig\n            \n        # wrap config as a property with a sanity check to make sure\n        # that it's been set!\n    @property \n    def config(self):\n        if not self.__config:\n            raise RuntimeError(\"No global config for %r\" % (self.__class__))\n        return self.__config\n\nNow Module1 can inherit from GlobalConfigModule (Module2 will get it automatically, because it inherits from Module1):\n\n    # file: Module1.py\n    from ProgramConfig import GlobalConfigModule\n    \n    class Module1(GlobalConfigModule):\n        def __init__(self):\n            self.doSomething(config.configValue1)\n    # ...\n\nSince GlobalConfigModule holds that global config as a class static member, the main program only has to set the value once:\n\n    # file: Program.py\n    from ProgramConfig import ProgramConfig, GlobalConfigModule\n    from Module1 import Module1\n    from Module2 import Module2\n    \n    class Program:\n        def __init__(self):\n            # parse command line args, return a dictionary.\n            args = self.parseArgs()\n            # create global program configuration\n            pc = ProgramConfig(**args)\n            \n            GlobalConfigMoudule.setConfig(pc)\n            \n            # Module1 and Module2 will use the global config, because\n            # they inherit from GlobalConfigModule\n            m1 = Module1()\n            m2 = Module2()\n\nThere's still an issue, which may or may not be a problem for you.  This is still a singleton pattern, which, as I said above, some people consider an anti-pattern.  The main reason being that it's hard to write TDD (Test Driven Development) code when using singletons.  So a different solution would be to have the main program create the configuration object, and then pass that configuration object in to each Module, as it's created.\n\nSomething like this:\n\n    # file: ProgramConfig.py\n    class ProgramConfig:\n        def __init__(self, **kwargs):\n            # get params passed in as kwargs, or default values.\n        self.configValue1 = kwargs.get(\"configValue1\", 30)\n        self.configValue2 = kwargs.get(\"configValue2\", \"/usr/bin\")\n        \n    class GlobalConfigModule:\n        \n        # no longer a class member.\n        def setConfig(klass, programConfig):\n            self.__config = programConfig\n            \n        # wrap config as a property with a sanity check to make sure\n        # that it's been set!\n    @property \n    def config(self):\n        if not self.__config:\n            raise RuntimeError(\"No global config for %r\" % (self.__class__))\n        return self.__config\n\nModules still inherit from ProgramConfig.GlobalConfigModule, but they expect the configuration to be passed in at construction:\n\n    # file: Module1.py\n    from ProgramConfig import GlobalConfigModule\n    \n    class Module1(GlobalConfigModule):\n        def __init__(self, globalConfig):\n            self.setConfig(globalConfig)    # each instance now has its own config\n            self.doSomething(config.configValue1)\n    # ...\n\nWhich makes it the onus of the main program to create and pass in that configuration.  The advantage is that different modules can use different configurations:\n\n    # file: Program.py\n    from ProgramConfig import ProgramConfig, GlobalConfigModule\n    from Module1 import Module1\n    from Module2 import Module2\n    \n    class Program:\n        def __init__(self):\n            # parse command line args, return a dictionary.\n            args = self.parseArgs()\n            # create global program configuration\n            pc1 = ProgramConfig(**args)\n            \n            # module2 uses a different config\n            pc2 = ProgramConfig( configValue2 = \"/usr/local/bin\" )\n            \n            # pass configuration to modules\n            m1 = Module1(pc1)\n            m2 = Module2(pc2)\n\nI hope this helps!\n\nMother of God, what a lot of code. Thank you very much :D I will need to learn a lot to even understand this :D For instance what `@property` and `**` means. A moment ago I didn't even know python has `@classmethod` (I knew only `@staticmethod`). For now I've got two questions:\n\n1. I understand config in your `config = none` is only a variable, not a key word of python?\n2. It seems you made a typo and wrote `klass` instead of `self` in one of the last of your examples, doesn't it?\n3. So you managed to get rid of \"global variables\" completly? And there is no \"circular import\" issues? Have you often used such framework?\n\n1.  yes, 'config' is just a variable. \n2. 'klass' is not a typo -- the function is declared as a class method (with the  '@classmethod' decorator).  the first argument to class method is the class object, but 'class' is a keyword, thus, the convention of 'klass' (sometimes people will use an abbreviation like 'cls', I just happen to prefer 'klass').\n3. Yes.  there should be no circular dependencies.  I've used similar frameworks in the past.  I tend towards the last solution that I gave, because it allows more flexibility.\n\nthe '@property' and '@classmethod' are called 'decorators', and they are a bit of python magic.  Read up on them here: [https://realpython.com/primer-on-python-decorators/](https://realpython.com/primer-on-python-decorators/)\n\nthe '\\*args' and '\\*\\*kwargs' are a way of passing variable numbers of arguments to python.  unnamed arguments are put into args\\[\\] as a list, and named arguments are put into a kwargs\\[\\] as a dictionary, with the key being the argument name and the value being the argument value.  read up on that, here: [https://realpython.com/python-kwargs-and-args/](https://realpython.com/python-kwargs-and-args/) \n\n(I'm not affiliated with [realpython.com](https://realpython.com), they're just the first reasonable site I found when I googled :-)", "id": "hmmsbnh", "owner_tier": 0.1, "score": 0.999999999090909}, {"content": "Static variables are often an anti-pattern - you shouldn't use them unless you're absolutely sure it's the right approach. I would suggest reading up on OOP concepts and how they relate to python - it's been too long for me to have a book on-hand to recommend, but there's plenty of resources. The general idea is that each instance of `Class1` should have their own variables, same with each instance of `Class2`. You would tie these instances in some way through your main app logic.\n\nWould putting all static fields of the class `Program` in a separate class (say `StaticFields`) be a good OO practice? Or is there something better I can do?", "id": "hmmslj1", "owner_tier": 0.7, "score": 0.09090909000000001}, {"content": "I don't entirely understand what you're trying to do. In python when you have subclasses, you can use `super().__init__()` to call the parent class' init ([long explainer here](https://stackoverflow.com/questions/222877/what-does-super-do-in-python-difference-between-super-init-and-expl)). Since you've set self.field to the same value in both classes you can defer setting self.field to its parent (aka super class):\n\n    class Class2(Module1.Class1): \n        def __init__(self):\n            super().__init__()\n\nAlso, better than accessing the static, you could pass that value into the classes:\n\n\n    class Class1:\n        def __init__(self, val):\n            self.field = 2*val\n\n    # ...\n\n    class Class2(Module1.Class1): \n        def __init__(self, val):\n            super().__init__(val)\n\n    # ...\n\n        def run(self):\n            object1 = Module1.Class1(staticField)\n            object2 = Module2.Class2(staticField)\n            print(\"I created the objects.\")         \n\nSometimes it makes a lot of sense to have statics that you treat as constants (like if you have a configuration loaded from an ini where you access different parts of it across your program). But when your code is as simple as what you posted, it's better to pass it in and make the data dependencies obvious. That would also allow you to pass values computed in `run()` into the constructors.", "id": "hn09pfw", "owner_tier": 0.5, "score": -9.090909035659355e-10}], "link": "https://www.reddit.com/r/gamedev/comments/r5bcek/importing_modules_and_inheritance_in_python_why/", "question": {"content": "Ok, lets say I've got 2 classes + the main part of the program, which I included in a class called Program. Additionally `Class1` and `Class2` use static variables of the class `Program`. `Class2` inherits after the `Class1`. I want to devide my program into three different files and import them as modules. The first file called [Module1.py](https://Module1.py) contain:\n\n    import Modules\n    \n    class Class1:\n        def __init__(self):\n            self.field = 2*Modules.Program.staticField\n\n&#x200B;\n\nThe second file called [Module2.py](https://Module1.py) contains the following code:\n\n    import Modules, Module1\n    \n    \n    class Class2(Module1.Class1): \n    \n        def __init__(self):\n            self.field = 2*Modules.Program.staticField\n\n&#x200B;\n\nAnd here is the main file called Modules.py:\n\n&#x200B;\n\n    import Module1, Module2\n    \n    \n    class Program: \n        staticField = 30\n    \n    \n        def run(self):\n            object1 = Module1.Class1()\n            object2 = Module2.Class2()\n            print(\"I created the objects.\") \u00a0 \u00a0 \u00a0 \u00a0 \n    \n    \n    def main():\n        program = Program()\n        program.run()\n    \n    if __name__ == \"__main__\": \n        main()\n\nBut it doesn't work. When `Class2` **doesn't** inherit after the `Class1` it works. But when `Class2` inherits after the `Class1` it doesn't work.\n\nCould you tell me why it doesn't work and, more importantly, how am I supposed to code it if `Class2` needs to inherit after the `Class1` and both classes need to use the `staticField` from the class `Program`? There may be several dozen needed static fields and their values may be known only after runing the `run` method. That's why I don't have an idea how could I code it differently provided the code is supposed to be elegant.", "id": "r5bcek", "title": "Importing modules and inheritance in python - why does it work?", "traffic_rate": 269.8159633960346}, "saved_time": "Tue, 16 Jul 2024 04:00:48 GMT", "source": "reddit"}, {"answers": [{"content": "\r\n    This would be better posted in the dedicated forum: CodeProject.AI Discussions[^]\r\n", "id": "2_5376486_1", "owner_tier": 0.9, "score": 5.0}], "link": "https://www.codeproject.com/Questions/5376484/Cant-get-modules-to-run-after-updating-to-latest-C", "question": {"content": "\r\n\t\t\t    Everything was working fine on the last beta version but once I updated last night to the latest 2.5.1 version of codeproject I can't get any Object Detection Module to run at all.  I keep getting install errors and have completely uninstalled codeproject and deleted directories and restarted the computer many many times. \n\n\n\r\n12:50:19:System:           Windows\r\n12:50:19:Operating System: Windows (Microsoft Windows 11 version 10.0.22631)\r\n12:50:19:CPUs:             Intel(R) Core(TM) i5-8500 CPU @ 3.00GHz (Intel)\r\n12:50:19:                  1 CPU x 6 cores. 6 logical processors (x64)\r\n12:50:19:GPU (Primary):    NVIDIA GeForce GTX 1650 (4 GiB) (NVIDIA)\r\n12:50:19:                  Driver: 551.23, CUDA: 12.4 (up to: 12.4), Compute: 7.5, cuDNN: 8.5\r\n12:50:19:System RAM:       32 GiB\r\n12:50:19:Platform:         Windows\r\n12:50:19:BuildConfig:      Release\r\n12:50:19:Execution Env:    Native\r\n12:50:19:Runtime Env:      Production\r\n12:50:19:.NET framework:   .NET 7.0.5\r\n12:50:19:Default Python:\r\n12:50:19:App DataDir:      C:\\ProgramData\\CodeProject\\AI\r\n12:50:19:Video adapter info:\r\n12:50:19:  NVIDIA GeForce GTX 1650:\r\n12:50:19:    Driver Version     31.0.15.5123\r\n12:50:19:    Video Processor    NVIDIA GeForce GTX 1650\r\n12:50:19:  Intel(R) UHD Graphics 630:\r\n12:50:19:    Driver Version     31.0.101.2115\r\n12:50:19:    Video Processor    Intel(R) UHD Graphics Family\r\n12:50:19:STARTING CODEPROJECT.AI SERVER\r\n12:50:19:RUNTIMES_PATH             = C:\\Program Files\\CodeProject\\AI\\runtimes\r\n12:50:19:PREINSTALLED_MODULES_PATH = C:\\Program Files\\CodeProject\\AI\\preinstalled-modules\r\n12:50:19:MODULES_PATH              = C:\\Program Files\\CodeProject\\AI\\modules\r\n12:50:19:PYTHON_PATH               = \\bin\\windows\\%PYTHON_NAME%\\venv\\Scripts\\python\r\n12:50:19:Data Dir                  = C:\\ProgramData\\CodeProject\\AI\r\n12:50:19:Server version:   2.5.1\r\n12:50:20:ModuleRunner Start\r\n12:50:20:Starting Background AI Modules\r\n12:50:23:Setting up initial modules. Please be patient...\r\n12:50:23:Installing initial module FaceProcessing.\r\n12:50:23:Preparing to install module 'FaceProcessing'\r\n12:50:23:Downloading module 'FaceProcessing'\r\n12:50:24:Installing module 'FaceProcessing'\r\n12:50:24:Installer script at 'C:\\Program Files\\CodeProject\\AI\\setup.bat'\r\n12:50:24:FaceProcessing:              Installing CodeProject.AI Analysis Module                \r\n12:50:24:FaceProcessing: ======================================================================\r\n12:50:25:FaceProcessing:                    CodeProject.AI Installer                           \r\n12:50:25:FaceProcessing: ======================================================================\r\n12:50:25:Current Version is 2.5.1\r\n12:50:25:Server: This is the latest version\r\n12:50:25:FaceProcessing: 309.1Gb of 482Gb available on Windows\r\n12:50:25:FaceProcessing: General CodeProject.AI setup                                          \r\n12:50:26:FaceProcessing: Creating Directories...Done\r\n12:50:26:FaceProcessing: GPU support                                                           \r\n12:50:27:FaceProcessing: CUDA Present...Yes (CUDA 12.3, cuDNN 8.5)\r\n12:50:28:FaceProcessing: ROCm Present...No\r\n12:50:31:FaceProcessing: Reading FaceProcessing settings.......Done\r\n12:50:31:FaceProcessing: Installing module Face Processing 1.10.0                              \r\n12:50:31:FaceProcessing: Installing Python 3.7\r\n12:50:32:FaceProcessing: Start-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:32:FaceProcessing: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:32:FaceProcessing: the file specified.\r\n12:50:32:FaceProcessing: At line:1 char:1\r\n12:50:32:FaceProcessing: + Start-BitsTransfer -Source 'https://codeproject-ai.s3.ca-central-1.am ...\r\n12:50:32:FaceProcessing: + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n12:50:32:FaceProcessing:     + CategoryInfo          : NotSpecified: (:) [Start-BitsTransfer], FileNotFoundException\r\n12:50:32:FaceProcessing:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.NewBi \r\n12:50:32:FaceProcessing:    tsTransferCommand\r\n12:50:33:FaceProcessing: Get-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:33:FaceProcessing: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:33:FaceProcessing: the file specified.\r\n12:50:33:FaceProcessing: At line:1 char:1\r\n12:50:33:FaceProcessing: + Get-BitsTransfer | Remove-BitsTransfer\r\n12:50:33:FaceProcessing: + ~~~~~~~~~~~~~~~~\r\n12:50:33:FaceProcessing:     + CategoryInfo          : NotSpecified: (:) [Get-BitsTransfer], FileNotFoundException\r\n12:50:33:FaceProcessing:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.GetBi \r\n12:50:33:FaceProcessing:    tsTransfer\r\n12:50:34:FaceProcessing: Start-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:34:FaceProcessing: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:34:FaceProcessing: the file specified.\r\n12:50:34:FaceProcessing: At line:1 char:1\r\n12:50:34:FaceProcessing: + Start-BitsTransfer -Source 'https://codeproject-ai.s3.ca-central-1.am ...\r\n12:50:34:FaceProcessing: + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n12:50:34:FaceProcessing:     + CategoryInfo          : NotSpecified: (:) [Start-BitsTransfer], FileNotFoundException\r\n12:50:34:FaceProcessing:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.NewBi \r\n12:50:34:FaceProcessing:    tsTransferCommand\r\n12:50:34:FaceProcessing: Downloading Python 3.7 interpreter...BITS transfer failed. Trying Powershell....\r\n12:50:35:FaceProcessing: Invoke-WebRequest : The term 'Invoke-WebRequest' is not recognized as the name of a cmdlet, function, script file, or \r\n12:50:35:FaceProcessing: operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try \r\n12:50:35:FaceProcessing: again.\r\n12:50:35:FaceProcessing: At line:1 char:1\r\n12:50:35:FaceProcessing: + Invoke-WebRequest 'https://codeproject-ai.s3.ca-central-1.amazonaws.c ...\r\n12:50:35:FaceProcessing: + ~~~~~~~~~~~~~~~~~\r\n12:50:35:FaceProcessing:     + CategoryInfo          : ObjectNotFound: (Invoke-WebRequest:String) [], CommandNotFoundException\r\n12:50:35:FaceProcessing:     + FullyQualifiedErrorId : CommandNotFoundException\r\n12:50:35:FaceProcessing: Download failed. Sorry.\r\n12:50:35:FaceProcessing: '\"C:\\Program Files\\CodeProject\\AI\\runtimes\\bin\\windows\\python37\\python.exe\"' is not recognized as an internal or external command,\r\n12:50:35:FaceProcessing: operable program or batch file.\r\n12:50:35:FaceProcessing: Creating Virtual Environment (Shared)...Done\r\n12:50:35:FaceProcessing: The system cannot find the path specified.\r\n12:50:35:FaceProcessing: Confirming we have Python 3.7 in our virtual environment...\r\n12:50:35:Module FaceProcessing installed successfully.\r\n12:50:35:Running module using: C:\\Program Files\\CodeProject\\AI\\runtimes\\bin\\windows\\python37\\venv\\Scripts\\python\r\n12:50:35:\r\n12:50:35:Attempting to start FaceProcessing with C:\\Program Files\\CodeProject\\AI\\runtimes\\bin\\windows\\python37\\venv\\Scripts\\python \"C:\\Program Files\\CodeProject\\AI\\modules\\FaceProcessing\\intelligencelayer\\face.py\"\r\n12:50:35:Starting C:\\Program Files...ws\\python37\\venv\\Scripts\\python \"C:\\Program Files...ing\\intelligencelayer\\face.py\"\r\n12:50:35:\r\n12:50:35:Module 'Face Processing' 1.10.0 (ID: FaceProcessing)\r\n12:50:35:Valid:         True\r\n12:50:35:Module Path:   <root>\\modules\\FaceProcessing\r\n12:50:35:AutoStart:     True\r\n12:50:35:Queue:         faceprocessing_queue\r\n12:50:35:Runtime:       python3.7\r\n12:50:35:Runtime Loc:   Shared\r\n12:50:35:FilePath:      intelligencelayer\\face.py\r\n12:50:35:Pre installed: False\r\n12:50:35:Start pause:   3 sec\r\n12:50:35:LogVerbosity:\r\n12:50:35:Platforms:     all,!raspberrypi,!jetson\r\n12:50:35:GPU Libraries: installed if available\r\n12:50:35:GPU Enabled:   enabled\r\n12:50:35:Parallelism:   0\r\n12:50:35:Accelerator:\r\n12:50:35:Half Precis.:  enable\r\n12:50:35:Environment Variables\r\n12:50:35:APPDIR             = <root>\\modules\\FaceProcessing\\intelligencelayer\r\n12:50:35:DATA_DIR           = C:\\ProgramData\\CodeProject\\AI\r\n12:50:35:MODE               = MEDIUM\r\n12:50:35:MODELS_DIR         = <root>\\modules\\FaceProcessing\\assets\r\n12:50:35:PROFILE            = desktop_gpu\r\n12:50:35:USE_CUDA           = True\r\n12:50:35:YOLOv5_AUTOINSTALL = false\r\n12:50:35:YOLOv5_VERBOSE     = false\r\n12:50:35:\r\n12:50:35:Error trying to start Face Processing (intelligencelayer/face.py)\r\n12:50:35:Error is: An error occurred trying to start process 'C:\\Program Files\\CodeProject\\AI\\runtimes\\bin\\windows\\python37\\venv\\Scripts\\python' with working directory 'C:\\Program Files\\CodeProject\\AI\\modules\\FaceProcessing'. The system cannot find the file specified.\r\n12:50:35:   at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo)\r\n   at CodeProject.AI.Server.Modules.ModuleProcessServices.StartProcess(ModuleConfig module, String installSummary)\r\n12:50:35:Please check the CodeProject.AI installation completed successfully\r\n12:50:35:Module FaceProcessing started successfully.\r\n12:50:35:Installer exited with code 255\r\n12:50:35:Installing initial module ObjectDetectionYOLOv5-6.2.\r\n12:50:35:Preparing to install module 'ObjectDetectionYOLOv5-6.2'\r\n12:50:35:Downloading module 'ObjectDetectionYOLOv5-6.2'\r\n12:50:35:Installing module 'ObjectDetectionYOLOv5-6.2'\r\n12:50:35:Installer script at 'C:\\Program Files\\CodeProject\\AI\\setup.bat'\r\n12:50:35:ObjectDetectionYOLOv5-6.2:              Installing CodeProject.AI Analysis Module                \r\n12:50:36:ObjectDetectionYOLOv5-6.2: ======================================================================\r\n12:50:36:ObjectDetectionYOLOv5-6.2:                    CodeProject.AI Installer                           \r\n12:50:36:ObjectDetectionYOLOv5-6.2: ======================================================================\r\n12:50:36:ObjectDetectionYOLOv5-6.2: 309.1Gb of 482Gb available on Windows\r\n12:50:36:ObjectDetectionYOLOv5-6.2: General CodeProject.AI setup                                          \r\n12:50:36:ObjectDetectionYOLOv5-6.2: Creating Directories...Done\r\n12:50:36:ObjectDetectionYOLOv5-6.2: GPU support                                                           \r\n12:50:37:ObjectDetectionYOLOv5-6.2: CUDA Present...Yes (CUDA 12.3, cuDNN 8.5)\r\n12:50:37:ObjectDetectionYOLOv5-6.2: ROCm Present...No\r\n12:50:40:ObjectDetectionYOLOv5-6.2: Reading ObjectDetectionYOLOv5-6.2 settings.......Done\r\n12:50:40:ObjectDetectionYOLOv5-6.2: Installing module Object Detection (YOLOv5 6.2) 1.9.0                 \r\n12:50:40:ObjectDetectionYOLOv5-6.2: Installing Python 3.7\r\n12:50:40:ObjectDetectionYOLOv5-6.2: '\"C:\\Program Files\\CodeProject\\AI\\runtimes\\bin\\windows\\python37\\python.exe\"' is not recognized as an internal or external command,\r\n12:50:40:ObjectDetectionYOLOv5-6.2: operable program or batch file.\r\n12:50:40:ObjectDetectionYOLOv5-6.2: Creating Virtual Environment (Shared)...Done\r\n12:50:40:ObjectDetectionYOLOv5-6.2: The system cannot find the path specified.\r\n12:50:40:ObjectDetectionYOLOv5-6.2: Confirming we have Python 3.7 in our virtual environment...\r\n12:50:40:Module ObjectDetectionYOLOv5-6.2 installed successfully.\r\n12:50:40:Running module using: C:\\Program Files\\CodeProject\\AI\\runtimes\\bin\\windows\\python37\\venv\\Scripts\\python\r\n12:50:40:\r\n12:50:40:Attempting to start ObjectDetectionYOLOv5-6.2 with C:\\Program Files\\CodeProject\\AI\\runtimes\\bin\\windows\\python37\\venv\\Scripts\\python \"C:\\Program Files\\CodeProject\\AI\\modules\\ObjectDetectionYOLOv5-6.2\\detect_adapter.py\"\r\n12:50:40:Starting C:\\Program Files...ws\\python37\\venv\\Scripts\\python \"C:\\Program Files...nYOLOv5-6.2\\detect_adapter.py\"\r\n12:50:40:\r\n12:50:40:Module 'Object Detection (YOLOv5 6.2)' 1.9.0 (ID: ObjectDetectionYOLOv5-6.2)\r\n12:50:40:Valid:         True\r\n12:50:40:Module Path:   <root>\\modules\\ObjectDetectionYOLOv5-6.2\r\n12:50:40:AutoStart:     True\r\n12:50:40:Queue:         objectdetection_queue\r\n12:50:40:Runtime:       python3.7\r\n12:50:40:Runtime Loc:   Shared\r\n12:50:40:FilePath:      detect_adapter.py\r\n12:50:40:Pre installed: False\r\n12:50:40:Start pause:   1 sec\r\n12:50:40:LogVerbosity:\r\n12:50:40:Platforms:     all,!raspberrypi,!jetson\r\n12:50:40:GPU Libraries: installed if available\r\n12:50:40:GPU Enabled:   enabled\r\n12:50:40:Parallelism:   0\r\n12:50:40:Accelerator:\r\n12:50:40:Half Precis.:  enable\r\n12:50:40:Environment Variables\r\n12:50:40:APPDIR             = <root>\\modules\\ObjectDetectionYOLOv5-6.2\r\n12:50:40:CUSTOM_MODELS_DIR  = <root>\\modules\\ObjectDetectionYOLOv5-6.2\\custom-models\r\n12:50:40:MODELS_DIR         = <root>\\modules\\ObjectDetectionYOLOv5-6.2\\assets\r\n12:50:40:MODEL_SIZE         = Medium\r\n12:50:40:USE_CUDA           = True\r\n12:50:40:YOLOv5_AUTOINSTALL = false\r\n12:50:40:YOLOv5_VERBOSE     = false\r\n12:50:40:\r\n12:50:40:Error trying to start Object Detection (YOLOv5 6.2) (detect_adapter.py)\r\n12:50:40:Error is: An error occurred trying to start process 'C:\\Program Files\\CodeProject\\AI\\runtimes\\bin\\windows\\python37\\venv\\Scripts\\python' with working directory 'C:\\Program Files\\CodeProject\\AI\\modules\\ObjectDetectionYOLOv5-6.2'. The system cannot find the file specified.\r\n12:50:40:   at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo)\r\n   at CodeProject.AI.Server.Modules.ModuleProcessServices.StartProcess(ModuleConfig module, String installSummary)\r\n12:50:40:Please check the CodeProject.AI installation completed successfully\r\n12:50:40:Module ObjectDetectionYOLOv5-6.2 started successfully.\r\n12:50:40:Installer exited with code 255\r\n12:50:40:Installing initial module ObjectDetectionYOLOv5Net.\r\n12:50:40:Preparing to install module 'ObjectDetectionYOLOv5Net'\r\n12:50:40:Downloading module 'ObjectDetectionYOLOv5Net'\r\n12:50:40:Installing module 'ObjectDetectionYOLOv5Net'\r\n12:50:40:Installer script at 'C:\\Program Files\\CodeProject\\AI\\setup.bat'\r\n12:50:40:ObjectDetectionYOLOv5Net:              Installing CodeProject.AI Analysis Module                \r\n12:50:40:ObjectDetectionYOLOv5Net: ======================================================================\r\n12:50:40:ObjectDetectionYOLOv5Net:                    CodeProject.AI Installer                           \r\n12:50:40:ObjectDetectionYOLOv5Net: ======================================================================\r\n12:50:41:ObjectDetectionYOLOv5Net: 309.1Gb of 482Gb available on Windows\r\n12:50:41:ObjectDetectionYOLOv5Net: General CodeProject.AI setup                                          \r\n12:50:41:ObjectDetectionYOLOv5Net: Creating Directories...Done\r\n12:50:41:ObjectDetectionYOLOv5Net: GPU support                                                           \r\n12:50:42:ObjectDetectionYOLOv5Net: CUDA Present...Yes (CUDA 12.3, cuDNN 8.5)\r\n12:50:42:ObjectDetectionYOLOv5Net: ROCm Present...No\r\n12:50:44:ObjectDetectionYOLOv5Net: Reading ObjectDetectionYOLOv5Net settings.......Done\r\n12:50:44:ObjectDetectionYOLOv5Net: Installing module Object Detection (YOLOv5 .NET) 1.9.2                \r\n12:50:45:ObjectDetectionYOLOv5Net: Start-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:45:ObjectDetectionYOLOv5Net: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:45:ObjectDetectionYOLOv5Net: the file specified.\r\n12:50:45:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:45:ObjectDetectionYOLOv5Net: + Start-BitsTransfer -Source 'https://codeproject-ai.s3.ca-central-1.am ...\r\n12:50:45:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n12:50:45:ObjectDetectionYOLOv5Net:     + CategoryInfo          : NotSpecified: (:) [Start-BitsTransfer], FileNotFoundException\r\n12:50:45:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.NewBi \r\n12:50:45:ObjectDetectionYOLOv5Net:    tsTransferCommand\r\n12:50:46:ObjectDetectionYOLOv5Net: Get-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:46:ObjectDetectionYOLOv5Net: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:46:ObjectDetectionYOLOv5Net: the file specified.\r\n12:50:46:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:46:ObjectDetectionYOLOv5Net: + Get-BitsTransfer | Remove-BitsTransfer\r\n12:50:46:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~\r\n12:50:46:ObjectDetectionYOLOv5Net:     + CategoryInfo          : NotSpecified: (:) [Get-BitsTransfer], FileNotFoundException\r\n12:50:46:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.GetBi \r\n12:50:46:ObjectDetectionYOLOv5Net:    tsTransfer\r\n12:50:47:ObjectDetectionYOLOv5Net: Start-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:47:ObjectDetectionYOLOv5Net: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:47:ObjectDetectionYOLOv5Net: the file specified.\r\n12:50:47:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:47:ObjectDetectionYOLOv5Net: + Start-BitsTransfer -Source 'https://codeproject-ai.s3.ca-central-1.am ...\r\n12:50:47:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n12:50:47:ObjectDetectionYOLOv5Net:     + CategoryInfo          : NotSpecified: (:) [Start-BitsTransfer], FileNotFoundException\r\n12:50:47:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.NewBi \r\n12:50:47:ObjectDetectionYOLOv5Net:    tsTransferCommand\r\n12:50:47:ObjectDetectionYOLOv5Net: Downloading ObjectDetectionYOLOv5Net-DirectML-1.9.2.zip...BITS transfer failed. Trying Powershell....\r\n12:50:48:ObjectDetectionYOLOv5Net: Invoke-WebRequest : The term 'Invoke-WebRequest' is not recognized as the name of a cmdlet, function, script file, or \r\n12:50:48:ObjectDetectionYOLOv5Net: operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try \r\n12:50:48:ObjectDetectionYOLOv5Net: again.\r\n12:50:48:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:48:ObjectDetectionYOLOv5Net: + Invoke-WebRequest 'https://codeproject-ai.s3.ca-central-1.amazonaws.c ...\r\n12:50:48:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~~\r\n12:50:48:ObjectDetectionYOLOv5Net:     + CategoryInfo          : ObjectNotFound: (Invoke-WebRequest:String) [], CommandNotFoundException\r\n12:50:48:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : CommandNotFoundException\r\n12:50:48:ObjectDetectionYOLOv5Net: Download failed. Sorry.\r\n12:50:48:ObjectDetectionYOLOv5Net: Failed to download and extract ObjectDetectionYOLOv5Net-DirectML-1.9.2.zip\r\n12:50:49:ObjectDetectionYOLOv5Net: Start-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:49:ObjectDetectionYOLOv5Net: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:49:ObjectDetectionYOLOv5Net: the file specified.\r\n12:50:49:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:49:ObjectDetectionYOLOv5Net: + Start-BitsTransfer -Source 'https://codeproject-ai.s3.ca-central-1.am ...\r\n12:50:49:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n12:50:49:ObjectDetectionYOLOv5Net:     + CategoryInfo          : NotSpecified: (:) [Start-BitsTransfer], FileNotFoundException\r\n12:50:49:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.NewBi \r\n12:50:49:ObjectDetectionYOLOv5Net:    tsTransferCommand\r\n12:50:50:ObjectDetectionYOLOv5Net: Get-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:50:ObjectDetectionYOLOv5Net: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:50:ObjectDetectionYOLOv5Net: the file specified.\r\n12:50:50:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:50:ObjectDetectionYOLOv5Net: + Get-BitsTransfer | Remove-BitsTransfer\r\n12:50:50:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~\r\n12:50:50:ObjectDetectionYOLOv5Net:     + CategoryInfo          : NotSpecified: (:) [Get-BitsTransfer], FileNotFoundException\r\n12:50:50:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.GetBi \r\n12:50:50:ObjectDetectionYOLOv5Net:    tsTransfer\r\n12:50:51:ObjectDetectionYOLOv5Net: Start-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:51:ObjectDetectionYOLOv5Net: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:51:ObjectDetectionYOLOv5Net: the file specified.\r\n12:50:51:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:51:ObjectDetectionYOLOv5Net: + Start-BitsTransfer -Source 'https://codeproject-ai.s3.ca-central-1.am ...\r\n12:50:51:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n12:50:51:ObjectDetectionYOLOv5Net:     + CategoryInfo          : NotSpecified: (:) [Start-BitsTransfer], FileNotFoundException\r\n12:50:51:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.NewBi \r\n12:50:51:ObjectDetectionYOLOv5Net:    tsTransferCommand\r\n12:50:51:ObjectDetectionYOLOv5Net: Downloading YOLO ONNX models...BITS transfer failed. Trying Powershell....\r\n12:50:52:ObjectDetectionYOLOv5Net: Invoke-WebRequest : The term 'Invoke-WebRequest' is not recognized as the name of a cmdlet, function, script file, or \r\n12:50:52:ObjectDetectionYOLOv5Net: operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try \r\n12:50:52:ObjectDetectionYOLOv5Net: again.\r\n12:50:52:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:52:ObjectDetectionYOLOv5Net: + Invoke-WebRequest 'https://codeproject-ai.s3.ca-central-1.amazonaws.c ...\r\n12:50:52:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~~\r\n12:50:52:ObjectDetectionYOLOv5Net:     + CategoryInfo          : ObjectNotFound: (Invoke-WebRequest:String) [], CommandNotFoundException\r\n12:50:52:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : CommandNotFoundException\r\n12:50:52:ObjectDetectionYOLOv5Net: Download failed. Sorry.\r\n12:50:52:ObjectDetectionYOLOv5Net: Failed to download and extract yolonet-models.zip\r\n12:50:53:ObjectDetectionYOLOv5Net: Start-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:53:ObjectDetectionYOLOv5Net: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:53:ObjectDetectionYOLOv5Net: the file specified.\r\n12:50:53:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:53:ObjectDetectionYOLOv5Net: + Start-BitsTransfer -Source 'https://codeproject-ai.s3.ca-central-1.am ...\r\n12:50:53:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n12:50:53:ObjectDetectionYOLOv5Net:     + CategoryInfo          : NotSpecified: (:) [Start-BitsTransfer], FileNotFoundException\r\n12:50:53:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.NewBi \r\n12:50:53:ObjectDetectionYOLOv5Net:    tsTransferCommand\r\n12:50:53:ObjectDetectionYOLOv5Net: Get-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:53:ObjectDetectionYOLOv5Net: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:53:ObjectDetectionYOLOv5Net: the file specified.\r\n12:50:54:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:54:ObjectDetectionYOLOv5Net: + Get-BitsTransfer | Remove-BitsTransfer\r\n12:50:54:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~\r\n12:50:54:ObjectDetectionYOLOv5Net:     + CategoryInfo          : NotSpecified: (:) [Get-BitsTransfer], FileNotFoundException\r\n12:50:54:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.GetBi \r\n12:50:54:ObjectDetectionYOLOv5Net:    tsTransfer\r\n12:50:54:ObjectDetectionYOLOv5Net: Start-BitsTransfer : Could not load file or assembly 'Microsoft.BackgroundIntelligentTransfer.Management.Interop, \r\n12:50:54:ObjectDetectionYOLOv5Net: Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find \r\n12:50:54:ObjectDetectionYOLOv5Net: the file specified.\r\n12:50:54:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:54:ObjectDetectionYOLOv5Net: + Start-BitsTransfer -Source 'https://codeproject-ai.s3.ca-central-1.am ...\r\n12:50:54:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n12:50:54:ObjectDetectionYOLOv5Net:     + CategoryInfo          : NotSpecified: (:) [Start-BitsTransfer], FileNotFoundException\r\n12:50:54:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.BackgroundIntelligentTransfer.Management.NewBi \r\n12:50:54:ObjectDetectionYOLOv5Net:    tsTransferCommand\r\n12:50:54:ObjectDetectionYOLOv5Net: Downloading Custom YOLO ONNX models...BITS transfer failed. Trying Powershell....\r\n12:50:55:ObjectDetectionYOLOv5Net: Invoke-WebRequest : The term 'Invoke-WebRequest' is not recognized as the name of a cmdlet, function, script file, or \r\n12:50:55:ObjectDetectionYOLOv5Net: operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try \r\n12:50:55:ObjectDetectionYOLOv5Net: again.\r\n12:50:55:ObjectDetectionYOLOv5Net: At line:1 char:1\r\n12:50:55:ObjectDetectionYOLOv5Net: + Invoke-WebRequest 'https://codeproject-ai.s3.ca-central-1.amazonaws.c ...\r\n12:50:55:ObjectDetectionYOLOv5Net: + ~~~~~~~~~~~~~~~~~\r\n12:50:55:ObjectDetectionYOLOv5Net:     + CategoryInfo          : ObjectNotFound: (Invoke-WebRequest:String) [], CommandNotFoundException\r\n12:50:55:ObjectDetectionYOLOv5Net:     + FullyQualifiedErrorId : CommandNotFoundException\r\n12:50:55:ObjectDetectionYOLOv5Net: Download failed. Sorry.\r\n12:50:55:ObjectDetectionYOLOv5Net: Failed to download and extract yolonet-custom-models.zip\r\n12:50:55:ObjectDetectionYOLOv5Net: Self test: .\\bin\\ObjectDetectionYOLOv5Net.exe does not exist\r\n12:50:55:ObjectDetectionYOLOv5Net: No self-test available\r\n12:50:55:ObjectDetectionYOLOv5Net: Module setup time 00:00:13.56\r\n12:50:56:ObjectDetectionYOLOv5Net: Setup complete                                                        \r\n12:50:56:ObjectDetectionYOLOv5Net: Total setup time 00:00:15.06\r\n12:50:56:Module ObjectDetectionYOLOv5Net installed successfully.\r\n12:50:56:Module ObjectDetectionYOLOv5Net not configured to AutoStart.\r\n12:50:56:Installer exited with code 0\n\nWhat I have tried:\n\r\nI have uninstalled codeproject and stopped blueiris while trying to install codeproject. I also reinstalled python and updated NVIDIA drivers.\r\n\t\t    ", "id": "5376484", "title": "Can't get modules to run after updating to latest CodeProject server version", "traffic_rate": 0}, "saved_time": "Tue, 16 Jul 2024 04:00:48 GMT", "source": "codeproject", "tags": ["BlueIris"]}]}