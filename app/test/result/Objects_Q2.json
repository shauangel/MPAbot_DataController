{"result": [{"answers": [{"content": "One paradigm that's known in Java is to use Enums. In python it's possible to do it as well check here. Basically you define a metadata class like this: then you define your constants class", "id": 75686449, "owner_tier": 0.3, "score": -4.761904732964423e-10}, {"content": "While the Aaron's answer is the preferred way you can also use metaclasses:", "id": 2546692, "owner_tier": 0.5, "score": 0.14285714238095237}, {"content": "In Python, a class block isn't just a declaration; it's executed at run time to build the class.  Each def inside the class builds a function and binds the name into the class's namespace.  For that reason, you can't simply do A = MyClass() directly inside the class block, because MyClass() isn't fully defined until the class block closes.  Here's how to do it:", "id": 2546668, "owner_tier": 0.9, "score": 0.14285714238095237}, {"content": "After you defined the class, just add these two lines: A class in Python is an object like any other and you can add new variables at any time. You just can't do it inside the class since it's not defined at that time (it will be added to the symbol table only after the whole code for the class has been parsed correctly).", "id": 2546626, "owner_tier": 0.9, "score": 0.9999999995238095}], "link": "https://stackoverflow.com/questions/2546608/create-static-instances-of-a-class-inside-said-class-in-python", "question": {"content": "Apologies if I've got the terminology wrong here\u2014I can't think what this particular idiom would be called. I've been trying to create a Python 3 class that statically declares instances of itself inside itself\u2014sort of like an enum would work. Here's a simplified version of the code I wrote: Writing this, I got an exception on line 2 (A = Test(\"A\")). I assume line 3 would also error if it had made it that far. Using __class__ instead of Test gives the same error. Is there any way to refer to the current class in a static context in Python? I could declare these particular variables outside the class or in a separate class, but for clarity's sake, I'd rather not if I can help it. To better demonstrate what I'm trying to do, here's the same example in Java: This works as you would expect: it prints: How can I do the same thing in Python?", "id": 2546608, "title": "Create static instances of a class inside said class in Python", "traffic_rate": 0}, "saved_time": 1721102345, "source": "stackoverflow", "tags": ["python"]}, {"answers": [{"content": "Use @classmethod: This will result in: [[2,2,2]] /edit/\nthe using normal method example I mention in my comment below (based on Jacques explanation):", "id": 48445495, "owner_tier": 0.5, "score": -9.99999993922529e-09}, {"content": "This runs flawlessly on Python 3.6: Or, with the extra info in your comment:", "id": 48445569, "owner_tier": 0.5, "score": 0.9999999900000001}], "link": "https://stackoverflow.com/questions/48445403/populate-once-static-variable-from-static-method-python-within-a-class", "question": {"content": "I have a Class A in Python and I would like to populate the a static variable calling a static method like: when I run the code I got 'NameError: name A not defined' so essentially I can't initialize the arr static variable. Essentially once the the class has been instantiated once I would like to populate the static variable ", "id": 48445403, "title": "Populate once static variable from static method Python within a class", "traffic_rate": 1}, "saved_time": 1721102345, "source": "stackoverflow", "tags": ["python", "class", "static-methods", "static-variables"]}, {"answers": [{"content": "Ancient thread, but one way to make this work is: Then, you can use it like so: Seems the most 'Pythonic' to me, anyway. Example use case: singleton class where I register handlers for conversion between types. Cheers!", "id": 69410486, "owner_tier": 0.1, "score": 0.0666666666}, {"content": "You could use a classmethod or staticmethod classmethod has advantage that it would work with sub classes, if you really wanted that functionality. module is certainly best though.", "id": 30557075, "owner_tier": 0.7, "score": 0.1466666666}, {"content": "Seems that you need classmethod:", "id": 30556883, "owner_tier": 0.5, "score": -6.666666626150193e-11}, {"content": "The Pythonic way to create a static class is simply to declare those methods outside of a class (Java uses classes both for objects and for grouping related functions, but Python modules are sufficient for grouping related functions that do not require any object instance). However, if you insist on making a method at the class level that doesn't require an instance (rather than simply making it a free-standing function in your module), you can do so by using the \"@staticmethod\" decorator. That is, the Pythonic way would be: But if you want to mirror the structure of Java, you can do: You can also do this with @classmethod if you care to know the specific class (which can be handy if you want to allow the static method to be inherited by a class inheriting from this class):", "id": 30556886, "owner_tier": 0.9, "score": 0.9999999999333333}, {"content": "There are two ways to do that (Python 2.6+): your module file, called klass.py your code:", "id": 30556904, "owner_tier": 0.5, "score": 0.11999999993333332}], "link": "https://stackoverflow.com/questions/30556857/creating-a-static-class-with-no-instances", "question": {"content": "All of the tutorials I see online show how to create classes with __init__ constructor methods so one can declare objects of that type, or instances of that class. How do I create a class (static in Java) so that I can access all methods and attributes of that class without having to create new instances/objects? For example: error: name 'allAirports' is  not defined", "id": 30556857, "title": "Creating a static class with no instances", "traffic_rate": 87}, "saved_time": 1721102345, "source": "stackoverflow", "tags": ["python", "class", "object", "static"]}, {"answers": [{"content": "You can also create a class decorator, which I personally prefer over a metaclass in aesthetics: so that: outputs: 5.641895835477563 EDIT: @Blckknght correctly points out that a function is not a bound method until it is actually bound to an instance, which the class object is not. Switching to isinstance(value, types.FunctionType) would allow proper wrapping.", "id": 57931557, "owner_tier": 0.9, "score": -9.99999993922529e-09}, {"content": "Your metaclass isn't actually doing anything, because types.MethodType matches only bound method objects. You aren't getting any of those when you browse through the class namespace in __new__, so you never wrap anything in staticmethod. You can fix it by changing the check to types.FunctionType (this will probably satisfy automated tools who will correctly see the method types): But I'd suggest just doing away with the classes and using functions directly. Functions are first class objects in Python, you can pass them around between objects as much as you want. If you want a handy grouping of them, you can put them in lists or dictionaries, or use modules to collect their code in various groupings (and use packages to group modules). I'd also advise you to avoid using leading double-underscore __names to try to get privacy for your attributes by invoking name mangling. It doesn't actually protect your data from anything (outside code can still get at it), and it makes it a whole lot harder to debug. It's included in Python to help you avoid accidental name collisions, not to protect member variables as a matter of course.", "id": 57931610, "owner_tier": 0.9, "score": 0.9999999900000001}, {"content": "Why not encapsulate your code at the module level, instead of class, and offer functions to your users? Your code could be as simple as that:", "id": 57931546, "owner_tier": 0.9, "score": -9.99999993922529e-09}], "link": "https://stackoverflow.com/questions/57931486/make-static-class-in-python", "question": {"content": "I like to create helper classes that can be used by other classes and where all methods are static (staticmethod). I need to wrap each method with a decorator @staticmethod, but this solution seems to me not very aesthetic. I decided to create a metaclass for such classes - tools, here is an abstract implementation example: Everything works and gives the correct result, but there are understandable and predictable problems with code inspection in the IDE (I use Pycharm 2019.2). for def get_radius_from_area(area):\nUsually first parameter of a method in named 'self'.\n'area' highlighted in yellow in the return of the method. for get_pi():\nMethod must have a first parameter, usually called 'self'\nVoid in brackets with out arguments is underlined in red. If I add the line \"# noinspection PyMethodParameters\" above the class this partially solves the problem, but it looks even worse than dozens of @staticmethods. I understand why this is happening and why the developers from JetBrains specially adapt parts of the code in their IDE for Django.  But can I somehow beautifully create a purely static class, in which all methods are static?\nMaybe metaclasses are not the best option and is there some kind of alternative solution?", "id": 57931486, "title": "Make static class in Python", "traffic_rate": 2958}, "saved_time": 1721102345, "source": "stackoverflow", "tags": ["python", "python-3.x", "pep8"]}, {"answers": [{"content": "You might actually want a singleton class rather than a static class:\nMaking a singleton class in python", "id": 36810557, "owner_tier": 0.5, "score": -2.5641025485193053e-10}, {"content": "In my experience creating a class is a very good solution for a number of reasons. One is that you wind up using the class as a 'normal' class (esp. making more than just one instance) more often than you might think. It's also a reasonable style choice to stick with classes for everthing; this can make it easier for others who read/maintain your code, esp if they are very OO - they will be comfortable with classes. As noted in other replies, it's also reasonable to just use 'bare' functions for the implementation. You may wish to start with a class and make it a singleton/Borg pattern (lots of examples if you googlefor these); it gives you the flexibility to (re)use the class to meet other needs. I would recommend against the 'static class' approach as being non-conventional and non-Pythonic, which makes it harder to read and maintain.", "id": 10388323, "owner_tier": 0.5, "score": 0.33333333307692303}, {"content": "There are a few approaches you might take for this.  As others have mentioned, you could just use module-level functions.  In this case, the module itself is the namespace that holds them together.  Another option, which can be useful if you need to keep track of state, is to define a class with normal methods (taking self), and then define a single global instance of it, and copy its instance methods to the module namespace.  This is the approach taken by the standard library \"random\" module -- take a look at lib/python2.5/random.py in your python directory.  At the bottom, it has something like this: Or you can take the basic approach you described (though I would recommend using @staticmethod rather than @classmethod in most cases).", "id": 10388302, "owner_tier": 0.5, "score": 0.12820512794871794}, {"content": "It's terrible style, unless you actually need to access the class. A static method [...] does not translate to a Python classmethod. Oh sure, it results in more or less the same effect, but the goal of a classmethod is actually to do something that's usually not even possible [...] (like inheriting a non-default constructor). The idiomatic translation of a [...] static method is usually a module-level function, not a classmethod or staticmethod. source", "id": 10388168, "owner_tier": 0.9, "score": 0.3589743587179487}, {"content": "Generally, usage like this is better done by just using functions in a module, without a class at all.", "id": 10388155, "owner_tier": 0.9, "score": 0.9999999997435898}], "link": "https://stackoverflow.com/questions/10388127/static-classes-in-python", "question": {"content": "I once read (I think on a page from Microsoft) that it's a good way to use static classes, when you don't NEED two or more instances of a class. I'm writing a program in Python. Is it a bad style, if I use @classmethod for every method of a class?", "id": 10388127, "title": "Static classes in Python", "traffic_rate": 15}, "saved_time": 1721102345, "source": "stackoverflow", "tags": ["python", "class", "static", "instance", "class-method"]}, {"answers": [{"content": "There are two ways to access a class attribute: you can either access it directly on a class, or you can read it through self (but not rebind it). Accessing a class attribute through self won't work if there is already a value set directly on the instance so you would normally try to use the class to access a class attribute. When you write self.counter += 1 this is a shorthand for self.counter = self.counter + 1 and as with any other binding through self it sets an instance attribute. This can be useful if you want a default value for instance attributes, you can set them as class attributes and then just update them in the instances which want different values, but to avoid confusion you probably want to avoid using self at all when accessing class attributes. You can also consider making the count method into a class method and moving the increment into another method: if you do that then each subclass will have its own independent counter. That may or may not be what you want here. The cls parameter here is the class that was actually instantiated, this can be useful if you can a whole class hierarchy, or even just a base class CountsInstances where you can put this code once and reuse it with multiple independent counters. Decorating each function with @staticmethod will give you something close to the Java code:", "id": 49736807, "owner_tier": 0.9, "score": 0.9999999994444444}, {"content": "Do not use Cls. Instead you should increment the static variable: If you fix  this way, you can still call count() on instances as well as directly on the class. Output: See What is the difference between @staticmethod and @classmethod in Python? for further infos.", "id": 49736835, "owner_tier": 0.9, "score": -5.555555555555555e-10}], "link": "https://stackoverflow.com/questions/49736753/how-do-i-use-a-static-variable-inside-a-class-in-python", "question": {"content": "I'm learning python, what I want to have is a static counter that counts the number of times the class has been instantiated, but every time I create an instance counter gets recreated and count() function always returns 1.\nI want something that in java would look like this", "id": 49736753, "title": "How do I use a static variable inside a class in Python", "traffic_rate": 12065}, "saved_time": 1721102345, "source": "stackoverflow", "tags": ["python", "python-3.x"]}, {"answers": [{"content": "Just remove the self in the function definition. Since your using the static functions so you need not pass self as an argument for the functions.\nSo your class and function should be like this:", "id": 41512429, "owner_tier": 0.1, "score": 0.010989010879120879}, {"content": "Static methods don't get the object passed in as the first parameter (no object) remove the self parameter and the calls should work.\nThe import problem is relevant too.\nAnd the static comment relevant too.", "id": 12735484, "owner_tier": 0.1, "score": 0.06593406582417582}, {"content": "Just remove self in methods definition. Your intention is to use as static. Self is to work with instance of that class.", "id": 32437762, "owner_tier": 0.1, "score": 0.02197802186813187}, {"content": "If you want to use your functions defined in the class, you have just to create an instance of your class and apply the function. So the result is : Just add () after your class name. @staticmethod is not needed as you are using standard function, not static. But in your case the result is the same.", "id": 24239880, "owner_tier": 0.1, "score": -1.0989010922225593e-10}, {"content": "You're getting the error because you're taking a self argument in each of those functions. They're static, you don't need it. However, the 'pythonic' way of doing this is not to have a class full of static methods, but to just make them free functions in a module. Now, in your other python files (assuming fileutility.py is in the same directory or on the PYTHONPATH) It doesn't mention static methods specifically, but if you're coming from a different language, PEP 8, the python style guide is a good read and introduction to how python programmers think.", "id": 12735474, "owner_tier": 0.5, "score": 0.99999999989011}, {"content": "In python, java-like (or whatever) static methods are not widely used as they don't really have a purpose. Instead, you should simply define your \"methods\" as functions in a module:", "id": 12735464, "owner_tier": 0.9, "score": 0.03296703285714286}, {"content": "You really shouldn't be creating static methods in Python. What you should be doing is putting them at the global function level, and then accessing the module they're in when you call them. foo.py: baz.py:", "id": 12735459, "owner_tier": 0.9, "score": 0.07692307681318682}], "link": "https://stackoverflow.com/questions/12735392/python-class-static-methods", "question": {"content": "I want to create a kind of utility class which contains only static methods which are callable by the name class prefix. Looks like I'm doing something wrong :) Here is my small class: Now my \"main\" method: and I got an error: unbound method GetFilePath() must be called with FileUtility instance as first argument (got str instance instead). A have a few questions here: The new main:", "id": 12735392, "title": "Python class static methods", "traffic_rate": 38}, "saved_time": 1721102345, "source": "stackoverflow", "tags": ["python", "static"]}, {"answers": [{"content": "If all the methods are static, you DON'T need a class. (Same if you have a class with only an init and 1 method) Then you use it mostly like: then I use it this way: Isn't this cleaner and simpler?", "id": 42758390, "owner_tier": 0.5, "score": 0.9999999992857143}, {"content": "Described case is too general to give the exact recipe. Relying on just your sample regular functions looks better here rather than decorator's and class complexity.", "id": 42758430, "owner_tier": 0.3, "score": -7.142857099446636e-10}], "link": "https://stackoverflow.com/questions/42757961/a-class-with-all-static-methods", "question": {"content": "I have a python Class with all methods being static, Is it the right way to do so?", "id": 42757961, "title": "a class with all static methods", "traffic_rate": 10021}, "saved_time": 1721102345, "source": "stackoverflow", "tags": ["python", "python-3.x"]}, {"answers": [{"content": "There are many ways to declare Static Methods or Variables in python. One can simply put a decorator above a method(function) declared to make it a static method. For eg. This method can receive an argument which is of function type, and it returns a static version of the function passed. For eg. @classmethod has similar effect on a function as @staticmethod has, but\nthis time, an additional argument is needed to be accepted in the function (similar to self parameter for instance variables). For eg. @classmethod can also be used as a parameter function, in case one doesn't want to modify class definition. For eg. A method/variable declared outside all other methods, but inside a class is automatically static. Refer to Python Documentation for mastering OOP in python.", "id": 69723203, "owner_tier": 0.3, "score": 0.002542372877118644}, {"content": "You can create the class variable x, the instance variable name, the instance method test1(self), the class method test2(cls) and the static method test3() as shown below: I explain about class variable in my answer and class method and static method in my answer and instance method in my answer.", "id": 74501446, "owner_tier": 0.1, "score": 0.00042372880932203393}, {"content": "Assuming you are not looking for a truly static variable but rather something pythonic that will do the same sort of job for consenting adults, then use a class variable.\nThis will provide you with a variable which all instances can access (and update) Beware: Many of the other answers which use a class variable will break subclassing. You should avoid referencing the class directly by name. will give you the same functionality as using Sheldon.foo to address the variable and will pass tests like these: It will also allow someone else to simply: which will also work: For great advice on things to watch out for when creating classes check out Raymond Hettinger's video https://www.youtube.com/watch?v=HTLu2DFOdTg", "id": 72141879, "owner_tier": 0.1, "score": -4.237288109841224e-12}, {"content": "As the other answers have noted, static and class methods are easily accomplished using the built-in decorators: As usual, the first argument to my_method() is bound to the class instance object. In contrast, the first argument to my_class_method() is bound to the class object itself (e.g., in this case, Test). For my_static_method(), none of the arguments are bound, and having arguments at all is optional. However, implementing \"static variables\" (well, mutable static variables, anyway, if that's not a contradiction in terms...) is not as straight forward. As millerdev pointed out in his answer, the problem is that Python's class attributes are not truly \"static variables\". Consider: This is because the line x.i = 12 has added a new instance attribute i to x instead of changing the value of the Test class i attribute. Partial expected static variable behavior, i.e., syncing of the attribute between multiple instances (but not with the class itself; see \"gotcha\" below), can be achieved by turning the class attribute into a property: Now you can do: The static variable will now remain in sync between all class instances. (NOTE: That is, unless a class instance decides to define its own version of _i! But if someone decides to do THAT, they deserve what they get, don't they???) Note that technically speaking, i is still not a 'static variable' at all; it is a property, which is a special type of descriptor. However, the property behavior is now equivalent to a (mutable) static variable synced across all class instances. For immutable static variable behavior, simply omit the property setter: Now attempting to set the instance i attribute will return an AttributeError: Note that the above methods only work with instances of your class - they will not work when using the class itself. So for example: The line assert Test.i == x.i produces an error, because the i attribute of Test and x are two different objects. Many people will find this surprising. However, it should not be. If we go back and inspect our Test class definition (the second version), we take note of this line: Clearly, the member i of Test must be a property object, which is the type of object returned from the property function. If you find the above confusing, you are most likely still thinking about it from the perspective of other languages (e.g. Java or c++). You should go study the property object, about the order in which Python attributes are returned, the descriptor protocol, and the method resolution order (MRO). I present a solution to the above 'gotcha' below; however I would suggest - strenuously - that you do not try to do something like the following until - at minimum - you thoroughly understand why assert Test.i = x.i causes an error. I present the (Python 3) solution below for informational purposes only. I am not endorsing it as a \"good solution\". I have my doubts as to whether emulating the static variable behavior of other languages in Python is ever actually necessary. However, regardless as to whether it is actually useful, the below should help further understanding of how Python works. UPDATE: this attempt is really pretty awful; if you insist on doing something like this (hint: please don't; Python is a very elegant language and shoe-horning it into behaving like another language is just not necessary), use the code in Ethan Furman's answer instead. Emulating static variable behavior of other languages using a metaclass A metaclass is the class of a class. The default metaclass for all classes in Python (i.e., the \"new style\" classes post Python 2.3 I believe) is type. For example: However, you can define your own metaclass like this: And apply it to your own class like this (Python 3 only): Below is a metaclass I have created which attempts to emulate \"static variable\" behavior of other languages. It basically works by replacing the default getter, setter, and deleter with versions which check to see if the attribute being requested is a \"static variable\". A catalog of the \"static variables\" is stored in the StaticVarMeta.statics attribute. All attribute requests are initially attempted to be resolved using a substitute resolution order. I have dubbed this the \"static resolution order\", or \"SRO\". This is done by looking for the requested attribute in the set of \"static variables\" for a given class (or its parent classes). If the attribute does not appear in the \"SRO\", the class will fall back on the default attribute get/set/delete behavior (i.e., \"MRO\").", "id": 27568860, "owner_tier": 0.9, "score": 0.12245762711440678}, {"content": "Variables declared inside the class definition, but not inside a method are class or static variables: As @millerdev points out, this creates a class-level i variable, but this is distinct from any instance-level i variable, so you could have This is different from C++ and Java, but not so different from C#, where a static member can't be accessed using a reference to an instance. See what the Python tutorial has to say on the subject of classes and class objects. @Steve Johnson has already answered regarding static methods, also documented under \"Built-in Functions\" in the Python Library Reference. @beidy recommends classmethods over staticmethod, as the method then receives the class type as the first argument.", "id": 68672, "owner_tier": 0.9, "score": 0.9999999999957627}, {"content": "With Object datatypes it is possible. But with primitive types like  bool, int, float or str bahaviour is different from other OOP languages. Because in inherited class static attribute does not exist. If attribute does not exists in inherited class, Python start to look for it in parent class. If found in parent class, its value will be returned. When you decide to change value in inherited class, static attribute will be created in runtime. In next time of reading inherited static attribute its value will be returned, bacause it is already defined. Objects (lists, dicts) works as a references so it is safe to use them as static attributes and inherit them. Object address is not changed when you change its attribute values. Example with integer data type: Solution based on refdatatypes library:", "id": 68682495, "owner_tier": 0.1, "score": 0.004661016944915254}, {"content": "Not like the @staticmethod but class variables are static method of class and are shared with all the instances. Now you can access it like or you have to assign the value to these variables I was trying and assigning the value in one method call, in that case it will not work and will throw an error", "id": 66255775, "owner_tier": 0.5, "score": -4.237288109841224e-12}, {"content": "@dataclass definitions provide class-level names that are used to define the instance variables and the initialization method, __init__(). If you want class-level variable in @dataclass you should use typing.ClassVar type hint. The ClassVar type's parameters define the class-level variable's type. Usage examples:", "id": 65918726, "owner_tier": 0.9, "score": 0.0063559321991525424}, {"content": "Put it this way the static variable is created when a user-defined a class come into existence and the define a static variable it should follow the keyword self,", "id": 62960717, "owner_tier": 0.1, "score": 0.00042372880932203393}, {"content": "If you are attempting to share a static variable for, by example, increasing it across other instances, something like this script works fine:", "id": 61805905, "owner_tier": 0.1, "score": 0.001271186436440678}, {"content": "So this is probably a hack, but I've been using eval(str) to obtain an static object, kind of a contradiction, in python 3. There is an Records.py file that has nothing but class objects defined with static methods and constructors that save some arguments.  Then from another .py file I import Records but i need to dynamically select each object and then instantiate it on demand according to the type of data being read in. So where object_name = 'RecordOne' or the class name, I call cur_type = eval(object_name) and then to instantiate it you do cur_inst = cur_type(args)\nHowever before you instantiate you can call static methods from cur_type.getName() for example, kind of like abstract base class implementation or whatever the goal is.  However in the backend, it's probably instantiated in python and is not truly static, because eval is returning an object....which must have been instantiated....that gives static like behavior.", "id": 61080153, "owner_tier": 0.1, "score": 0.001271186436440678}, {"content": "@Blair Conrad said static variables declared inside the class definition, but not inside a method are class or \"static\" variables: There are a few gotcha's here. Carrying on from the example above: Notice how the instance variable t.i got out of sync with the \"static\" class variable when the attribute i was set directly on t. This is because i was re-bound within the t namespace, which is distinct from the Test namespace. If you want to change the value of a \"static\" variable, you must change it within the scope (or object) where it was originally defined. I put \"static\" in quotes because Python does not really have static variables in the sense that C++ and Java do. Although it doesn't say anything specific about static variables or methods, the Python tutorial has some relevant information on classes and class objects.  @Steve Johnson also answered regarding static methods, also documented under \"Built-in Functions\" in the Python Library Reference. @beid also mentioned classmethod, which is similar to staticmethod. A classmethod's first argument is the class object. Example: ", "id": 69067, "owner_tier": 0.5, "score": 0.32711864406355934}, {"content": "You can use a list or a dictionary to get \"static behavior\" between instances.", "id": 58683325, "owner_tier": 0.5, "score": 0.000847457622881356}, {"content": "Yes, definitely possible to write static variables and methods in python. Static Variables :\nVariable declared at class level are called static variable which can be accessed directly using class name. Instance variables: Variables that are related and accessed by instance of a class are instance variables. Static Methods: Similar to variables, static methods can be accessed directly using class Name. No need to create an instance.  But keep in mind, a static method cannot call a non-static method in python.", "id": 53775598, "owner_tier": 0.5, "score": 0.004237288131355932}, {"content": "One very interesting point about Python's attribute lookup is that it can be used to create \"virtual variables\": Normally there aren't any assignments to these after they are created.  Note that the lookup uses self because, although label is static in the sense of not being associated with a particular instance, the value still depends on the (class of the) instance.", "id": 46335281, "owner_tier": 0.9, "score": 0.004661016944915254}, {"content": "Static methods in python are called classmethods. Take a look at the following code Notice that when we call the method myInstanceMethod, we get an error. This is because it requires that method be called on an instance of this class. The method myStaticMethod is set as a classmethod using the decorator @classmethod. Just for kicks and giggles, we could call myInstanceMethod on the class by passing in an instance of the class, like so:", "id": 68770, "owner_tier": 0.5, "score": 0.009322033894067796}, {"content": "Absolutely Yes,\n  Python by itself don't have any static data member explicitly, but We can have by doing so  output explanation", "id": 42392246, "owner_tier": 0.1, "score": 0.00381355931779661}, {"content": "For anyone using a class factory with python3.6 and up use the nonlocal keyword to add it to the scope / context of the class being created like so:", "id": 41413059, "owner_tier": 0.7, "score": 0.00169491525}, {"content": "When define some member variable outside any member method, the variable can be either static or non-static depending on how the variable is expressed.  For example: The results are", "id": 15644143, "owner_tier": 0.1, "score": 0.006779661012711864}, {"content": "The best way I found is to use another class. You can create an object and then use it on other objects. With the example above, I made a class named staticFlag. This class should present the static var __success (Private Static Var). tryIt class represented the regular class we need to use. Now I made an object for one flag (staticFlag). This flag will be sent as reference to all the regular objects. All these objects are being added to the list tryArr. This Script Results:", "id": 15117875, "owner_tier": 0.5, "score": 0.002542372877118644}, {"content": "It is possible to have static class variables, but probably not worth the effort. Here's a proof-of-concept written in Python 3 -- if any of the exact details are wrong the code can be tweaked to match just about whatever you mean by a static variable: and in use: and some tests:", "id": 36216964, "owner_tier": 0.9, "score": 0.007203389826271186}, {"content": "You can also add class variables to classes on the fly And class instances can change class variables", "id": 81002, "owner_tier": 0.5, "score": 0.019491525419491524}, {"content": "In regards to this answer, for a constant static variable, you can use a descriptor. Here's an example: resulting in ... You can always raise an exception if quietly ignoring setting value (pass above) is not your thing. If you're looking for a C++, Java style static class variable: Have a look at this answer and the official docs HOWTO for more information about descriptors. ", "id": 24553443, "owner_tier": 0.9, "score": 0.00381355931779661}, {"content": "One special thing to note about static properties & instance properties, shown in the example below: This means before assigning the value to instance property, if we try to access the property thru' instance, the static value is used. Each property declared in python class always has a static slot in memory.", "id": 9613563, "owner_tier": 0.5, "score": 0.01016949152118644}, {"content": "You could also enforce a class to be static using metaclass. Then whenever by accident you try to initialize MyClass you'll get an StaticClassError.", "id": 8201368, "owner_tier": 0.3, "score": 0.005084745758474576}, {"content": "To avoid any potential confusion, I would like to contrast static variables and immutable objects. Some primitive object types like integers, floats, strings, and touples are immutable in Python. This means that the object that is referred to by a given name cannot change if it is of one of the aforementioned object types. The name can be reassigned to a different object, but the object itself may not be changed. Making a variable static takes this a step further by disallowing the variable name to point to any object but that to which it currently points. (Note: this is a general software concept and not specific to Python; please see others' posts for information about implementing statics in Python).", "id": 79840, "owner_tier": 0.5, "score": 0.002118644063559322}, {"content": "Personally I would use a classmethod whenever I needed a static method. Mainly because I get the class as an argument. or use a decorator For static properties.. Its time you look up some python definition.. variable can always change. There are two types of them mutable and immutable.. Also, there are class attributes and instance attributes.. Nothing really like static attributes in the sense of java & c++ Why use static method in pythonic sense, if it has no relation whatever to the class! If I were you, I'd either use classmethod or define the method independent from the class.", "id": 68747, "owner_tier": 0.3, "score": 0.011864406775423728}], "link": "https://stackoverflow.com/questions/68645/class-static-variables-and-methods", "question": {"content": "How do I create class (i.e. static) variables or methods in Python?", "id": 68645, "title": "Class (static) variables and methods", "traffic_rate": 307}, "saved_time": 1721102345, "source": "stackoverflow", "tags": ["python", "class", "static", "class-variables"]}, {"answers": [{"content": "While your class does have a static field called StaticList, you are actually initializing and working with an instance field of the same name because of the self qualifier you are using. I think your code will work fine if you use MyClass.StaticList to initialize and access it instead. In general, by Python's name lookup, you can access a class field via an instance as if it was an instance field (e.g., self.StaticList) on that instance as long as you haven't actually set an instance field of the same name on that instance. From that moment on, the instance field shadows the class field (i.e., self.StaticList will find your new value, while MyClass.StaticList will still refer to your class value). As an example fresh from the interpreter: The instance variable a.v is initially equal to A.v, but by explicitly setting a.v=7, you are \"dissociating\" them in that instance.  While this means that, in principle, you could make use of a static class field MyClass.Values as well as an instance field xyz.Values of the same name, this is often discouraged for exactly this kind of confusion. As a separate remark, you could consider annotating the data method as a @staticmethod (and remove the self argument in the move) and call it as MyClass.data() to make the fact clearer that you would be getting back the same list instance on every call.", "id": 43200798, "owner_tier": 0.5, "score": 0.9999999980000001}], "link": "https://stackoverflow.com/questions/43186844/python-static-class-variables", "question": {"content": "I'm from a C++ background and have often been using static vars to reduce the number of time variables have to be initialized (especially if the initialization takes very long). So from other posts on StackOverflow, people suggested using static class variables as follows: Now this is fine if there exists at least 1 instance of MyClass throughout the execution of the program and the lists are only created once. However, if at some stage of the execution there is no instance of MyClass, Python seems to remove the static lists (I assume because the reference counter drops to 0). So my question, is there any easy way without using external modules to initialize StaticList1 and StaticList2 only once (the first time they are used) and never to remove them even if there is no instance of MyClass until the program exists (or you delete the lists manually)? EDIT: Maybe I oversimplified this issue. What I'm doing: I import the module from another script and have a loop like this: The initializing of the static list takes about 200 - 300 ms and is executed on every iteration of the loop, so the loop takes extremely long to finish.", "id": 43186844, "title": "Python - Static Class Variables", "traffic_rate": 4459}, "saved_time": 1721102345, "source": "stackoverflow", "tags": ["python", "class", "static"]}, {"answers": [{"content": "A class is a blueprint. An instance is a concrete thing created from said blueprint. It's the difference between planning a house and actually having a house, if that helps.\n\nClass methods are methods that, instead of operating on the class instance, operate on the class itself. Usually they're used as alternative `__init__`-methods to quickly create certain kinds of instances. For instance, `pathlib.Path` is a class you can use to create filepaths, but you can use `Path.home` to instantly create an instance pointing to your user directory.\n\nStatic methods are basically just ordinary functions stuffed into a class, they have no access to the class, instance, or their methods. Usually not used for that reason unless you want to combine the common parts of two methods, such as if you have two methods that each read a file; you can have a static method that handles the reading part and just give it the parameters in the normal methods.\n\nThank you. I understood instances. So let's just say objects are instances of a certain class. What are other instances apart from objects?\n\nThere are none. You can basically say objects == instances. There are no \"other types\" of instances.\n\nI do admit that it gets a bit confusing because classes themselves are also technically objects in Python, but don't get yourself caught on that. Just ignore it. You don't need to worry about metaprogramming, probably ever.", "id": "hqj9i97", "owner_tier": 0.7, "score": 0.999999995}, {"content": "One car honking should only require that particular car (instance method). All cars need to fit on the road, so a maximum legal width could be a class variable, and confirming that a given width is legal for a car could be a class method. It may be relevant to convert between speed units (e.g. km/h to mph) when working with cars, but nothing about that is inherent to a car itself, so that could be implemented as a static method (assuming that functionality is only relevant for cars in your codebase - otherwise it may be better suited as a general function somewhere else, or perhaps as a static method of a more general Vehicle class, as the parent of your Car class).", "id": "hqjb5km", "owner_tier": 0.3, "score": -4.999999969612645e-09}], "link": "https://www.reddit.com/r/learnpython/comments/rrze6k/class_static_methods/", "question": {"content": "Hello everyone,\n\nI was studying OOP and the concept of instances, class methods and static methods still confuses me.\n\nI have watched tons of YouTube already but I can't find a person who explains it as dumb as possible because that is how I understand things. \n\nPlease if there is anyone who can recommend to me a video or explain it to me in the simplest way possible with examples, I will be glad :) \n\nNote: I want the simplest form of explanation about the matter.", "id": "rrze6k", "title": "CLASS & STATIC METHODS", "traffic_rate": 153.13037037037037}, "saved_time": 1721102345, "source": "reddit", "tags": []}, {"answers": [{"content": "[Please fix the formatting of the code, it confused me until I peeked in the source with RES. \ud83d\ude09]\n\nThe class variable(\\*) `A.var1` isn\u2019t incremented because `self.var1 += 1` is essentially the same as `self.var1 = self.var1 + 1`. The right-hand-side expression reads the class variable `A.var1` (because no instance variable of that name exists yet), increments it and assigns the result to the (newly created) instance variable `self.var1` (left-hand-side) which hides the underlying class variable. You could now delete the instance variable (`del self.var1`), then accessing `self.var1` would access the class variable again.\n\n(\\*): Please don\u2019t use the term \u201cstatic variable\u201d in Python, it can be confusing because we have:\n\n* normal (instance) methods which can directly access the instance object through their first positional parameter `self`\n* class methods (decorated with `@classmethod`) which can directly access the class (through their first positional parameter `cls`)\n* static methods (decorated with `@staticmethod`) which can access neither instance nor class directly, they\u2019re essentially normal functions which are attached to a class namespace", "id": "jqv4tws", "owner_tier": 0.5, "score": 0.49999999833333336}, {"content": "The Python docs have helped me quite a bit. I think the data model reference specifically would be useful in your case here:\nhttps://docs.python.org/3/reference/datamodel.html\n\nNamely, the sections on class vs instance methods and attributes.", "id": "jqv5b90", "owner_tier": 0.3, "score": 0.49999999833333336}, {"content": ">But why does it not give me an error now? I haven't created a object/instance level self.var1 variable yet, just a class level variable var1.\n\nIt looks for the instance variable first, and if that's not found, it tries to find a class variable.\n\nThe rest of this comment isn't directly about your question, but since you said you are coming from Java: a lot of people coming from Java in particular often write Python code in a non-idiomatic way. They tend use classes way too much. You don't have to arrange everything in a class like you do in Java; functions and variables can live perfectly happy in the module-level scope.\n\nAnother thing that may not be immediately apparent: classes are objects, and are defined at runtime. You can do this, for example:\n\n    for _ in range(10):\n        class Something:\n            pass\n\nIt defines and overwrites an empty class ten times in a row, the final one survives the loop. Obviously this example is useless but sometimes you need to do things like define a class dynamically in a function and return it.\n\nThese videos might be helpful for you:\n\n- [Beyond PEP8](https://youtu.be/wf-BqAjZb8M?t=1341) the first part of this isn't that interesting, it's just about code formatting. The good bit starts at 22mins where he does a worked example of turning Java-like Python into idiomatic Python  \n- [Stop Writing Classes](https://www.youtube.com/watch?v=o9pEzgHorH0) addresses overuse of classes and OOP  \n- [Facts and Myths about Python names and values](https://www.youtube.com/watch?v=_AEJHKGk9ns): Python's naming/variable semantics can seem more complicated than they really are, especially if you're used to a statically-typed compiled language that distinguishes between primitive types and reference types. Python is dynamically-typed, interpreted, and *everything*^1 is an object. This video explains the rules explicitly, and they turn out to be quite simple.  \n- [Top to Down, Left to Right](https://www.youtube.com/watch?v=DlgbPLvBs30): exposition of Python's execution model, again it's fairly simple but can seem counterintuitive if you're used to something else.\n\nFurthermore, many design patterns you might be used to from Java either don't apply to Python, or have to be tweaked a little. [This site](https://python-patterns.guide/) has a detailed treatment.\n\n^(1)everything that can appear on the RHS of an equal sign. keywords like `def` aren't objects.\n\n> people coming from Java in particular often write Python code in a non-idiomatic way\n\nLike using camelCase instead of snake_case.\n\nyeah but that's just an aesthetic thing, the real issue is code structure\n\nIt's also inconsistent when using the batteries included, because all those functions are snek case.", "id": "jqvg25g", "owner_tier": 0.1, "score": 0.9999999983333333}, {"content": "> Does Python automatically use the class level variable with the same name since there is no instance level variable defined with the same name?\n\nJava just does that when we attempt to access a field using instance syntax w/o using keyword `this`! \n\nMore precisely, Java looks up 1st if there's any local variable or parameter w/ that name.  \n\nThen 2nd, Java looks up for an instance field of that name.  \n\nAnd 3rd, if all the lookups above fail, Java will use the static field w/ that name if it exists.  \n\nPython also has a somewhat similar lookup path but w/ at least 1 notable caveat:  \n\nIf Python ends up reaching a static field when using instance access syntax, it will make a clone of the former as an instance field, as others here have already pointed out!", "id": "jqvii92", "owner_tier": 0.1, "score": 0.3333333316666667}, {"content": "I have been wanting to know the answer to this too.", "id": "jqv138r", "owner_tier": 0.1, "score": 0.166666665}, {"content": "Most simple data types (numbers, bools, strings, tuples, bytes, frozenset) are immutable in Python. For immutable data types, inplace operations like `x+=5` are the same as `x=x+5`. In your example you have `self.var1 += 1` which is `self.var1 = self.var1 + 1` where the right hand side lives in the class and the left hand side belongs to the instance.", "id": "jqv8n29", "owner_tier": 0.3, "score": -1.6666666666666667e-09}, {"content": "Yes - looking up a variable on an instance will subsequently look it up on the class if not found on the instance.  Ie the lookup process is essentially \"instance, then class, then parent classes\".  Thus you don't get an error because it can access the class variable.\n\n>And when I call A.var1 the output is 10\n\nUltimately, because (for immutable types like integers) `self.var1 += 1` is equivalent to `self.var1 = self.var1 + 1`.  The right hand side will end up accessing the class variable, but the assignment will set it as an instance variable, shadowing the class variable when you access it through the instance.\n\nA slight warning here (and the reason I specified immutable types above) is that you'll see different behaviour for mutable types - `+=` more accurately boils down to `self.var1 = self.var1.__iadd__(1)`, where `__iadd__` is in-place addition, allowing the object to mutate itself and return the same object. \n then assigning it.  Immutable variables can't be mutated, so return a different object, so self.var1 and A.var1 end up different.  but if `var1` was a list or something, they'd both end up referencing the same object.", "id": "jqv9ebx", "owner_tier": 0.7, "score": 0.166666665}, {"content": "When you do self.xxx, it calls a method called `__getattribute__`. That method by default leads to reading attributes from slots, the instance dict, or failing this the class itself.\n\nThat's what happens when you call an instance method. It goes and looks up on the object for the attribute you requested, and when it fails to find that, it will check the class. That's why you have to have a self parameter in instance methods. Python will wrap the function in a method handle which is effectively like this (just dealt with in C).\n\n    def method_handle(function, self):\n        def method(*args, **kwargs):\n            return function(self, *args, **kwargs)\n        return method", "id": "jqvam2u", "owner_tier": 0.7, "score": 0.166666665}], "link": "https://www.reddit.com/r/learnpython/comments/14s18vo/can_someone_explain_how_objectinstance_variables/", "question": {"content": "So I come from a Java background where defining, declaring and accessing static and instance level variables are pretty much a straightforward process. I want to be able to understand OOP concepts of Python properly so I have been doing some practice.\n\nI have a class:\n\n    class A:\r\n  \r\n\r\n  def __init__(self):\r\n    pass\r\n\r\n  def someFunc(self):\r\n    self.var1 += 1 \n\nI create an object of this class and call the `someFunc()` method:\n\n    a = A() \n    a.someFunc()\n\nIt gives me an error. Ok, fair enough since I haven't declared a `self.var1` variable yet.\n\nConsider another example.\n\n    class A:\r\n  var1 = 10\r\n\r\n  def __init__(self):\r\n    pass\r\n\r\n  def someFunc(self):\r\n    self.var1 += 1 \n\nNow when I do this:\n\n    a = A()\n    a.someFunc()\n    \n    Output: 11\n\n&#x200B;\n\nI know that variables defined just below the class definition are class/static variables. And to access them you have to do `A.var1`\n\nBut why does it not give me an error now? I haven't created a object/instance level `self.var1` variable yet, just a class level variable `var1`.\n\nAnd when I call `A.var1` the output is 10. Why is the output not the same as `a.var1`?\n\nDoes python automatically use the class level variable with the same name since there is no instance level variable defined with the same name? And does that in turn become a different variable from the class level variable?\n\nCan someone please elaborate?", "id": "14s18vo", "title": "Can someone explain how object/instance variables vs class/static variables work in Python?", "traffic_rate": 153.13037037037037}, "saved_time": 1721102345, "source": "reddit", "tags": []}, {"answers": [{"content": "the second function declaration is incorrect, and should be:\n\n    def g(self, x, y):\n\nThe `@staticmethod` means that the function does not need a `self` argument.", "id": "l1o71rw", "owner_tier": 0.9, "score": 0.4545454542424242}, {"content": "The difference comes when you instantiate the class.\n\n\t>>> a = A()\n\t>>> a.f(1,1)\n\t2\n\t>>> a.g(1,1)\n\tTraceback (most recent call last):\n\t  File \"<stdin>\", line 1, in <module>\n\tTypeError: A.g() takes 2 positional arguments but 3 were given\n\n`a.g` doesn't work because whenever you call some_object.some_method(...), Python inserts `some_object` itself as the first argument (which should be named `self` for that reason).\n\nthanks!\n\nAnother difference (which stems from the first, really) is the fact that you don't need to create an instance of the class in order to run the static method. Both approaches are fine:\n\n    A.f(1, 1)\n\n    a = A()\n    a.f(1, 1)", "id": "l1o70fr", "owner_tier": 0.7, "score": 0.4545454542424242}, {"content": "The difference is only apparent when accessing the method through an instance of `A`, i.e. `A().f(1, 2)`. `f`, being a static method, would behave exactly the same as when accessing it through the class. `g`, being a regular instance method, would automatically be passed the instance as the argument for `x`. So `A().g(1, 2)` would result in a `TypeError`, as it'd receive a total of three arguments.\n\nThere's a final type of method, class methods using the `@classmethod` decorator, that are automatically passed a reference to the class they're accessed through, whether that's through the class directly or via one of its instances:\n\n    class A:\n        @classmethod\n        def h(cls, x, y):\n            return x + y\n\n    A.h(1, 2) # cls = A\n    A().h(1, 2) # same thing\n\nThat's useful if the method call happens on a subclass of `A`, since the argument passed to `h` would be that subclass.\n\nTo be honest, in most situations something should either be a class method, an instance method, or not a method, at all. In my experience, there's very few reasons to have static methods.\n\nI used static methods whenever I felt like packing methods under one class for the sake of clarity and organization. (math stuff that didn't care for references anyway)\n\nthanks!\n\n>To be honest, in most situations something should either be a class method, an instance method, or not a method, at all. In my experience, there's very few reasons to have static methods.\n\nThey're good for capturing computation that is related to its containing class but does not needs its attributes. That's a pretty common pattern, to me.\n\nThe main reason for me is constructors. Other languages allow you to overload your constructor and have different methods to create an object but python sticks to \\_\\_init\\_\\_. \n\nHaving a load\\_from\\_file static method as well as the default constructor is the main use for me.\n\nThat's the most cited reason and similar to how it's done in languages like Java and C# where all functions have to be methods. But in Python, in think it makes better organizational sense to put such static methods into their own separate module as regular functions instead. The bundling of definitions into a namespace is what modules exist for, after all. Classes are for OOP, and if your function doesn't use instance or class state, I'd personally argue it has no business being a method. Keeping to that distinction is its own kind of clarity, in my opinion.\n\nThe situations where a function is tightly coupled to the functioning of a class and so should live inside it but also doesn't benefit from receiving a reference to either a particular subclass or instance are very few.\n\nI realise this comes down to preference, but I'd argue something that doesn't use either class or instance state isn't truly sufficiently related to the class to live inside it. It can live as a top-level function in the same module as the class, and if that module isn't too bloated, then that's organizationally equivalent. Organizing definitions into namespaces is what modules are for, after all. The purpose of a class is a little more specific than that (even though there are other languages whose design explicitly disagrees with that sentiment).\n\nI'd say such methods should be class methods not static methods, as then they work better for subclasses.\n\nHmmm, I agree but still, when building larger modules (math for example) in my opinion it's a good idea to separate some functions for clarity. In theory, you could just name those functions differently, or build a separate file for them, or make them handle it internally (which I don't think is a good idea in a lot of cases) but NumberMath.add and VectorMath.add are intuitive and there's no reason class structure shouldn't be used to make it more easier, in my opinion. (stupid example but fastest I could think of).\n\nDon't get me wrong, I'm glad I learned something from your post today because I never knew of classmethods before. I've had situations where I could have used them and made it easier for me\n\nFair enough, I understand that preference, even if I don't share it. A module with multiple classes and a function that only relates to a single one of them, is an example of a scenario where I'd prefer the static method over the module-level function. That said, perhaps the module should be split in that scenario.\n\nTotally blipped, definitely class methods.", "id": "l1o6upb", "owner_tier": 0.3, "score": 0.9999999996969696}, {"content": "A static method is basically a function that doesn\u2019t actually have to be in the class, but is located there because it\u2019s a reasonable place for it to be. It doesn\u2019t use any class instance attributes. You can use it directly from the class without creating an instance if you want", "id": "l1plmkg", "owner_tier": 0.9, "score": 0.03030303}, {"content": "I think of static methods as the ones I can call for any simple usage. ie: calculator class with a get_sum method. Sometimes I do not want to instanciate a calculator object just to use the get_sum method.", "id": "l1oynne", "owner_tier": 0.1, "score": -3.030303011886452e-10}, {"content": "Static method does not take self as first argument. One use case is a helper function or utility to a class method or regular method for your instantiated object.\n\n\nClass method takes in the cls as first argument, and works directly on the class state, not an instantiated object of the class.", "id": "l1pyhow", "owner_tier": 0.3, "score": -3.030303011886452e-10}, {"content": "Adding to the existing answers, the most common way I use `staticmethod` is to implement caching for a regular method, while only focusing on the relevant attributes. The regular method would delegate the work to the static method (the latter uses `functools.cache` as an extra decorator) by giving it the needed data, and the cache now only tracks that data instead of every attribute of the class instance.\n\nWhile I could use a regular function instead, usually the static method is already very much thematically bound to the class so using it outside of it wouldn't really be useful.", "id": "l1q4nxw", "owner_tier": 0.7, "score": -3.030303011886452e-10}, {"content": "> As far as i can tell, defining a function on the class itself has the same effect\n\nDid you try running this code on an instance of `A`?", "id": "l1qr47i", "owner_tier": 0.5, "score": -3.030303011886452e-10}, {"content": "Think of u/staticmethod as a way to group related functions under a class, without actually needing an instance of the class. It's like a namespace, but with a more organized and Pythonic feel.", "id": "l1rflil", "owner_tier": 0.1, "score": -3.030303011886452e-10}], "link": "https://www.reddit.com/r/learnpython/comments/1cfchb4/what_is_staticmethod_for/", "question": {"content": "When searching for it on google, i get many explanations why it is different from classmethod. But noone explains what it does exactly. As far as i can tell, defining a function on the class itself has the same effect\n\n    class A:\n        @staticmethod\n        def f(x,y):\n            return x + y\n        \n        def g(x,y):\n            return x + y\n    \n    print(A.f(1,2))\n    print(A.g(1,2))", "id": "1cfchb4", "title": "what is @staticmethod for?", "traffic_rate": 153.13037037037037}, "saved_time": 1721102345, "source": "reddit", "tags": []}, {"answers": [], "link": "https://www.reddit.com/r/MailDevNetwork/comments/1d712cn/understanding_static_and_class_methods_in_python/", "question": {"content": "\n\n# Exploring Python's u/staticmethod and u/classmethod Decorators\n\nIn the realm of object-oriented programming (OOP) with\u00a0**Python**, two powerful decorators, u/staticmethod and u/classmethod, play pivotal roles in structuring code in a more logical and efficient manner. These decorators alter the way methods are called on a class, thereby influencing how the class interacts with its methods. Understanding the difference between these two can significantly impact how one designs and implements Python classes, especially when it comes to inheritance and data encapsulation. u/staticmethods are used to define methods in a class that do not need to access any class-specific or instance-specific data.\n\nu/classmethods, on the other hand, are closely tied to the class itself, allowing methods to access and modify class state that applies across all instances of the class. This distinction is crucial for creating robust and scalable Python applications. By leveraging these decorators appropriately, developers can ensure that their classes are not only well-organized but also more modular, making them easier to understand, maintain, and extend. Exploring the differences and applications of u/staticmethod and u/classmethod reveals the depth and flexibility of Python's approach to OOP, showcasing why it remains a popular choice among developers.\n\n|Command|Description|\n|:-|:-|\n|u/staticmethod|Defines a method that does not access instance or class-specific data.|\n|u/classmethod|Defines a method that receives the class as its first argument and can modify class state.|\n\n# Delving into Python Decorators: Static vs. Class Methods\n\nIn the intricate world of Python, the decorators u/staticmethod and u/classmethod are pivotal in differentiating how methods within a class can be accessed and utilized. Both serve unique purposes in the object-oriented paradigm, offering flexibility and functionality in class design. A u/staticmethod is defined to be a function that does not receive an implicit first argument, meaning it lacks access to the instance (self) or class (cls) it belongs to. This makes static methods behave more like plain functions, yet they are encapsulated within the class's namespace. Static methods are used when a particular functionality is related to a class but does not require the class or its instances to perform its task.\n\nContrastingly, u/classmethods play a crucial role by taking a class (cls) as their first argument, which allows them to access and modify class state that pertains to all instances of the class. This is particularly useful for factory methods, which instantiate objects using different parameters than those provided by the class constructor. Understanding when and how to use these decorators is essential for Python developers looking to implement design patterns efficiently or when managing a shared state among all instances of a class. The strategic use of these methods can lead to cleaner, more maintainable, and scalable code by emphasizing the separation of concerns and optimizing code reuse.\n\n# Example: Using u/staticmethod\n\nPython Programming\n\n    class MathOperations:\n        u/staticmethod\n        def add(x, y):\n            return x + y\n        @staticmethod\n        def multiply(x, y):\n            return x * y\n    \n\n# Example: Using @classmethod\n\nPython Programming\n\n    class ClassCounter:\n        count = 0\n        @classmethod\n        def increment(cls):\n            cls.count += 1\n            return cls.count\n    \n\n\n\n# Diving Deeper into @staticmethod and @classmethod\n\nIn Python, @staticmethod and @classmethod are two decorators that play a significant role in the design of object-oriented programs. A static method, defined with the @staticmethod decorator, is a function that belongs to a class but does not access the class or instance in any way. It's used for utility functions that perform a task in isolation, not affecting or requiring information from class or instance variables. This makes static methods behaviorally similar to regular functions, with the key difference being their association with a class, which can improve the code's organization and readability.\n\nOn the other hand, a class method, marked by the @classmethod decorator, takes a class as its first argument rather than an instance. This makes class methods capable of accessing and modifying class state that applies across all instances of the class. An example use case for @classmethods is factory methods, which are used to create instances of a class using different sets of parameters. By understanding and correctly applying these two types of methods, developers can write more concise and flexible code that leverages the principles of object-oriented programming more effectively.\n\n# Frequently Asked Questions on Static and Class Methods\n\n1. **Question:**\u00a0What is the main difference between @staticmethod and @classmethod?\n2. **Answer:**\u00a0@staticmethod does not access or modify class or instance data, making it similar to a regular function but within the scope of a class. @classmethod, however, takes a class as its first argument, allowing it to modify class state and access class variables.\n3. **Question:**\u00a0Can a @staticmethod modify class state?\n4. **Answer:**\u00a0No, a @staticmethod is designed to be independent of the class state and cannot modify class or instance variables.\n5. **Question:**\u00a0Why would you use a @classmethod?\n6. **Answer:**\u00a0@classmethods are useful for factory methods that require access to class variables to create an instance, or for methods that need to modify class state that applies to all instances.\n7. **Question:**\u00a0Can @staticmethod and @classmethod be used outside of a class?\n8. **Answer:**\u00a0No, both @staticmethod and @classmethod must be defined within a class. They are meant to organize functions that logically belong to a class, with different levels of association to class and instance data.\n9. **Question:**\u00a0Is it possible to call a @staticmethod from an instance?\n10. **Answer:**\u00a0Yes, @staticmethod can be called from an instance or the class itself, but it will not have access to the instance or class from which it is called.\n11. **Question:**\u00a0How do you access a class variable from a @classmethod?\n12. **Answer:**\u00a0You can access a class variable from a @classmethod by using the first argument of the method, commonly named 'cls', which refers to the class itself.\n13. **Question:**\u00a0Can a @classmethod call a @staticmethod?\n14. **Answer:**\u00a0Yes, a @classmethod can call a @staticmethod if it needs to perform a task that does not require access to class or instance data.\n15. **Question:**\u00a0Are these decorators exclusive to Python?\n16. **Answer:**\u00a0The concept of static and class methods exists in other object-oriented languages, but the use of decorators to define them is specific to Python.\n17. **Question:**\u00a0Can I convert a regular method to a @staticmethod or @classmethod?\n18. **Answer:**\u00a0Yes, you can convert a regular method to a @staticmethod or @classmethod by adding the corresponding decorator above its definition. However, you must ensure the method logic is compatible with the chosen method type.\n\n# Final Thoughts on Static and Class Methods\n\nUnderstanding the difference between @staticmethod and @classmethod in\u00a0**Python**\u00a0is crucial for any developer working within the object-oriented programming paradigm. These two decorators allow for a more nuanced and flexible approach to designing classes and managing their behavior. Static methods, with their ability to perform tasks without needing an instance or class reference, are perfect for utility functions that operate independently of class state. Class methods, by taking a class as their first argument, are indispensable for tasks that involve class-level data, such as factory methods for instance creation. Properly leveraging these methods can lead to cleaner, more efficient, and more maintainable code. As we continue to explore the depths of\u00a0**Python's**\u00a0features, it becomes evident that the language's design encourages thoughtful coding practices and a deeper understanding of OOP principles. This exploration not only enhances our immediate coding tasks but also enriches our overall programming acumen.\n\n  \n[https://www.tempmail.us.com/en/python/understanding-static-and-class-methods-in-python](https://www.tempmail.us.com/en/python/understanding-static-and-class-methods-in-python)  \n", "id": "1d712cn", "title": "Understanding Static and Class Methods in Python", "traffic_rate": 0.09900990099009901}, "saved_time": 1721102345, "source": "reddit", "tags": []}, {"answers": [{"content": "It's impossible to tell what is going on here. How can you have methods inside a class that take no parameters? Are they staticmethods - in which case here are the decorators? But if they need to store state, why aren't they instance methods? Why don't you keep the state on the instance like normal?\n\nAnd, probably most importantly of all, why would you ever have 30 or more methods in a class?\n\nSorry the above example was not very good without context, first time poster, and thank you for taking the time to reply.\n\nThe goal of the application is to emulate the menu structure of an existing device using a web app that mimics the look of the tool used to connect to the device (to be used for training).\n\nThis frontend displays the tool (html and js), as well opens a web socket to the server. Button presses are sent over the websocket, which get passed to device emulation.  The device sends a string back over the websocket which is then displayed by the front end.\n\nSome sample code below to hopefully show enough what I am trying to accomplish.\n\nThe device class may have 30 functions because that is how many menus exist in the device.\n\nIn the websocket route there is 3 tasks, one to get the input from svt (service tool) to send to device, send message from device to display on svt, and the device loop (device.run()).  keypresses and text to display are passed by queue between the device and webserver.\n\nWithin the device run function there is an output function, this will run the current submenu function to get the updated output to display.  Some of the menu functions need to keep track of some state specific to that menu between function calls.  Ideally I would like to encapsulate that within the function, and not have to add all the variables to the Class itself if possible.\n\nHopefully this is a better explanation of what I am trying to accomplish, and maybe there is a much better way to structure the app to accomplish the same thing.\n\n    # app.py (webserver - Quart)\n    from devices import Device\n    \n    @app.route(\"/\")\n    async def main():\r\n        secure_ws = True\r\n        if current_app.config.get(\"DEBUG\"):\r\n            secure_ws = False\r\n        return await render_template(\n                                     \"index.html\", \n                                      context={\"secure_ws\":secure_ws}\n                                     )\n    \n    async def svt_to_controller(controller: GCS):\r\n    while True:\r\n        data = await websocket.receive()\r\n        await controller.svt_input_q.put(data)\r\n\r\n\r\n    async def controller_to_svt(controller: GCS):\r\n        while True:\r\n\r\n            message = await controller.svt_message_q.get()\r\n            await websocket.send(json.dumps(message))\n    \n    @app.websocket(\"/ws\")\r\n    async def ws():\r\n        controller: Device = Device() #device being emulated\r\n        c_to_s = asyncio.create_task(controller_to_svt(controller))\r\n        s_to_c = asyncio.create_task(svt_to_controller(controller))\r\n        controller_task = asyncio.create_task(controller.run())\r\n        await asyncio.gather(c_to_s, s_to_c, controller_task)\n    \n    # device.py\n    \n    \n    async def run(self):\r\n        while True:\r\n            key = self._svt_input()\r\n            self._svt_output(key) # inside this function it will call \n                                  #  the function of the current menu if             \n                                  #  it is a leaf node\r\n            await asyncio.sleep(0.25)\n    \n    \n    #subsystem.py\n    \n    class SubSys:\r\n    def __init__(self) -> None:\r\n        self.menu: MenuNode = self._build_menu()\r\n\r\n    def _build_menu(self) -> MenuNode:\r\n        menu = build_tree_from_string(1, \"Subsytem\", menu_entries)\r\n        build_menu_screens(menu)\r\n\r\n        return menu\r\n\r\n    # Subsystem Functions there will be one of these functions\n        # for every leaf node in the menu tree structure\r\n\r\n    def monitor_car_monitor(self, key: str | None) -> str:\n            # Here is where i would like a static variable that keeps its\n            # value between function calls\r\n        return f'what to display\\n{}this part updates with keypresses\"\n\nSo the important information you missed from the original question is that this is the context of a web app. \n\nNormally, this would mean that the answer is unequivocally \"you cannot do that\", because the whole model of web interactions means that nothing is shared between requests - you would need to store any data in the session or the database.\n\nHowever Quart appears to be async and uses websockets, so presumably you have a persistent connection. Unfortunately I don't know anything at all about how it works. You're probably still better off using the session.\n\nIMHO the web app part is not that important to the question. The websocket is a persistent connection and nothing is needed to exist between requests.  The main question was is if a static variable could be assigned within a class method so that its value persisted between function calls (as the function is continously called while in that current menu).\n\nMany comments eluded to using class variables/attributes, but I assumed I would have to assign them in the class declaration, and the variables only needed to exist while in the specific menu, and needed resetting on entry.  So the solution I went with was the following.\n\n&#x200B;\n\n    class Device:\n        def submenu1_function(self, key: str | None) -> str:\n        \n            def _exit():\n                \"\"\"\n                    Have to remove static variables on exit of \n                    submenu so they get reintialized when the menu\n                    is re entered again\n                \"\"\"\n                if hasattr(self, \"var1\"):\n                    delattr(self, \"var1\")\n                if hasattr(self, \"var2\"):\n                    delattr(self, \"var2\")\n                if hasattr(self, \"exit\"):\n                    delattr(self, \"exit\")\n        \n            # setup static variables needed for the menu\n            if not hasattr(self, \"var1\"):\n                setattr(self, \"var1\", deque([\"C\", \"U\", \"D\", \"E\"]))\n                setattr(self, \"var2\", deque([\" \", \" \"], maxlen=2))\n                setattr(self, \"exit\", _exit)\n        \n                 # handle keys and update variables etc\n\nIn the part of the code that navigates the menus, when the submenu (ie leaf node) is to be exited, the exit function is called and the attributes removed from the class.\n\nEvery submenu ie class method that needs some persistent state follows the same pattern, sets atrributes then removes them on exit.  I don't know if this is an unusual pattern or the best way to do this, but it seems to work.\n\nThanks to all that made comments.", "id": "irn1kx9", "owner_tier": 0.5, "score": 0.9999999980000001}, {"content": "Any variable you name inside the class like\n\n```\nClass Device:\n   my_var = 0\n```\n\nis considered static and can be accessed by\nDevice.my_var\n\nhttps://youtu.be/RdCydcIrzi4", "id": "irn3sg6", "owner_tier": 0.1, "score": 0.199999998}, {"content": "Perhaps you need the ```__init__``` method. \n\nWhich looks like this\n\n    class Foo:\n        def __init__(self):\n            self.bar = 5\n\n    # Make a class instance \n    baz = Foo()\n    # the variable or better, the attribute can be accessed like this\n    baz.bar\n    >> 5", "id": "irnij2i", "owner_tier": 0.7, "score": -1.999999987845058e-09}], "link": "https://www.reddit.com/r/learnpython/comments/xznftm/how_to_have_a_static_variable_in_an_class_method/", "question": {"content": "Is there a way to have static variables inside a class method?\n\n\n    Class Device:\n\n        def menu1():\n            static_var = 0\n\n        def menu2():\n            ...\n\n\n        def menu30():\n            other_static_var = 1\n\n\n\nSome functions within the class need to keep track of some state specific to that function between function calls.  How can this be achieved?", "id": "xznftm", "title": "How to have a static variable in an Class method", "traffic_rate": 153.13037037037037}, "saved_time": 1721102345, "source": "reddit", "tags": []}, {"answers": [{"content": "I'm literally on that subject now while learning. Like this second \ud83d\ude06 cheers for clearing that up", "id": "jyeuvm4", "owner_tier": 0.5, "score": 0.9999999975}], "link": "https://www.reddit.com/r/pythontips/comments/165m8w1/understand_the_difference_between_instance_class/", "question": {"content": "1. Instance methods: These methods are associated with instances of a class and can access and modify the data within an instance.\r  \n\n2. Class methods: These methods are associated with a class rather than instances.  They are used to create or modify class-level properties or behaviors.\r  \n\n3. Static methods: These are utility methods that do not have access to any object-level or class-level data.  \n.........[instance, class & static methods](https://www.pynerds.com/python-instance-class-and-static-methods/)", "id": "165m8w1", "title": "Understand the difference between Instance, Class and Static methods in Python classes", "traffic_rate": 41.063069139966274}, "saved_time": 1721102345, "source": "reddit", "tags": []}, {"answers": [{"content": "#Please ensure that:\n\n+ Your *code* is *properly formatted* as *code block* - see the *sidebar* (About on mobile) for instructions\n+ You include *any and all error messages* in full - best also formatted as code block\n+ You ask *clear questions*\n+ You *demonstrate effort* in solving your question/problem - plain posting your assignments is forbidden (and such posts will be removed) as is asking for or giving solutions.\n    \n\n**If any of the above points is not met, your post can and will be removed without further warning.**\n\nCode is to be formatted as **code block** (*old reddit/markdown editor:* empty line before the code, each code line indented by 4 spaces, *new reddit:* https://imgur.com/a/fgoFFis) \nor linked via an external *code hoster*, like *pastebin.com*, *github gist*, *github*, *bitbucket*, *gitlab*, etc. \n\nPlease, **do not use** triple backticks (\\`\\`\\`) as they will only render properly on *new reddit*, not on *old reddit*.  \n\nCode blocks look like this:\n\n    public class HelloWorld {\n\n        public static void main(String[] args) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n\nYou do not need to repost unless your post has been removed by a moderator. Just use the *edit function* of reddit to make sure your post complies with the above. \n\nIf your post has remained in violation of these rules for a prolonged period of time (at least an hour), a moderator may remove it at their discretion. In this case, they will comment with an explanation on why it has been removed, and you will be required to resubmit the entire post following the proper procedures.\n\n#To potential helpers\n\nPlease, **do not help** if any of the above points are not met, rather *report* the post. We are trying to improve the quality of posts here. \nIn helping people who can't be bothered to comply with the above points, you are doing the community a disservice. \n\n\n*I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/learnjava) if you have any questions or concerns.*", "id": "irlln6z", "owner_tier": 0.1, "score": -7.142857099446636e-10}, {"content": ">  I really want to know which situations I could use static method in a class.\n\n+ *Utility methods* - just take a look at the methods in [java.lang.Math](https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/Math.java) - they are all `static` since it doesn't make sense to have to create a new instance\n+ *Generator methods* - methods that generate unique IDs, methods that generate new objects based on certain rules (there are a couple Design Patterns that make use of that concept)", "id": "irm08eb", "owner_tier": 0.9, "score": 0.9999999992857143}, {"content": "You make a method static when it doesn\u2019t need any instance of an object and can possibly be useful outside the class. Don\u2019t force it by making it take parameters instead of using the instance variables just to make it static if it doesn\u2019t make sense outside of that class. \n\nI can\u2019t think of anything with a coffee machine. It just comes naturally. If you write a method the way you originally wanted and notice that it does not use any instance variables then it can be static.  If you think this method may be useful to other classes without needing an instance of your class then make it static.", "id": "irlq18k", "owner_tier": 0.7, "score": 0.642857142142857}, {"content": "You can have a coffeMachine class that has a typeOfCoffe variable and a makeCoffe method with no parameter. Upon construction of an object(or even with a setter later) you can choose what kind of coffee put in the machine. THIS IS THE NON STATIC WAY\nOR\nyou can have a coffeeMachine class with a static method that takes the type of coffee as a parameter and make you coffee direct, you DON'T  need to create an object to make coffe:\nCoffeMachine.makeCoffe(java) will brew you exactly what you need!\n\n(Think of the Math class)  in the end, static method are some sort of standalone function, they can depend ONLY on static and local variables....\nStatic variables are the same for every object of the same class, so if you have a class Person with an age variable and you erroneously put it as static, every person you create will have the same age (that will be the last you put, it will change every time you change it for one of the persons but it would change for everyone)", "id": "irlpuxd", "owner_tier": 0.3, "score": 0.2142857135714286}, {"content": "I'm making a to do list app. I have a class that's for connecting to my dB with static methods for the connection, writing to dB, etc.. \n\nI like doing this because it reduces the amount of code in my \"main\" class. Idk if this is \"right\" per se.", "id": "irmnyjv", "owner_tier": 0.3, "score": 0.07142857071428572}, {"content": "\u201cStatic\u201d just means you can use it without creating an instance of the object. (I.e you don\u2019t do `new Object()`). \n\nIn other languages like Python you can create functions that you can import to other places and use them. In Java everything needs to be a class so if you want that same functionality of \u201chere\u2019s a function that can help do things but isn\u2019t tied to an instance\u201d you make a static method. \n\nIn Python there are also static methods for classes and the reason to use them is also an organizational thing since they\u2019ll be in a different namespace than the global namespace.", "id": "irn6s2f", "owner_tier": 0.5, "score": 0.07142857071428572}, {"content": "Generally utility methods and methods that return the same thing. For example adding two numbers. Instead of instantiating an object and calling it I can just do Math.add(whatever) however, using spring boot frameworks you generally shouldn\u2019t use static methods.", "id": "irootrc", "owner_tier": 0.1, "score": 0.07142857071428572}, {"content": "Comment if someone posts the right answer.", "id": "irm3oea", "owner_tier": 0.5, "score": -7.142857099446636e-10}, {"content": "Thanks for answering my post, actually I'm newbie learning Java and it's really help me!", "id": "irqipvr", "owner_tier": 0.1, "score": -7.142857099446636e-10}, {"content": "You can create a method \"isLeap\" , which receives a year as a parameter. You don't need to instantiate an object to call this method.", "id": "irmkdom", "owner_tier": 0.5, "score": -7.142857099446636e-10}], "link": "https://www.reddit.com/r/learnjava/comments/xzczrl/which_situations_will_we_use_static_methods_in_a/", "question": {"content": " Hello, I begin to learn Java and have a question relating to static methods in java. I really want to know which situations I could use static method in a class. I've looked for some sources and they said that it's better to use static method to write \"pure class\" (that doesn't need to declare an object\\_ For instance, if I want to write code for building a Coffee Machine, including Coffee class (type of coffee), Coffee-Machine class (how to make coffee), and Main method, is it possible to write some static methods for Coffee-Machine class (that's good for OOP design)? Many thanks.", "id": "xzczrl", "title": "Which situations will we use static methods in a class?", "traffic_rate": 31.737494916632777}, "saved_time": 1721102345, "source": "reddit", "tags": []}, {"answers": [{"content": "I have decided to overwrite my comments.\n\nThank you! your message remind me that class method is just for creating class :) I should use instance method.\n\nI have decided to overwrite my comments.\n\nThank you! I think your comment teach me a lot, class method can be treated as 'factories', but factories not only creating instances, but also operate the class attribute, etc. I think I need time to digest it. Thank you for your patience to telling me this.\n\nI have decided to overwrite my comments.\n\n> Edit: completely off the subject -- are you creating this vector class because you want to practice OO, or because you need to use a vector class in your code? If it's the latter, please don't reinvent the wheel, and check out the numpy library. It has an array type which is very commonly used in mathematical and scientific code. It already has functionality for calculating distances, and a variety of other useful behaviour. Don't write low-level objects from scratch if a good library already exists -- spend that time writing the higher-level code you actually want to write!\n\nThank you, especially for your spending such a long time replying my questions, your examples really showed a good tutorial of using \n@classmethod. I know a little of numpy, but I heared it has array type which is more powerful than the default array in python. Anyhow, I just write vector class as an example of using classmethod, as you said before, I have fundamentally misunderstand the classmethod :) My code is about tiled map, in fact is about [hexagonal grids]( https://www.redblobgames.com/grids/hexagons/), I want to calcute the distance between grids, but in fact, it would not need classmethod. Anyhow, I still use it. because hex grid have many coordinate systems, as you said,  python did not have multiple \"constructors\",  So I can use @classmethod to parsing different coordinate. Again I am quite moved that you showed a good tutorial of using @classmethod, maybe one day I would translate it into my native language and put it on web :)\n\nI have decided to overwrite my comments.", "id": "dsih3o5", "owner_tier": 0.5, "score": 0.9999999995}], "link": "https://www.reddit.com/r/learnpython/comments/7pmmks/how_to_use_classmethod_and_staticmethod/", "question": {"content": "For example, I creat a vector class, and I want to calculate the distance between vector 1 and vector 2, it seemed that I should use @classmethod, well, I did not success, and I can use @staticmethod, but I am not sure it is correct. here is my code\n\n\n    class Vector(object):\n        def __init__(self,x,y):\n            self.x = x\n            self.y = y\n\n        @classmethod\n        def distance_1(self,cls):\n            return (self.x-cls.x)**2 + (self.y-cls.y)**2\n\n        @staticmethod\n        def distance_2(self,cls):\n            return (self.x-cls.x)**2 + (self.y-cls.y)**2\n\n    if __name__ == '__main__':\n        a = Vector(1,1)\n        print(a.distance_1(Vector(2,2)))\n", "id": "7pmmks", "title": "how to use @classmethod and @staticmethod ?", "traffic_rate": 153.13037037037037}, "saved_time": 1721102345, "source": "reddit", "tags": []}, {"answers": [{"content": "I have decided to overwrite my comments.", "id": "d32o0q2", "owner_tier": 0.5, "score": 0.9999999980000001}, {"content": "If you never have to use `self` in the function, then you can remove it from the function parameters and decorate the function with `@staticmethod`. It's useful when you want a function to be associated with a class even though it doesn't affect any particular instance of the class. ", "id": "d32qw66", "owner_tier": 0.5, "score": 0.9999999980000001}, {"content": "> ``return int(s) if s else None``\n\nI strongly suggest not mixing return types like this. The Zen tells us not to let errors pass silently. Let your ``int(s)`` loudly complain if it can't create an integer. Frankly, I'm not sure it should be a function at all, since the expression ``int(s.strip())`` is quite concise and clear.\n\n> ``sys.stdout.write``\n\nAre you familiar with the ``logging`` module? It sounds like you should be using ``logging.debug`` or ``logging.info`` for these tasks.\n\n> When to use static methods?\n\nNow on to your question... How big is your module? If it's fairly small, you don't need static methods. Why not leave everything as module-level functions and see how you like it. As Steve Yegge might say, not everything needs to be chaperoned by a class. If you feel that's disorganized, give them an indent and an @staticmethod decorator.\n\nIf a function is not meant for public use, you can name it with a leading underscore (ex: ``_internal``) to indicate that others should beware of using that function. Don't worry about doing this unless you feel the function is unsafe for public use.\n\nJust because a particular class is the only one that's calling your helper functions today doesn't mean it'll be the only one calling those functions tomorrow.\n\nThanks for your comments.   Yes I think you are right on the int function - I was a quick hack and could just be left as one line. \nYes `sys.stdout.write` was a temporary fix whilst getting the logging module up and running (having fun with that but that's another story)  It's not that big a module but how does that affect whether it should be a staticmethod or not.  Perhaps you are right and that it should be a seperate helper function outside the class, as there is a possibility (albeit small that it will be used by another class at one point).", "id": "d32t0ei", "owner_tier": 0.5, "score": 0.9999999980000001}, {"content": "Without knowing much more if the context, I'd agree with you, those look like they should be instance methods. Careful though, there might be some tricky corner of the code somewhere that needs these to be static for some crazy reason, however anything that tricky might be too magic for its own good. ", "id": "d32tbhv", "owner_tier": 0.5, "score": -1.999999987845058e-09}, {"content": "I would say @classmethod is generally more useful than @staticmethod ... generally go with @classmethod unless you have a really good reason not to.\n\nThe advantage of @classmethod is that it generally works better with inheritance and allows you to access static class variables more safely because you get a reference to the class itself as a parameter.\n\n    #!/usr/bin/env python\n    \n    class C:\n    \n        @classmethod\n        def create(cls, name):\n            result = cls()\n            result.name = name\n            return result\n        \n    class D(C):\n        pass\n    \n    \n    x = D.create('test')\n    \n    print(x.name)\n    print(type(x))\n    \n    \n    \u250c\u2500[johncc]\u2500\u2500[3L8H95J]:~$\n    \u2514\u2500\u2500>>python test.py\n    test\n    <class '__main__.D'>\n", "id": "d33u0l6", "owner_tier": 0.1, "score": -1.999999987845058e-09}], "link": "https://www.reddit.com/r/learnpython/comments/4j0njs/when_to_use_static_methods/", "question": {"content": "I'm writing a class which has a couple of methods that the ide (pycharm) has flagged up could be static methods.   I haven't really used these before.\n\n(To confirm is a static method any method that doesn't use any of the objects attributes or methods?)\n\nI'm not sure when a method should be a static method or a seperate function outside the class (or perhaps something else eg normal instance methods).\n\nAll of the (possible) static methods are used by other methods within the class.   \nOne of them is used by a method (which calls several of the object methods in a particular sequence) and is used to convert output from one method to another. This feels like it it's definitely tied to the object, but not sure if it should be a static method or an instance method (it will only ever be used on an instance not on the class itself).\n\nOther potential static methods are more like helper functions that I don't need elsewhere than that object but are used by some of the object methods.\neg.\n\n     @staticmethod\n    def log_database_create(instance):\n        sys.stdout.write('New {} created \\n'.format(instance.__class__.__name__))\n\n    @staticmethod\n    def log_database_update(instance):\n        sys.stdout.write('{}: updated \\n'.format(instance.__class__.__name__))\n\n    @staticmethod\n        def make_int(string):\n            s = string.strip()\n            return int(s) if s else None", "id": "4j0njs", "title": "When to use static methods?", "traffic_rate": 153.17203703703703}, "saved_time": 1721102345, "source": "reddit", "tags": []}, {"answers": [{"content": "No, this isn't quite right.\n\nThe thing you've missed is that classes themselves are objects, that is to say they are instances of the built-in class named `type` (usually). So they can keep their own data, which persists in the class itself and which can be referenced from that class or from any instance.\n\nActually your `barr_ft` classmethod would give an error, because you haven't set a value for `cls.barr` to be added to, but if you did this:\n\n    class Foo:\n      barr = 0\n\n      @classmethod\n      def barr_ft(cls):\n        cls.barr += 42\n\nthen it would work, and `Foo.barr` would give you access to that data - which is not thrown away, it is incremented every time you call that classmethod. And note that this `barr` is *separate* from the one associated with the instance. From inside an instance method, you could do `self.__class__.barr` if you wanted to access the class version - although if the instance didn't have its own attribute, then just doing `self.barr` would fall through to the class one.\n\nBut to be honest, this is not really the main use of a classmethod. You'd mostly use those as what is known as factory methods - that is, methods that create instances of the class. Often this is useful if the class has a lot of complicated parameters, or you wanted to create it using data from an instance of another class. But a simple example using your class:\n\n    class Foo:\n      @classmethod\n      def with_answer(cls):\n        return cls(42)\n\nNow if you do `Foo.with_answer()` you will get an instance of Foo pre-initialised with the value 42.\n\nAh, this is helpful, thank you!", "id": "k7x9m2s", "owner_tier": 0.5, "score": -9.99999993922529e-09}, {"content": "Let's first look at a example, and explain what's happening afterwards:\n\n    class Foo:\n        def foo(self):\n            print(f\"foo() called with {self=}\")\n\n        @classmethod\n        def foo_cls(cls):\n            print(f\"foo_cls() called with {cls=}\")\n\n    class Bar(Foo):\n        def bar(self):\n            print(f\"bar() called with {self=}\")\n\n        @classmethod\n        def bar_cls(cls):\n            print(f\"bar_cls() called with {cls=}\")\n\n    f = Foo()\n    b = Bar()\n\n    f.foo() # foo() called with self=<__main__.Foo object at ...>\n    b.foo() # foo() called with self=<__main__.Bar object at ...>\n\n    f.bar() # AttributeError: 'Foo' object has no attribute 'bar'\n    b.bar() # bar() called with self=<__main__.Bar object at ...>\n\n    f.foo_cls() # foo_cls() called with cls=<class '__main__.Foo'>\n    b.foo_cls() # foo_cls() called with cls=<class '__main__.Bar'>\n\n    f.bar_cls() # AttributeError: 'Foo' object has no attribute 'bar_cls'\n    b.bar_cls() # bar_cls() called with cls=<class '__main__.Bar'>\n\n\nNote that it doesn't matter if we name the parameter `self`, `cls` or `rumpelstiltskin`, it's just convention to name it `self` for methods and `cls` for class methods, we will see why later.\n\nBefore we see what classmethod does, it's important to understand what happens in a \"normal\" method call.\n\nWhat's happening is this: in Python, everything is an object, and each object has a dictionary associated with it that stores it's attributes or members if you will. \n\nWe can actually see those:\n\n    print(Foo.__dict__)\n    {'__module__': '__main__', 'foo': <function Foo.foo at ...>, 'foo_cls': <classmethod(<function Foo.foo_cls at ...>)>, '__dict__': <attribute '__dict__' of 'Foo' objects>, '__weakref__': <attribute '__weakref__' of 'Foo' objects>, '__doc__': None}\n\nIgnore the stuff with underscores for now, you will see that the *class* `Foo` has two attributes `foo` and `foo_cls`, which are the functions we just defined. Other member \"values\" like strings or integers would be stored in the exact same way. In fact, you can think of `def` as being syntactic sugar for something like this:\n\n    def foo(x, y, z):\n        <some code>\n\n    # basically the same as:\n    foo = multiline_lambda x, y, z:\n        <some code>\n\nnote that `multiline_lambda` doesn't exist in Python, so using `def` is the only way to define multi line functions.\n\nSo, what happens now when we call `f.foo()` or `b.foo()`? For `f.foo()` it's easy: \n\n1. Python looks in the dictionary of `f`, which is an instance of the class `Foo`: `f.__dict__` is empty though (you can confirm by typing `print(f.__dict__)`.\n2. Instead of giving up, Python now looks at the class that `f` is an instance of, in our case `Foo`. `Foo.__dict__` does contain an entry named `foo`, so `f.foo` is resolved to the `<function Foo.foo at ...>` object\n3. Now the method needs to get executed, since we wrote `()` after that. If `f.foo` were a normal function (or a staticmethod), that's all that happens, but since it's a method, the instance is passed as the first parameter, so what actually gets executed is `Foo.foo(f)`\n\nThat seems overly complicated. Why not just write `Foo.foo(f)` in the first place? Here's where inheritance comes into play: `b.foo()` is executed as follows:\n\n1. Python looks in `b.__dict__` for `foo`, no luck. Same for `Bar.__dict__`, so then it looks into `Bar`s parent class, `Foo` and finds `foo` there\n2. Now `Foo.foo(b)` is executed. Notice that we're executing `Foo.foo` despite having an instance of `Bar`. And in `foo`, the `self` variable is actually an instance of `Bar`, but that's ok, because `Bar` should have everything `Foo` has, so everything `foo` does to the object will work, as `Bar` is a superset of `Foo`\n\nWhen we call `f.bar`, the same thing happens, but in this case, `Foo` does not have a `bar` attribute, so `f.bar()` fails, because `f` is an instance of `Foo`. `b.bar` works though, and `Bar.bar(b)` will get executed.\n\nAnd now we finally come to `foo_cls` and `bar_cls`: everything happens as described above, except that instead of being called with the instance, the method will be called with the class object: so instead of `Foo.foo(f)`, the calls will be `Foo.foo_cls(Foo)`, `Foo.foo_cls(Bar)` and `Bar.bar_cls(Bar)`.\n\nSo why is that useful? Often it's not, an most other OOP languages don't have this. It's mostly useful if you write \"utility constructor\" methods, let's see the \"classic\" way first:\n\n    class Foo:\n        def __init__(self, i: int):\n            self.i = i\n\n        @staticmethod\n        def from_string(s: str):\n            return Foo(int(s))\n\nThis allows us to write `f = Foo.from_string(\"42\")`. Notice that `from_string` is a static method and therefore doesn't require an instance, so we can call `Foo.from_string` directly.\n\nThe example we wrote works perfectly, and that's what you do in Java and C++ and stuff. However, let's suppose we now inherit from it:\n\n    class Bar(Foo):\n        def hi(self):\n            print(f\"Hi, I'm Bar and my value i is {self.i}\")\n\nNow, we can write:\n\n    b = Bar(42)\n    b.hi()\n\nand it will work as it should. However, we cannot use the \"handy\" constructor anymore:\n\n    b = Bar.from_string(\"42\")\n    b.hi() # 'Foo' object has no attribute 'hi'\n\nNotice that the call `Bar.from_string` \"works\", but it gives us back an instance of `Foo`, because after all, `from_string` only exists in `Foo` and it is written to return an instance of `Foo`. \n\nSo now we would have to reimplement `from_string` in Bar with the same code, just replacing `Foo` with `Bar`. That works, but feels kinda redundant.\n\nThis is where classmethods come in! Let's rewrite Foo as follows:\n\n    class Foo:\n        def __init__(self, i: int):\n            self.i = i\n\n        @classmethod\n        def from_string(cls, s: str):\n            return cls(int(s))\n\nIf `Foo` is written in that way, our code from above works: `b = Bar.from_string(\"42\")` will get executed as `b = Foo.from_string(Bar, \"42\")`, which in turn will execute `return Bar(int(s))`, which is what we want.\n\nAs you can see, class methods are used rarely, but when they are, they're pretty handy. Note that the example above isn't the only way to use classmethods, they also come in handy if you want to access and manipulate \"class wide\" state that is shared between all instances of a class.\n\nThank you - I'm going to spend some time studying this :)", "id": "k7xhf5f", "owner_tier": 0.7, "score": 0.9999999900000001}], "link": "https://www.reddit.com/r/learnpython/comments/17oblv2/class_method_vs_instance_method/", "question": {"content": "In my Python travels, I have encountered the @classmethod decorator. There are a few stack overflow posts with lots of votes which explain the differences between instance and class in terms of using `self` or `cls`. I'm ignoring static methods for the purpose of this discussion.\n\nI've read them. All of that is a bit abstract for me. Maybe I get it?\n\ntl;dr ... I'm looking for a reality check ... \n\n\nI have developed an understanding as follows:\n\n**(1)**\n\nWhen the compiler does its thing with a class I write, I assume Python needs to store its representation (the template for data and associated methods) somewhere. If we use \"cls\" to refer to this, it's really a pointer to something like a struct for the \"original\" template.\n\nWhen a class is instantiated as an object, Python allocates some memory to hold the relevant data, and I am assuming that the methods are not replicated, but are just pointers to the methods found in the template. So, \"self\" is a pointer to this copy of the data struct.\n\n\n**(2)**\n\nA made-up example:\n\n    class Foo:\n\n        def __init__ (self, bar):\n            self.barr = bar\n\n        def barr_incr (self):\n            self.barr += 1\n            return self.barr\n\n        @classmethod\n        def barr_ft (cls):\n            return cls.barr + 42\n\nAnd let's say I want to use this class:\n\n    fa = Foo (3)\n    fb = Foo (30)\n\n    print (fa.barr_incr()) # should produce 4\n    print (fb.barr_incr()) # should produce 31\n\nAnd the individual objects maintain their state, so that 4 and 31 lasts as long as the objects do, or until something comes along to change them (independently).\n\nIf I want to use the functionality offered in barr_ft(), I would do something like ... \n\n    print (Foo.barr_ft(1000))\n\n... and expect to see `1042`, but no one would \"keep\" that value anywhere unless I assigned the result to something explicitly.\n\n\n**(3)**\n\nPerhaps a class method is useful when I have some kind of complicated collection of data, with intrinsic rules or interrelationships that might be subject to corruption if I just let any old assignment or function operate on it. Encapsulation, in other words. \n\nIn such situations, I've typically just created instantiations of an object. I think I can appreciate a need for just having the template without lingering objects, but it's still kinda slippery. Looking for some examples of use cases so I can stash this concept for when I might need it (or understand code when I come across it).\n\n\n**Can I get some reality check, please?** \n\nAm I way off? I'm expecting this post to reveal at least some misconception, which I hope can be corrected in the comments!\n\nAbstractions are OK, but I'm more confident of my understanding if I have some idea of what's going on at a lower level - I'm assuming it's something to do with how my brain works.\n--\nminor edits for clarity and spotted some errors in the original", "id": "17oblv2", "title": "class method vs instance method", "traffic_rate": 153.17222222222222}, "saved_time": 1721102345, "source": "reddit", "tags": []}, {"answers": [], "link": "https://www.codeproject.com/Questions/300685/Static-Classes-and-dbContext", "question": {"content": "\r\n\t\t\t    I'm developing an MVC3 application.\n\r\nBeing that during a typical request I must access the CurrentUser data multiple times, I thought it would be handy to define a Static Class as below\n\nC#\n\r\npublic static class CurrentSession\r\n{\r\n  //get CurrentUser data from current context. If null, load data and set it\r\n  public static User CurrentUser{\r\n    var curUser = HttpContext.Current.Items[\"CurrentUser\"];\r\n    if (HttpContext.Current.Request.IsAuthenticated && curUser==null)\r\n     {\r\n       dbContext db = new dbContext();\r\n       curUser = dbContext.find(HttpContext.Current.User.Identity.Name);\r\n       HttpContext.Current.Irems[\"CurrentUser\"] = curUser;       \r\n     }\r\n\r\n     return (User)curUser;\r\n}\r\n}\n\r\nThe above should check if the user is authenticated, get the UserData and put it on the current context items. If I'll need to access userdata again, it will already be in my context items, with no need to pull from db again.\n\r\nIs this a bad idea? From what I understand (in theory) this way I can have an object shared across all my different functions, limited to current context (so on a per user request basis), loaded only once and only if needed.\n\r\nIt works (or at least it seems to work), I would like to know if this is a \"good\" solution or not.\n\r\nBut, this way I have a problem in an hypotetic method like this:\n\nC#\n\r\npublic ActionResult create(model newObject){\r\n  dbContext db = new dbContext();\r\n  newObject.childcollection.add(CurrentSession.User.childEntity);\r\n  db.add(newObject);// exception\r\n  db.SaveChanges();\r\n}\n\r\nthe above code throws an exception \"An entity object cannot be referenced by multiple instances of IEntityChangeTracker\", because the User.childEntity \"references\" a different dbContext, the one defined inside the get{} merthod of the static property..\n\r\nin fact, I tried the following to be shure, and the exception is exactly the same:\n\nC#\n\r\ndbContext db = new dbContext();\r\ndbContext db2 = new dbContext();\r\nnewObject.childcollection.add(db2.childEntity.find(id));\r\ndb.model.add(newObject);// exception\r\ndb.SaveChanges();\r\n\n\r\nTo \"solve\" this, I can do it this way:\n\nC#\n\r\npublic ActionResult create(model newObject){\r\n  dbContext db = new dbContext();\r\n  newObject.childcollection.add(db.childEntity.find(CurrentSession.User.childEntity.id));\r\n  db.add(newObject);// exception\r\n  db.SaveChanges();\r\n}\n\n\r\nBut I'll somewhat reduce the advantage of pulling out data from db only once.. IF I understand correctly how things works.\n\r\nIn any case, it is also to be considered how effectively faster is to reference an object from context.current.items or pull it from db.\n\r\nAny suggestions to have a \"global\" object to be referenced different functions?\r\nOr is it just better to get everytime the User object inside any function that needs it? This way, I suppose that it is (remotely) possible that the User actually changes during the course of the request..\n\r\nSorry for the quite long question an thank you in advance,\n\r\nAlberto\r\n\t\t    ", "id": "300685", "title": "Static Classes and dbContext", "traffic_rate": 0}, "saved_time": 1721102345, "source": "codeproject", "tags": ["C#", "ASP.NET", "MVC3"]}, {"answers": [{"content": "\r\n    I don't see any problem here, just add a reference to the project that contains the class with the static method and call your method like this:\nC#\n\r\nMyClass.MyStaticMethod()\n", "id": "2_225849_1", "owner_tier": 0.1, "score": 2.0}], "link": "https://www.codeproject.com/Questions/225847/using-static-methods-of-class-in-a-different-proje", "question": {"content": "\r\n\t\t\t    Hi friends,\r\nI have a C# application written in Visual Studio 2008 and it's solution consist of several projects. I have written a static method in a class as part of one of the projects and will want to access this static method in another project(the project containing the startup form). Please any form of help from anyone is welcome. Thank you.\r\n\t\t    ", "id": "225847", "title": "using static methods of class in a different project", "traffic_rate": 0}, "saved_time": 1721102345, "source": "codeproject", "tags": ["C#"]}, {"answers": [{"content": "\r\n    Static data is just that: static. There is one copy for the whole application (in a similar way to Global Variables in other languages).\n\r\nIf your static data contains user specific information, it will fail because it can't contain different information depending on which user is \"active\" within the app.\n\r\nIgnore computers for a moment, and let's talk about cars.\r\nAll cars have a colour - but which colour it is depends on which specific car you are talking about. My car is black; your car is red; this car is green; that car is blue. Colour is an instance property of the Car class because you need to have a specific instance of a Car in order to ask the question \"what colour is it?\" - you can't say \"what colour is a car?\" because it's meaningless without saying which car you mean.\r\nBut cars have static properties as well: you can ask \"how many wheels has a car?\" because all cars have four wheels. (If it had two, it would be a motorbike, not a car!)\n\r\nAs soon as you start proliferating static data, the chances are your design is wrong: a well designed app will often have little or no static data at all - perhaps a connection string to a DB, maybe a URL to a website. But if you start storing information about a specific user in static data, then that is almost certainly wrong and will cause you problems.\n\r\nI'd go back to your design, and work out why you think this data has to be static - and if that reason is \"so this static method can access it\" then you need to look at \"why is this method static at all?\" rather than \"how can I get instance data into a static method?\".\nstatic methods should only ever work with data that is not instance related, or that can be disassociated from any specific instance and passed to the method via parameters.\r\n", "id": "2_5255326_1", "owner_tier": 0.9, "score": 3.0}], "link": "https://www.codeproject.com/Questions/5255324/How-do-I-handle-static-data-of-each-user-without-i", "question": {"content": "\r\n\t\t\t    Hi,\r\nI have an web api application. I've created a static class with some static properties in that application which is storing few cookies value. Now my question is suppose if 4 users are using concurrently this api (by using 4 tabs in same browser) then will user1 data can get replaced by user 2/3/4?\r\nIf yes then what is the preferred way to store those data. I'm using Autofac DI.\r\nThank\n\nWhat I have tried:\n\r\nI tried to create global variable and creating object of that class each time\r\n\t\t    ", "id": "5255324", "title": "How do I handle static data of each user without impacting others?", "traffic_rate": 0}, "saved_time": 1721102345, "source": "codeproject", "tags": [".NET", "C#3.5", "C#6.0"]}, {"answers": [{"content": "\r\n    Statics tend to be inflexible. You can't interface them, you can't override them, you can't control the timing of their construction, you can't use them well in generics. You can't really version them.\n\r\nThere are certainly uses of statics: constant values work great. You can make database connection or open any file resource in static block\n\r\nSo in general, not bad practice but use them wisely.\n\r\n-KR\r\n", "id": "2_1030923_1", "owner_tier": 0.3, "score": 1.5}, {"content": "\r\n    i agree with my previous speaker - \"use them wisely\".\n\r\nLets have a look the other way round: when is it appropriate to create a class?\r\nplease understand \"class\" as \"construction-plan of objects\". Understand \"static class\" as no-class or the opposite of class.\r\nAnd understand object as a unit of Data togehter with its own functionality, to manipulate it. Other words: An object has a state, and can change it. Another basic concept: you can have several different objects of the same class.\n\r\nSo that is when you need a class: you want several objects of that class, and the object shall have different states.\n\r\nTo answer the question: if you have functionality, but no data, which is  to store in several stated objects, then you don't need a class.\n\r\nAs sample for stated objects take FileInfo-class: each FileInfo contains its own data (information about a file), and its own functionality to manipulate it. And because there are many files on disc, it is required, that one can create many FileoInfos - the class-concept is required.\n\r\nAs sample for functionality, not associated to own data take the System.Math-static-class: It has no state: creating several Math-objects would make no sense at all. In difference to FileInfo each Math-Function gets the data it needs by arguments and returns a result - no state-data is to store.\n\r\nso i see your static-usage as propably completely right: A static class is to store utility-functions. Of course you can still do something wrong, but in general \"utility\" are a concern which is meaningful placed within a static class.\n\r\nThe other way round, namely create an \"utility-object\" each time, whenever you need a function and destroy it afterwards would be - i call it: \"brain-f***\".\r\nAn object should have a state, and should be designed to change it several time. That is what the class-concept was invented for.\n\r\nIt is a mis-design, to apply the class-concepts to concerns, which do not need that.\r\n", "id": "2_1030934_1", "owner_tier": 0.3, "score": 1.89}], "link": "https://www.codeproject.com/Questions/1030918/static-classes-considered-bad-practice", "question": {"content": "\r\n\t\t\t    i read an   article \"Static classes considered bad practice\" couple day ago. most of time i use static classed for utility function. so static class  are consider bad  code Is this correct, and if so, for what reasons?\r\n\t\t    ", "id": "1030918", "title": "static classes considered bad practice?", "traffic_rate": 0}, "saved_time": 1721102345, "source": "codeproject", "tags": ["C#"]}, {"answers": [{"content": "\r\n    Both static methods and instance are just bits of code, the difference being that instance methods always take at least one parameter 'this'.\n\r\nSo, in terms of the methods themselves, they occupy similar amounts of RAM. This RAM will be set when the module loads (first as MSIL, then as native code after its Jitted) and will be there typically until the process dies taking its RAM with it.\n\r\nIt's unusual to think in terms of memory when talking about methods, its the data that gets passed to them and they act upon which is usually the concern.\r\n", "id": "2_1152342_1", "owner_tier": 0.3, "score": 5.0}, {"content": "\r\n    Static methods do not have a lifetime. A static method of a class can be called without instantiating the class.  In other words, static methods can be called practically any time you want.\n\r\nThe gotcha with static members is they must be instantiated and they are initialized before the program entry point is called.  This is just after the various DllMains are called and libraries are initialized. However, the exact timing of these events is unspecified so for this reason one should avoid using RTL functions to initialize static members because they can be unpredictable.  This applies to global objects also.\r\n", "id": "2_1152335_1", "owner_tier": 0.3, "score": 4.0}, {"content": "\r\n    The main differences are\n\r\n1) The static variable exists on the type so if you have a static variable on MyObject and have 100 MyObject objects then you only have one instance of the static variable.  If the variable wasn't static there would be 100 instances of it.\n\r\n2) Static variables are always on the heap even if they would be on the stack if they were non-static, so even if your static variable is an int it is still in the heap and accessed like a reference variable so that will have a knock-on effect in terms of memory management etc.\r\n", "id": "2_1152344_1", "owner_tier": 0.5, "score": 0}], "link": "https://www.codeproject.com/Questions/1152325/What-is-difference-between-static-method-and-norma", "question": {"content": "\r\n\t\t\t    I have found many difference in static and normal method, but most of the answers were around accessibility of members. But there are impacts on memory and lifespan as well.\r\nCan any one tell me with a good example that what happens with RAM and lifespan of static methods when we create static method and normal method.\r\nThanks in advance.\n\nWhat I have tried:\n\r\nAlready know the difference between static class and normal class, static function/members and normal properties.\r\n\t\t    ", "id": "1152325", "title": "What is difference between static method and normal method in class, in terms of memory allocation.", "traffic_rate": 0}, "saved_time": 1721102345, "source": "codeproject", "tags": ["C#"]}, {"answers": [{"content": "\n\n\r\nMyObject.staticMethod();         //Simply refers to the class's static code\r\n\r\nMyObject obj = new MyObject();   //Create an instance\r\nobj.nonstaticMethod();           //Refer to the instance's class's code\r\nOn a deeper level, when the compiler puts a class together, it contains several pointers to methods. When those methods are executed it follows the pointers and executes the code at the far end. If a class is instantiated, the created object contains a pointer to the \"virtual method table\", which points to the methods to be called for that particular class in the inheritance hierarchy. However, if the method is static, no \"virtual method table\" is needed: all calls to that method go to the exact same place in memory to execute the exact same code. For that reason, in high-performance systems it's better to use a static method if you are not reliant on instance variables.\r\n", "id": "2_784210_3", "owner_tier": 0.1, "score": 0}, {"content": "\r\n    A static class is basically the same as a non-static class, but there is one difference: a static class cannot be instantiated - you can't use the new keyword to create a instance of the class type, you can't use the class name on the left of a variable declaration, and you can't create a method that returns a static class because you can't return a value!\n\r\nBecause there is no instance variable, you can only access the members of a static class by using the class name itself, as you have seen.\n\r\nBut...there are three important other things about static classes:\r\n1) You cannot declare non-static class members. If you try, you will get a compilation error. This means that it is a lot more obvious to a user that he needs to use the class name, rather than a class instance.\r\n2) You can only declare Extension methods within static classes.\r\n3) Static classes have a static constructor, which is executed (once, and once only) when the program that references the class is loaded - it is guaranteed to be loaded and to have its fields initialized and its static constructor called before the class is referenced for the first time and a static class remains in memory for the lifetime of the application domain in which your program resides.\r\n", "id": "2_784217_1", "owner_tier": 0.9, "score": 0}, {"content": "\r\n    Making a class static just prevents people from trying to make an instance of it. If all your class has are static members it is a good practice to make the class itself static.\n\n\r\nIf a class is declared as static then the variables and methods should compulsorily be declared as static.\n\r\nA class can be declared static, indicating that it contains only static members. It is not possible to create instances of a static class using the new keyword. Static classes are loaded automatically by the .NET Framework common language runtime (CLR) when the program or namespace containing the class is loaded.\n\r\nUse a static class to contain methods that are not associated with a particular object. For example, it is a common requirement to create a set of methods that do not act on instance data and are not associated to a specific object in your code. You could use a static class to hold those methods.\n\r\nThe main features of a static class are:\n\r\nThey only contain static members.\r\nThey cannot be instantiated.\r\nThey are sealed.\r\nThey cannot contain Instance Constructors or simply constructors as we know that they are associated with objects and operates on data when an object is created.\r\n", "id": "2_784206_2", "owner_tier": 0.1, "score": 1.0}], "link": "https://www.codeproject.com/Questions/784204/Difference-between-instance-classes-and-static-cla", "question": {"content": "\r\n\t\t\t    Hi,\n\r\nMe created a normal class with static methods and also Static classes with static methods.In both cases,i can access static methods by giving \"CLASSNAME.staticmethodname\" instead of \"instance.staticmethodname\".So what is the benefit of using static classes?\r\nPlease help me.\n\n\r\nThanks,\r\nRoshma\r\n\t\t    ", "id": "784204", "title": "Difference between instance classes and static classes", "traffic_rate": 0}, "saved_time": 1721102345, "source": "codeproject", "tags": ["ASP.NET"]}, {"answers": [{"content": "\r\n    There is a lot of articles with clear explanation, you just need to read properly.\n\r\nStatic function is called just by address of the entry point. An instance function, in contrast, is a function with additional hidden parameter called this, in some languages self. Technically, it is passed exactly as any other parameter, usually first one.\n\r\nSo if you have this:\n\nC#\n\r\nclass MyClass {\r\n   public void MyMethod(int parameter) {/*...*/ someField = parameter; }\r\n   private int someField;\r\n}\r\nMyClass myVariable;\r\nmyVariable.MyMethod(3);\n\r\nBehind the scene it works exactly like this (pseudo-code! not real code!):\nC#\n\r\nMyClass.MyMethod(myVariable, 3);\n\r\nAs myVariable is passed as a parameter, it provide access to the instance members (like someField), same thing about other (non-static methods): they will need this way as well, passed from a calling instance method. That's why you cannot call instance method from static once, without some instance. You can only access other static members (including methods) from static methods.\n\r\nNaturally, from an instance method you can access all visible members, both static and instance ones.\n\r\nFor a reference, see my other Answer: What is the Extra Advantage of Delegate[^] \u2014 it's more on delegates but can be useful.\n\r\nThat should resolve your confusion completely, I hope.\n\n\u2014SA\n", "id": "2_152727_3", "owner_tier": 0.9, "score": 1.134}, {"content": "\r\n    It's to do with the language semantics/syntax. Example, with C#, this won't compile:\n\nC#\n\r\nclass A\r\n{\r\n    public static void Foo()\r\n    {\r\n    }\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{\r\n    A a = new A();\r\n    a.Foo();\n\r\nBut the following C++ code will compile, and run:\n\nC++\n\r\nclass A\r\n{\r\npublic:\r\n    static void Foo(){}\r\n};\r\n\r\nint _tmain(int argc, TCHAR* argv[], TCHAR* envp[])\r\n{\r\n    A a;\r\n    a.Foo();\n", "id": "2_152720_2", "owner_tier": 0.7, "score": 2.165}, {"content": "\r\n    A class static function is nothing more than an ordinary function. It exist in the class name scope, but doesn't see any class data.\n\r\nA class member function is a function that have visibility of the data of a class instance.\n\nC#\n\r\nstruct A\r\n{\r\n    int m;\r\n    static bool static_method(int x)\r\n    {\r\n        /* do something not using m */\r\n        // return m==x; //this will be an error.\r\n        return x==0;\r\n    }\r\n    bool method(int x)\r\n    {\r\n        /* do something with m */\r\n        return m==x;\r\n    }\r\n};\r\nvoid test()\r\n{\r\n    A a1, a2;\r\n    a1.m=1;   a2.m=2;\r\n    verify(a1.method(1)); //succeed\r\n    verify(a2.method(2)); //succeed\r\n    //verify(a1.method(3)); //will fail: 3!=1\r\n    //verify(a2.method(4)); //will fail: 4!=2\r\n    verify(A::static_method(0)); // will call A::static_method ...\r\n    verify(a1.static_method(0)); // ... three time, all without ...\r\n    verify(a2.static_method(0)); // ... access the m member.\r\n    //verify(A::static_method(1)); //will fail: 1!=0\r\n    //verify(a1.static_method(1)); //will fail: 1!=0\r\n}\n\r\nIn C++, a1.static_method is allowed, but it is perfectly identical to A::static_method, and -in any case, will get nothing from the a1 object.\r\nIn C# the designer of the language decided not to allow that redundant way to specify the same call.\r\n", "id": "2_152768_1", "owner_tier": 0.3, "score": 0}, {"content": "\r\n    \"My question is that we access a static function with the help of a class name and if we access the static function with the help of an object then we get error, why is this so\" I believe it is so because static applies to all objects of a particular class or just a particular class as a whole, therefore, you access the static function using the class name rather then the instance of the class or an object. \n\r\nSimple Example:\n\n\r\nClassA a(10);\r\n//a.static_function(); //this is wrong because static is referring to any instance of a class\r\n\r\nClassA.static_function();//this is correct because static is referring to a class or every instance of an object\n\r\nNote: I could be wrong about this, please someone verify.\r\nrobNO.\r\n", "id": "2_152781_1", "owner_tier": 0.1, "score": 0}], "link": "https://www.codeproject.com/Questions/152715/static-functions", "question": {"content": "\r\n\t\t\t    I know my question may sound stupid but still thought of giving it a try\n\r\nMy question is that we access a static function with the help  of a class name and if we access the static function with the help of an object then we get error, why is this so.\n\r\nI know a static block or function gets memory before the object gets created then why not access the static function via object name after the object creation. I read many books but none have a clear cut explanation for this please help me out\n\r\nThanks and Regards\r\nRadix\r\n\t\t    ", "id": "152715", "title": "static functions", "traffic_rate": 0}, "saved_time": 1721102345, "source": "codeproject", "tags": ["C++", "C#", "Java"]}, {"answers": [{"content": "\r\n    Refer below links for the answer.\nhttp://stackoverflow.com/questions/7933540/c-sharp-static-class-why-use[^] \n\nhttp://stackoverflow.com/questions/241339/when-to-use-static-classes-in-c-sharp[^]\n\nhttp://www.dotnetfunda.com/forums/thread2305-why-and-where-we-need-to-use-static-class.aspx[^]\n\nhttp://msdn.microsoft.com/en-us/library/79b3xss3%28v=vs.80%29.aspx[^]\n\nhttp://www.dotnetperls.com/static-class[^]\r\n", "id": "2_579313_1", "owner_tier": 0.1, "score": 1.5}, {"content": "\r\n    If a class is declared as static then the variables and methods should compulsorily be declared as static.\n\r\nA class can be declared static, indicating that it contains only static members. It is not possible to create instances of a static class using the new keyword. Static classes are loaded automatically by the .NET Framework common language runtime (CLR) when the program or namespace containing the class is loaded.\n\r\nUse a static class to contain methods that are not associated with a particular object. For example, it is a common requirement to create a set of methods that do not act on instance data and are not associated to a specific object in your code. You could use a static class to hold those methods.\n\r\n->The main features of a static class are:\n\r\nThey only contain static members.\r\nThey cannot be instantiated.\r\nThey are sealed.\r\nThey cannot contain Instance Constructors or simply constructors as we know that they are associated with objects and operates on data when an object is created.\r\n", "id": "2_579402_1", "owner_tier": 0.1, "score": 1.5}, {"content": "\r\n    A static class serves as a convenient way to group (usually) related methods into a single \"toolbox\". In the code base I've built up over the years, I have a static class that encapsulates code for PGP, another that manages regular expression constants and can generate Regex objects using those constants, another that encapsulates Windows COM API calls and yet another that contains data conversion functions.\r\n", "id": "2_579418_1", "owner_tier": 0.3, "score": 5.0}, {"content": "\r\n    The \"static\" key word for a class is just a handy fool-proof syntax element. It helps you to get early error message if you try to put a single instance (non-static) member by accident. By definition, static class simply requires all its members to be static (except nested classes).\n\r\nIn contrast to that, static members of the class really have essential semantic meaning. The non-static members are also called instance member. An instance field is a member of the instance, so a separate field per class instance exists. In contrast, only one static field per Application Domain is created. Static methods do not have the hidden \"this\" parameter representing the class instance, so they cannot address any non-static members.\n\r\nI explained it all in further detail in my past answers:\nWhat makes static methods accessible?[^],\nCatch 22 - Pointers to interface objects die when function using them is made static.[^],\nC# windows base this key word related and its uses in the application[^].\n\n\u2014SA\n", "id": "2_600521_1", "owner_tier": 0.9, "score": 1.1333333333333333}, {"content": "\r\n    Hi\r\n\r\nWell you are right classes marked static do belong to any instance. Well it all depends on your design pattern. Like take me for example, if i am developing a application that interfaces with a database. When retrieving data from the database i create a static class that is responsible for the necessary database functions. Of those retrieved records i use them to create new objects using classes that aren't marked static. \n\r\nI hope i have answered your question\r\n", "id": "2_579383_1", "owner_tier": 0.1, "score": 0.9266666666666666}], "link": "https://www.codeproject.com/Questions/579303/WhyplusweplususeplusStaticplusClass", "question": {"content": "\r\n\t\t\t    hi all , \r\nif static class can access methods without instializing object ,then why \r\nto use Non-static class .? \r\nwhen static class could not be inherited ,why and where we use static class ? \r\ncan any help me on this issue .. \r\nthanks in advance\r\n\t\t    ", "id": "579303", "title": "Why we use Static Class", "traffic_rate": 0}, "saved_time": 1721102345, "source": "codeproject", "tags": ["C#", "C#4.0"]}, {"answers": [{"content": "\nMSDN:A class can be declared static, indicating that it contains only static members. It is not possible to create instances of a static class using the new keyword.\n\r\nCheck Static Classes and Static Class Members (C# Programming Guide)[^].\n\r\nMoreover:\nQuote:\r\n    They only contain static members.\r\n    They cannot be instantiated.\r\n    They are sealed.\r\n    They cannot contain Instance Constructors (C# Programming Guide).\n\n\r\n--Amit\r\n", "id": "2_452348_1", "owner_tier": 0.3, "score": 1.3625}, {"content": "\r\n    Yes we can create object for static classes. But it really does not make sense and is not required.\n\r\nFor eg:\n\nC#\n\r\nclass Sample\r\n{\r\n    public static void main(String args[])\r\n    {\r\n        Math m=new Math();\r\n        System.out.println(m.sqrt(120)); //with help of object\r\n        System.out.println(Math.sqrt(120)); //with out object\r\n    }\r\n}\n", "id": "2_452250_1", "owner_tier": 0.3, "score": 0.7385714285714285}, {"content": "\r\n    Listen first, If we see the difference between a non-static and a static class in C# is simply that a static class cannot be instantiated. This means that you don\u2019t use the new keyword to instantiate an instance of the class. Instead, you will access members of the static class by using the class name. Basically, a static class is intended to be a container for a set of methods that only work with supplied parameters and don\u2019t have a need to store or retrieve data that is unique to them. An example of a static class that\u2019s built into the .NET Framework is the System.Math class. It contains methods which perform various mathematical operations.\n\r\nA static class is like a regular class that only has static members and has a private constructor. If you have a class like this in your design it\u2019s best to make it a static class in order to use the features in the compiler which will insure that instances of the class cannot be created or inherited. By taking this step it will make your code more solid.\n\r\nSometimes there is confusion between a static class and a singleton class where only one instance is allowed. The way to separate them is to understand that the static class should not have any internal variables, each method should function independently, like a function library. However, a singleton class may expose internal values as properties and allow the storage and retrieval of these values. \n\r\nAs I mentioned above static classes cannot be instantiated. Instead, the Framework will call the private constructor for the static class prior to the first place the class is referenced in code. This allows you to blend in your function library seamlessly into your program so if you had a static class like this\u2026\r\n public static class MyFunctions\r\n    {\r\n        public static string Test1(string myValue)\r\n        {\r\n            // Code\r\n        }\n\r\n\t\tpublic static int Test2(int myValue)\r\n        {\r\n            // Code\r\n        }\r\n    }\n\r\n\u2026you can call it like so\u2026\r\n MyFunctions.Test1(CurrentValue); \r\n\u2026without having to create an instance of the object using the new keyword (which you can\u2019t do with a static class anyway). Also, a static class will remain in memory for the lifetime of the application domain where it is created.\n\r\nAs you can see in the example above, a static class can only contain static members. The program won\u2019t compile if you don\u2019t remember to mark each of them as static. Also, static classes are sealed, which means that they cannot be inherited and cannot inherit from any class other than System.Object. While a static class cannot have an instance constructor, they can have a private, static, constructor. This routine will be called when the Framework creates the instance of the object. \n\r\nOne thing to bear in mind here is that if your static class requires a lot of extensive initialization it may not be a good candidate for a static class. In my view, these classes are intended for groups of related, but essentially standalone, functions. Having a substantial initialization routine may indicate that the class might work better as a singleton class or as a regular class. Taking this into consideration early on can prevent you from having to recode a static class into something else.\r\n", "id": "2_452431_1", "owner_tier": 0.1, "score": 0.5614285714285715}, {"content": "\r\n    Add a static class to some new solution:C#\n\r\nnamespace TestStatic\r\n{\r\n    public static class StaticClass\r\n    {\r\n        public static int staticInt = 0;\r\n    }\r\n}From some button press in some container, try the following:C#\n\r\nprivate void button1_Click(object sender, EventArgs e)\r\n{\r\n\r\n    // uncomment this line before you click the button\r\n    // a second time\r\n    //int x = StaticClass.staticInt;\r\n\r\n    MessageBox.Show(typeof(StaticClass).ToString());\r\n\r\n    MessageBox.Show((typeof(StaticClass) is Object).ToString());\r\n}Observe the results. \n\r\nSo, a static class is a Type, and an object ! For extra points explain why you cannot use 'GetType() here instead of 'typeof(), and explain why you cannot directly code:C#\n\r\nMessageBox.Show((StaticClass is Object).ToString());:)\n\r\nbest, Bill\r\n", "id": "2_452324_1", "owner_tier": 0.5, "score": 0}, {"content": "\r\n    Hey See below link:\r\nIt will helpful for you.\nWhy Staic Class?[^]\r\n", "id": "2_452358_1", "owner_tier": 0.1, "score": 0}, {"content": "\nQuote:It is not possible to create instances of a static class using the new keyword. Static classes are loaded automatically by the .NET Framework common language runtime (CLR) when the program or namespace containing the class is loaded.\r\nRef: http://msdn.microsoft.com/en-us/library/79b3xss3(v=vs.80).aspx\n\r\nThe main features of a static class are:\n\r\n    1) They only contain static members.\r\n    2) They cannot be instantiated.\r\n    3) They are sealed.\r\n    4) They cannot contain Instance Constructors (C# Programming Guide).\n\r\nRead the above link. That provides you sufficient information about Static class.\n\r\nYou said that, \"In an interview I was asked this questions that how can we create an object of static class\"?   Answer was straightforward.. \"Not possible(in C#)\"\r\n", "id": "2_452359_1", "owner_tier": 0.1, "score": 0}, {"content": "\r\n    static blocks and static classes are executed before constructor execution but object can be created while executing the constructor only but static blocks are executed before executing constructor so we can't create an object on static classes.\r\n", "id": "2_457618_1", "owner_tier": 0.1, "score": 0}, {"content": "\r\n    Hi,\n\r\nFirst of all one thing you should keep in your mind that Static class/Static method have only single instance per application. \n\r\nWhen very first time you call any of the method from your static class, at that time it's Instance will be created. So if you have 100 Static class in your application it's instance will not be created until it's Method call. If you call two method of your Static class Instance will be created for only first method call and for second method call the lastly created instance will be used.\n\r\nHope you got the idea \r\nBest luck\r\nThanks\r\n-Amit Gajjar\r\n", "id": "2_452312_1", "owner_tier": 0.3, "score": 1.0}, {"content": "\r\n    hi this vijaypratapsingh .answer of your question\n\n\n\r\nA static class cannot be instantiated. You cannot, at any time write new MyStaticClass() without the compiler complaining. It never has a this reference, and the fields, properties and methods can only ever be accessed via the class name: MyStaticClass.MyMethod() In addition, you cannot derive from a static class, not can a static class derive from any class other than object\r\n", "id": "2_784688_1", "owner_tier": 0.1, "score": 1.0}], "link": "https://www.codeproject.com/Questions/452249/How-to-create-object-of-static-class", "question": {"content": "\r\n\t\t\t    Hi,\r\n In an interview I was asked this questions that how can we create an object of static clsss while I have read on everwhere that we can't create object of static class? Please guide if can create then how ?\r\n\t\t    ", "id": "452249", "title": "How to create object of static class ?", "traffic_rate": 0}, "saved_time": 1721102345, "source": "codeproject", "tags": ["C#", "ASP.NET"]}, {"answers": [{"content": "\r\n    You can create an object anywhere. In this case, obj is local to Main and only exists for the lifetime of that method. You don't get an error because creating a c1 doesn't require any instance level information from Program. You can't access i because it is an instance variable in Program.\n\r\nIn a way, obj is static in that it is not bound to an instance (only to a method which is in a static context). What you are looking up from Main, the class c1, is not an instance level item (classes are always 'static' in this sense, though note that that is not what 'static class' is used to mean).\n\r\nI don't really understand the question, in that it is obvious.\r\n", "id": "2_225286_1", "owner_tier": 0.3, "score": 5.0}, {"content": "\r\n    You can instantiate (create an object of) a class in a static or non-static method, as you see above. However the instance variable i (of the Program class) can only exist within an object created from that class, so you would need to have something like:\n\n\r\nstatic void Main(string[] args)\r\n{\r\n    Program obj = new Program();\r\n    obj.i = 34;   // can access instance variable through the object\r\n}\r\n\r\nIf i is made static then you can access it directly, but in that case there is only one such variable for all instances of the class, so change it in one place and it is changed everywhere.\n\n\r\nI would suggest you spend some more time reading your C# documentation in the section(s) concerning classes, objects etc. for more detailed descriptions.\r\n", "id": "2_225287_1", "owner_tier": 0.7, "score": 1.5}, {"content": "\r\n    In the simplest terms, because you are creating an instance of the object (cl). You could, for instance, call this to update/instantiate the value of i:\n\n\n\r\nProgram p = new Program();\r\np.i = 34;\n", "id": "2_225290_1", "owner_tier": 0.5, "score": 5.0}, {"content": "\r\n    You opinion that a static method cannot work with instances (of the same class or any other) is a sorrowful misconception. This is not true, not even close.\n\r\nPlease see my explanation of the matter in my past answers:\nWhat makes static methods accessible?[^],\nCatch 22 - Pointers to interface objects die when function using them is made static.[^].\n\r\nSecond link is to the question about C++, but the explanation is exactly the same (mentally substitute \"function\" with \"method\" :-)).\n\n\u2014SA\n", "id": "2_225472_2", "owner_tier": 0.9, "score": 5.0}, {"content": "\r\n    Umm, I'm a beginner in c# so I won't give a 100% guarantee.\r\nLet's see, AFAIK creating an instance of an object is allowed in static methods. what's forbidden is assigning a value into a non-static variable.\r\nIn your code, obj is a static variable since it's created within static method.\r\n", "id": "2_225293_1", "owner_tier": 0.1, "score": 0.5}], "link": "https://www.codeproject.com/Questions/225275/non-static-member-in-static-method-how-is-it-possi", "question": {"content": "\r\n\t\t\t    Hi , please help me understanding this situation...i asked the issue earlier but unfortunately didnt get the justified answer...\n\nC#\n\r\nclass Program\r\n{\r\n    int i;\r\n    static void Main(string[] args)\r\n    {\r\n        cl obj = new cl();\r\n      //  i=34;   <-- cant access since it is not static.\r\n    }\r\n}\r\n \r\nclass cl\r\n{\r\n    public  void display()\r\n    {\r\n    }\r\n}\n\n\n\r\nMy problen is that in the void main method (which does not allows non-static members in it, how come am i able to create an instance of the 'cl' class (which is non-static)???\r\nWhy does it NOT give an error :\r\n\"An object reference is required for the non-static field, method, or property.\"ked the question\r\n\t\t    ", "id": "225275", "title": "non-static member in static method....how is it possible ?", "traffic_rate": 0}, "saved_time": 1721102345, "source": "codeproject", "tags": ["C#"]}, {"answers": [{"content": "One paradigm that's known in Java is to use Enums. In python it's possible to do it as well check here. Basically you define a metadata class like this: then you define your constants class", "id": 75686449, "owner_tier": 0.3, "score": -4.761904732964423e-10}, {"content": "While the Aaron's answer is the preferred way you can also use metaclasses:", "id": 2546692, "owner_tier": 0.5, "score": 0.14285714238095237}, {"content": "In Python, a class block isn't just a declaration; it's executed at run time to build the class.  Each def inside the class builds a function and binds the name into the class's namespace.  For that reason, you can't simply do A = MyClass() directly inside the class block, because MyClass() isn't fully defined until the class block closes.  Here's how to do it:", "id": 2546668, "owner_tier": 0.9, "score": 0.14285714238095237}, {"content": "After you defined the class, just add these two lines: A class in Python is an object like any other and you can add new variables at any time. You just can't do it inside the class since it's not defined at that time (it will be added to the symbol table only after the whole code for the class has been parsed correctly).", "id": 2546626, "owner_tier": 0.9, "score": 0.9999999995238095}], "link": "https://stackoverflow.com/questions/2546608/create-static-instances-of-a-class-inside-said-class-in-python", "question": {"content": "Apologies if I've got the terminology wrong here\u2014I can't think what this particular idiom would be called. I've been trying to create a Python 3 class that statically declares instances of itself inside itself\u2014sort of like an enum would work. Here's a simplified version of the code I wrote: Writing this, I got an exception on line 2 (A = Test(\"A\")). I assume line 3 would also error if it had made it that far. Using __class__ instead of Test gives the same error. Is there any way to refer to the current class in a static context in Python? I could declare these particular variables outside the class or in a separate class, but for clarity's sake, I'd rather not if I can help it. To better demonstrate what I'm trying to do, here's the same example in Java: This works as you would expect: it prints: How can I do the same thing in Python?", "id": 2546608, "title": "Create static instances of a class inside said class in Python", "traffic_rate": 0}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "stackoverflow", "tags": ["python"]}, {"answers": [{"content": "Use @classmethod: This will result in: [[2,2,2]] /edit/\nthe using normal method example I mention in my comment below (based on Jacques explanation):", "id": 48445495, "owner_tier": 0.5, "score": -9.99999993922529e-09}, {"content": "This runs flawlessly on Python 3.6: Or, with the extra info in your comment:", "id": 48445569, "owner_tier": 0.5, "score": 0.9999999900000001}], "link": "https://stackoverflow.com/questions/48445403/populate-once-static-variable-from-static-method-python-within-a-class", "question": {"content": "I have a Class A in Python and I would like to populate the a static variable calling a static method like: when I run the code I got 'NameError: name A not defined' so essentially I can't initialize the arr static variable. Essentially once the the class has been instantiated once I would like to populate the static variable ", "id": 48445403, "title": "Populate once static variable from static method Python within a class", "traffic_rate": 1}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "stackoverflow", "tags": ["python", "class", "static-methods", "static-variables"]}, {"answers": [{"content": "Ancient thread, but one way to make this work is: Then, you can use it like so: Seems the most 'Pythonic' to me, anyway. Example use case: singleton class where I register handlers for conversion between types. Cheers!", "id": 69410486, "owner_tier": 0.1, "score": 0.0666666666}, {"content": "You could use a classmethod or staticmethod classmethod has advantage that it would work with sub classes, if you really wanted that functionality. module is certainly best though.", "id": 30557075, "owner_tier": 0.7, "score": 0.1466666666}, {"content": "Seems that you need classmethod:", "id": 30556883, "owner_tier": 0.5, "score": -6.666666626150193e-11}, {"content": "The Pythonic way to create a static class is simply to declare those methods outside of a class (Java uses classes both for objects and for grouping related functions, but Python modules are sufficient for grouping related functions that do not require any object instance). However, if you insist on making a method at the class level that doesn't require an instance (rather than simply making it a free-standing function in your module), you can do so by using the \"@staticmethod\" decorator. That is, the Pythonic way would be: But if you want to mirror the structure of Java, you can do: You can also do this with @classmethod if you care to know the specific class (which can be handy if you want to allow the static method to be inherited by a class inheriting from this class):", "id": 30556886, "owner_tier": 0.9, "score": 0.9999999999333333}, {"content": "There are two ways to do that (Python 2.6+): your module file, called klass.py your code:", "id": 30556904, "owner_tier": 0.5, "score": 0.11999999993333332}], "link": "https://stackoverflow.com/questions/30556857/creating-a-static-class-with-no-instances", "question": {"content": "All of the tutorials I see online show how to create classes with __init__ constructor methods so one can declare objects of that type, or instances of that class. How do I create a class (static in Java) so that I can access all methods and attributes of that class without having to create new instances/objects? For example: error: name 'allAirports' is  not defined", "id": 30556857, "title": "Creating a static class with no instances", "traffic_rate": 87}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "stackoverflow", "tags": ["python", "class", "object", "static"]}, {"answers": [{"content": "You can also create a class decorator, which I personally prefer over a metaclass in aesthetics: so that: outputs: 5.641895835477563 EDIT: @Blckknght correctly points out that a function is not a bound method until it is actually bound to an instance, which the class object is not. Switching to isinstance(value, types.FunctionType) would allow proper wrapping.", "id": 57931557, "owner_tier": 0.9, "score": -9.99999993922529e-09}, {"content": "Your metaclass isn't actually doing anything, because types.MethodType matches only bound method objects. You aren't getting any of those when you browse through the class namespace in __new__, so you never wrap anything in staticmethod. You can fix it by changing the check to types.FunctionType (this will probably satisfy automated tools who will correctly see the method types): But I'd suggest just doing away with the classes and using functions directly. Functions are first class objects in Python, you can pass them around between objects as much as you want. If you want a handy grouping of them, you can put them in lists or dictionaries, or use modules to collect their code in various groupings (and use packages to group modules). I'd also advise you to avoid using leading double-underscore __names to try to get privacy for your attributes by invoking name mangling. It doesn't actually protect your data from anything (outside code can still get at it), and it makes it a whole lot harder to debug. It's included in Python to help you avoid accidental name collisions, not to protect member variables as a matter of course.", "id": 57931610, "owner_tier": 0.9, "score": 0.9999999900000001}, {"content": "Why not encapsulate your code at the module level, instead of class, and offer functions to your users? Your code could be as simple as that:", "id": 57931546, "owner_tier": 0.9, "score": -9.99999993922529e-09}], "link": "https://stackoverflow.com/questions/57931486/make-static-class-in-python", "question": {"content": "I like to create helper classes that can be used by other classes and where all methods are static (staticmethod). I need to wrap each method with a decorator @staticmethod, but this solution seems to me not very aesthetic. I decided to create a metaclass for such classes - tools, here is an abstract implementation example: Everything works and gives the correct result, but there are understandable and predictable problems with code inspection in the IDE (I use Pycharm 2019.2). for def get_radius_from_area(area):\nUsually first parameter of a method in named 'self'.\n'area' highlighted in yellow in the return of the method. for get_pi():\nMethod must have a first parameter, usually called 'self'\nVoid in brackets with out arguments is underlined in red. If I add the line \"# noinspection PyMethodParameters\" above the class this partially solves the problem, but it looks even worse than dozens of @staticmethods. I understand why this is happening and why the developers from JetBrains specially adapt parts of the code in their IDE for Django.  But can I somehow beautifully create a purely static class, in which all methods are static?\nMaybe metaclasses are not the best option and is there some kind of alternative solution?", "id": 57931486, "title": "Make static class in Python", "traffic_rate": 2958}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "stackoverflow", "tags": ["python", "python-3.x", "pep8"]}, {"answers": [{"content": "You might actually want a singleton class rather than a static class:\nMaking a singleton class in python", "id": 36810557, "owner_tier": 0.5, "score": -2.5641025485193053e-10}, {"content": "In my experience creating a class is a very good solution for a number of reasons. One is that you wind up using the class as a 'normal' class (esp. making more than just one instance) more often than you might think. It's also a reasonable style choice to stick with classes for everthing; this can make it easier for others who read/maintain your code, esp if they are very OO - they will be comfortable with classes. As noted in other replies, it's also reasonable to just use 'bare' functions for the implementation. You may wish to start with a class and make it a singleton/Borg pattern (lots of examples if you googlefor these); it gives you the flexibility to (re)use the class to meet other needs. I would recommend against the 'static class' approach as being non-conventional and non-Pythonic, which makes it harder to read and maintain.", "id": 10388323, "owner_tier": 0.5, "score": 0.33333333307692303}, {"content": "There are a few approaches you might take for this.  As others have mentioned, you could just use module-level functions.  In this case, the module itself is the namespace that holds them together.  Another option, which can be useful if you need to keep track of state, is to define a class with normal methods (taking self), and then define a single global instance of it, and copy its instance methods to the module namespace.  This is the approach taken by the standard library \"random\" module -- take a look at lib/python2.5/random.py in your python directory.  At the bottom, it has something like this: Or you can take the basic approach you described (though I would recommend using @staticmethod rather than @classmethod in most cases).", "id": 10388302, "owner_tier": 0.5, "score": 0.12820512794871794}, {"content": "It's terrible style, unless you actually need to access the class. A static method [...] does not translate to a Python classmethod. Oh sure, it results in more or less the same effect, but the goal of a classmethod is actually to do something that's usually not even possible [...] (like inheriting a non-default constructor). The idiomatic translation of a [...] static method is usually a module-level function, not a classmethod or staticmethod. source", "id": 10388168, "owner_tier": 0.9, "score": 0.3589743587179487}, {"content": "Generally, usage like this is better done by just using functions in a module, without a class at all.", "id": 10388155, "owner_tier": 0.9, "score": 0.9999999997435898}], "link": "https://stackoverflow.com/questions/10388127/static-classes-in-python", "question": {"content": "I once read (I think on a page from Microsoft) that it's a good way to use static classes, when you don't NEED two or more instances of a class. I'm writing a program in Python. Is it a bad style, if I use @classmethod for every method of a class?", "id": 10388127, "title": "Static classes in Python", "traffic_rate": 15}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "stackoverflow", "tags": ["python", "class", "static", "instance", "class-method"]}, {"answers": [{"content": "There are two ways to access a class attribute: you can either access it directly on a class, or you can read it through self (but not rebind it). Accessing a class attribute through self won't work if there is already a value set directly on the instance so you would normally try to use the class to access a class attribute. When you write self.counter += 1 this is a shorthand for self.counter = self.counter + 1 and as with any other binding through self it sets an instance attribute. This can be useful if you want a default value for instance attributes, you can set them as class attributes and then just update them in the instances which want different values, but to avoid confusion you probably want to avoid using self at all when accessing class attributes. You can also consider making the count method into a class method and moving the increment into another method: if you do that then each subclass will have its own independent counter. That may or may not be what you want here. The cls parameter here is the class that was actually instantiated, this can be useful if you can a whole class hierarchy, or even just a base class CountsInstances where you can put this code once and reuse it with multiple independent counters. Decorating each function with @staticmethod will give you something close to the Java code:", "id": 49736807, "owner_tier": 0.9, "score": 0.9999999994444444}, {"content": "Do not use Cls. Instead you should increment the static variable: If you fix  this way, you can still call count() on instances as well as directly on the class. Output: See What is the difference between @staticmethod and @classmethod in Python? for further infos.", "id": 49736835, "owner_tier": 0.9, "score": -5.555555555555555e-10}], "link": "https://stackoverflow.com/questions/49736753/how-do-i-use-a-static-variable-inside-a-class-in-python", "question": {"content": "I'm learning python, what I want to have is a static counter that counts the number of times the class has been instantiated, but every time I create an instance counter gets recreated and count() function always returns 1.\nI want something that in java would look like this", "id": 49736753, "title": "How do I use a static variable inside a class in Python", "traffic_rate": 12065}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "stackoverflow", "tags": ["python", "python-3.x"]}, {"answers": [{"content": "Just remove the self in the function definition. Since your using the static functions so you need not pass self as an argument for the functions.\nSo your class and function should be like this:", "id": 41512429, "owner_tier": 0.1, "score": 0.010989010879120879}, {"content": "Static methods don't get the object passed in as the first parameter (no object) remove the self parameter and the calls should work.\nThe import problem is relevant too.\nAnd the static comment relevant too.", "id": 12735484, "owner_tier": 0.1, "score": 0.06593406582417582}, {"content": "Just remove self in methods definition. Your intention is to use as static. Self is to work with instance of that class.", "id": 32437762, "owner_tier": 0.1, "score": 0.02197802186813187}, {"content": "If you want to use your functions defined in the class, you have just to create an instance of your class and apply the function. So the result is : Just add () after your class name. @staticmethod is not needed as you are using standard function, not static. But in your case the result is the same.", "id": 24239880, "owner_tier": 0.1, "score": -1.0989010922225593e-10}, {"content": "You're getting the error because you're taking a self argument in each of those functions. They're static, you don't need it. However, the 'pythonic' way of doing this is not to have a class full of static methods, but to just make them free functions in a module. Now, in your other python files (assuming fileutility.py is in the same directory or on the PYTHONPATH) It doesn't mention static methods specifically, but if you're coming from a different language, PEP 8, the python style guide is a good read and introduction to how python programmers think.", "id": 12735474, "owner_tier": 0.5, "score": 0.99999999989011}, {"content": "In python, java-like (or whatever) static methods are not widely used as they don't really have a purpose. Instead, you should simply define your \"methods\" as functions in a module:", "id": 12735464, "owner_tier": 0.9, "score": 0.03296703285714286}, {"content": "You really shouldn't be creating static methods in Python. What you should be doing is putting them at the global function level, and then accessing the module they're in when you call them. foo.py: baz.py:", "id": 12735459, "owner_tier": 0.9, "score": 0.07692307681318682}], "link": "https://stackoverflow.com/questions/12735392/python-class-static-methods", "question": {"content": "I want to create a kind of utility class which contains only static methods which are callable by the name class prefix. Looks like I'm doing something wrong :) Here is my small class: Now my \"main\" method: and I got an error: unbound method GetFilePath() must be called with FileUtility instance as first argument (got str instance instead). A have a few questions here: The new main:", "id": 12735392, "title": "Python class static methods", "traffic_rate": 38}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "stackoverflow", "tags": ["python", "static"]}, {"answers": [{"content": "If all the methods are static, you DON'T need a class. (Same if you have a class with only an init and 1 method) Then you use it mostly like: then I use it this way: Isn't this cleaner and simpler?", "id": 42758390, "owner_tier": 0.5, "score": 0.9999999992857143}, {"content": "Described case is too general to give the exact recipe. Relying on just your sample regular functions looks better here rather than decorator's and class complexity.", "id": 42758430, "owner_tier": 0.3, "score": -7.142857099446636e-10}], "link": "https://stackoverflow.com/questions/42757961/a-class-with-all-static-methods", "question": {"content": "I have a python Class with all methods being static, Is it the right way to do so?", "id": 42757961, "title": "a class with all static methods", "traffic_rate": 10021}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "stackoverflow", "tags": ["python", "python-3.x"]}, {"answers": [{"content": "There are many ways to declare Static Methods or Variables in python. One can simply put a decorator above a method(function) declared to make it a static method. For eg. This method can receive an argument which is of function type, and it returns a static version of the function passed. For eg. @classmethod has similar effect on a function as @staticmethod has, but\nthis time, an additional argument is needed to be accepted in the function (similar to self parameter for instance variables). For eg. @classmethod can also be used as a parameter function, in case one doesn't want to modify class definition. For eg. A method/variable declared outside all other methods, but inside a class is automatically static. Refer to Python Documentation for mastering OOP in python.", "id": 69723203, "owner_tier": 0.3, "score": 0.002542372877118644}, {"content": "You can create the class variable x, the instance variable name, the instance method test1(self), the class method test2(cls) and the static method test3() as shown below: I explain about class variable in my answer and class method and static method in my answer and instance method in my answer.", "id": 74501446, "owner_tier": 0.1, "score": 0.00042372880932203393}, {"content": "Assuming you are not looking for a truly static variable but rather something pythonic that will do the same sort of job for consenting adults, then use a class variable.\nThis will provide you with a variable which all instances can access (and update) Beware: Many of the other answers which use a class variable will break subclassing. You should avoid referencing the class directly by name. will give you the same functionality as using Sheldon.foo to address the variable and will pass tests like these: It will also allow someone else to simply: which will also work: For great advice on things to watch out for when creating classes check out Raymond Hettinger's video https://www.youtube.com/watch?v=HTLu2DFOdTg", "id": 72141879, "owner_tier": 0.1, "score": -4.237288109841224e-12}, {"content": "As the other answers have noted, static and class methods are easily accomplished using the built-in decorators: As usual, the first argument to my_method() is bound to the class instance object. In contrast, the first argument to my_class_method() is bound to the class object itself (e.g., in this case, Test). For my_static_method(), none of the arguments are bound, and having arguments at all is optional. However, implementing \"static variables\" (well, mutable static variables, anyway, if that's not a contradiction in terms...) is not as straight forward. As millerdev pointed out in his answer, the problem is that Python's class attributes are not truly \"static variables\". Consider: This is because the line x.i = 12 has added a new instance attribute i to x instead of changing the value of the Test class i attribute. Partial expected static variable behavior, i.e., syncing of the attribute between multiple instances (but not with the class itself; see \"gotcha\" below), can be achieved by turning the class attribute into a property: Now you can do: The static variable will now remain in sync between all class instances. (NOTE: That is, unless a class instance decides to define its own version of _i! But if someone decides to do THAT, they deserve what they get, don't they???) Note that technically speaking, i is still not a 'static variable' at all; it is a property, which is a special type of descriptor. However, the property behavior is now equivalent to a (mutable) static variable synced across all class instances. For immutable static variable behavior, simply omit the property setter: Now attempting to set the instance i attribute will return an AttributeError: Note that the above methods only work with instances of your class - they will not work when using the class itself. So for example: The line assert Test.i == x.i produces an error, because the i attribute of Test and x are two different objects. Many people will find this surprising. However, it should not be. If we go back and inspect our Test class definition (the second version), we take note of this line: Clearly, the member i of Test must be a property object, which is the type of object returned from the property function. If you find the above confusing, you are most likely still thinking about it from the perspective of other languages (e.g. Java or c++). You should go study the property object, about the order in which Python attributes are returned, the descriptor protocol, and the method resolution order (MRO). I present a solution to the above 'gotcha' below; however I would suggest - strenuously - that you do not try to do something like the following until - at minimum - you thoroughly understand why assert Test.i = x.i causes an error. I present the (Python 3) solution below for informational purposes only. I am not endorsing it as a \"good solution\". I have my doubts as to whether emulating the static variable behavior of other languages in Python is ever actually necessary. However, regardless as to whether it is actually useful, the below should help further understanding of how Python works. UPDATE: this attempt is really pretty awful; if you insist on doing something like this (hint: please don't; Python is a very elegant language and shoe-horning it into behaving like another language is just not necessary), use the code in Ethan Furman's answer instead. Emulating static variable behavior of other languages using a metaclass A metaclass is the class of a class. The default metaclass for all classes in Python (i.e., the \"new style\" classes post Python 2.3 I believe) is type. For example: However, you can define your own metaclass like this: And apply it to your own class like this (Python 3 only): Below is a metaclass I have created which attempts to emulate \"static variable\" behavior of other languages. It basically works by replacing the default getter, setter, and deleter with versions which check to see if the attribute being requested is a \"static variable\". A catalog of the \"static variables\" is stored in the StaticVarMeta.statics attribute. All attribute requests are initially attempted to be resolved using a substitute resolution order. I have dubbed this the \"static resolution order\", or \"SRO\". This is done by looking for the requested attribute in the set of \"static variables\" for a given class (or its parent classes). If the attribute does not appear in the \"SRO\", the class will fall back on the default attribute get/set/delete behavior (i.e., \"MRO\").", "id": 27568860, "owner_tier": 0.9, "score": 0.12245762711440678}, {"content": "Variables declared inside the class definition, but not inside a method are class or static variables: As @millerdev points out, this creates a class-level i variable, but this is distinct from any instance-level i variable, so you could have This is different from C++ and Java, but not so different from C#, where a static member can't be accessed using a reference to an instance. See what the Python tutorial has to say on the subject of classes and class objects. @Steve Johnson has already answered regarding static methods, also documented under \"Built-in Functions\" in the Python Library Reference. @beidy recommends classmethods over staticmethod, as the method then receives the class type as the first argument.", "id": 68672, "owner_tier": 0.9, "score": 0.9999999999957627}, {"content": "With Object datatypes it is possible. But with primitive types like  bool, int, float or str bahaviour is different from other OOP languages. Because in inherited class static attribute does not exist. If attribute does not exists in inherited class, Python start to look for it in parent class. If found in parent class, its value will be returned. When you decide to change value in inherited class, static attribute will be created in runtime. In next time of reading inherited static attribute its value will be returned, bacause it is already defined. Objects (lists, dicts) works as a references so it is safe to use them as static attributes and inherit them. Object address is not changed when you change its attribute values. Example with integer data type: Solution based on refdatatypes library:", "id": 68682495, "owner_tier": 0.1, "score": 0.004661016944915254}, {"content": "Not like the @staticmethod but class variables are static method of class and are shared with all the instances. Now you can access it like or you have to assign the value to these variables I was trying and assigning the value in one method call, in that case it will not work and will throw an error", "id": 66255775, "owner_tier": 0.5, "score": -4.237288109841224e-12}, {"content": "@dataclass definitions provide class-level names that are used to define the instance variables and the initialization method, __init__(). If you want class-level variable in @dataclass you should use typing.ClassVar type hint. The ClassVar type's parameters define the class-level variable's type. Usage examples:", "id": 65918726, "owner_tier": 0.9, "score": 0.0063559321991525424}, {"content": "Put it this way the static variable is created when a user-defined a class come into existence and the define a static variable it should follow the keyword self,", "id": 62960717, "owner_tier": 0.1, "score": 0.00042372880932203393}, {"content": "If you are attempting to share a static variable for, by example, increasing it across other instances, something like this script works fine:", "id": 61805905, "owner_tier": 0.1, "score": 0.001271186436440678}, {"content": "So this is probably a hack, but I've been using eval(str) to obtain an static object, kind of a contradiction, in python 3. There is an Records.py file that has nothing but class objects defined with static methods and constructors that save some arguments.  Then from another .py file I import Records but i need to dynamically select each object and then instantiate it on demand according to the type of data being read in. So where object_name = 'RecordOne' or the class name, I call cur_type = eval(object_name) and then to instantiate it you do cur_inst = cur_type(args)\nHowever before you instantiate you can call static methods from cur_type.getName() for example, kind of like abstract base class implementation or whatever the goal is.  However in the backend, it's probably instantiated in python and is not truly static, because eval is returning an object....which must have been instantiated....that gives static like behavior.", "id": 61080153, "owner_tier": 0.1, "score": 0.001271186436440678}, {"content": "@Blair Conrad said static variables declared inside the class definition, but not inside a method are class or \"static\" variables: There are a few gotcha's here. Carrying on from the example above: Notice how the instance variable t.i got out of sync with the \"static\" class variable when the attribute i was set directly on t. This is because i was re-bound within the t namespace, which is distinct from the Test namespace. If you want to change the value of a \"static\" variable, you must change it within the scope (or object) where it was originally defined. I put \"static\" in quotes because Python does not really have static variables in the sense that C++ and Java do. Although it doesn't say anything specific about static variables or methods, the Python tutorial has some relevant information on classes and class objects.  @Steve Johnson also answered regarding static methods, also documented under \"Built-in Functions\" in the Python Library Reference. @beid also mentioned classmethod, which is similar to staticmethod. A classmethod's first argument is the class object. Example: ", "id": 69067, "owner_tier": 0.5, "score": 0.32711864406355934}, {"content": "You can use a list or a dictionary to get \"static behavior\" between instances.", "id": 58683325, "owner_tier": 0.5, "score": 0.000847457622881356}, {"content": "Yes, definitely possible to write static variables and methods in python. Static Variables :\nVariable declared at class level are called static variable which can be accessed directly using class name. Instance variables: Variables that are related and accessed by instance of a class are instance variables. Static Methods: Similar to variables, static methods can be accessed directly using class Name. No need to create an instance.  But keep in mind, a static method cannot call a non-static method in python.", "id": 53775598, "owner_tier": 0.5, "score": 0.004237288131355932}, {"content": "One very interesting point about Python's attribute lookup is that it can be used to create \"virtual variables\": Normally there aren't any assignments to these after they are created.  Note that the lookup uses self because, although label is static in the sense of not being associated with a particular instance, the value still depends on the (class of the) instance.", "id": 46335281, "owner_tier": 0.9, "score": 0.004661016944915254}, {"content": "Static methods in python are called classmethods. Take a look at the following code Notice that when we call the method myInstanceMethod, we get an error. This is because it requires that method be called on an instance of this class. The method myStaticMethod is set as a classmethod using the decorator @classmethod. Just for kicks and giggles, we could call myInstanceMethod on the class by passing in an instance of the class, like so:", "id": 68770, "owner_tier": 0.5, "score": 0.009322033894067796}, {"content": "Absolutely Yes,\n  Python by itself don't have any static data member explicitly, but We can have by doing so  output explanation", "id": 42392246, "owner_tier": 0.1, "score": 0.00381355931779661}, {"content": "For anyone using a class factory with python3.6 and up use the nonlocal keyword to add it to the scope / context of the class being created like so:", "id": 41413059, "owner_tier": 0.7, "score": 0.00169491525}, {"content": "When define some member variable outside any member method, the variable can be either static or non-static depending on how the variable is expressed.  For example: The results are", "id": 15644143, "owner_tier": 0.1, "score": 0.006779661012711864}, {"content": "The best way I found is to use another class. You can create an object and then use it on other objects. With the example above, I made a class named staticFlag. This class should present the static var __success (Private Static Var). tryIt class represented the regular class we need to use. Now I made an object for one flag (staticFlag). This flag will be sent as reference to all the regular objects. All these objects are being added to the list tryArr. This Script Results:", "id": 15117875, "owner_tier": 0.5, "score": 0.002542372877118644}, {"content": "It is possible to have static class variables, but probably not worth the effort. Here's a proof-of-concept written in Python 3 -- if any of the exact details are wrong the code can be tweaked to match just about whatever you mean by a static variable: and in use: and some tests:", "id": 36216964, "owner_tier": 0.9, "score": 0.007203389826271186}, {"content": "You can also add class variables to classes on the fly And class instances can change class variables", "id": 81002, "owner_tier": 0.5, "score": 0.019491525419491524}, {"content": "In regards to this answer, for a constant static variable, you can use a descriptor. Here's an example: resulting in ... You can always raise an exception if quietly ignoring setting value (pass above) is not your thing. If you're looking for a C++, Java style static class variable: Have a look at this answer and the official docs HOWTO for more information about descriptors. ", "id": 24553443, "owner_tier": 0.9, "score": 0.00381355931779661}, {"content": "One special thing to note about static properties & instance properties, shown in the example below: This means before assigning the value to instance property, if we try to access the property thru' instance, the static value is used. Each property declared in python class always has a static slot in memory.", "id": 9613563, "owner_tier": 0.5, "score": 0.01016949152118644}, {"content": "You could also enforce a class to be static using metaclass. Then whenever by accident you try to initialize MyClass you'll get an StaticClassError.", "id": 8201368, "owner_tier": 0.3, "score": 0.005084745758474576}, {"content": "To avoid any potential confusion, I would like to contrast static variables and immutable objects. Some primitive object types like integers, floats, strings, and touples are immutable in Python. This means that the object that is referred to by a given name cannot change if it is of one of the aforementioned object types. The name can be reassigned to a different object, but the object itself may not be changed. Making a variable static takes this a step further by disallowing the variable name to point to any object but that to which it currently points. (Note: this is a general software concept and not specific to Python; please see others' posts for information about implementing statics in Python).", "id": 79840, "owner_tier": 0.5, "score": 0.002118644063559322}, {"content": "Personally I would use a classmethod whenever I needed a static method. Mainly because I get the class as an argument. or use a decorator For static properties.. Its time you look up some python definition.. variable can always change. There are two types of them mutable and immutable.. Also, there are class attributes and instance attributes.. Nothing really like static attributes in the sense of java & c++ Why use static method in pythonic sense, if it has no relation whatever to the class! If I were you, I'd either use classmethod or define the method independent from the class.", "id": 68747, "owner_tier": 0.3, "score": 0.011864406775423728}], "link": "https://stackoverflow.com/questions/68645/class-static-variables-and-methods", "question": {"content": "How do I create class (i.e. static) variables or methods in Python?", "id": 68645, "title": "Class (static) variables and methods", "traffic_rate": 307}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "stackoverflow", "tags": ["python", "class", "static", "class-variables"]}, {"answers": [{"content": "While your class does have a static field called StaticList, you are actually initializing and working with an instance field of the same name because of the self qualifier you are using. I think your code will work fine if you use MyClass.StaticList to initialize and access it instead. In general, by Python's name lookup, you can access a class field via an instance as if it was an instance field (e.g., self.StaticList) on that instance as long as you haven't actually set an instance field of the same name on that instance. From that moment on, the instance field shadows the class field (i.e., self.StaticList will find your new value, while MyClass.StaticList will still refer to your class value). As an example fresh from the interpreter: The instance variable a.v is initially equal to A.v, but by explicitly setting a.v=7, you are \"dissociating\" them in that instance.  While this means that, in principle, you could make use of a static class field MyClass.Values as well as an instance field xyz.Values of the same name, this is often discouraged for exactly this kind of confusion. As a separate remark, you could consider annotating the data method as a @staticmethod (and remove the self argument in the move) and call it as MyClass.data() to make the fact clearer that you would be getting back the same list instance on every call.", "id": 43200798, "owner_tier": 0.5, "score": 0.9999999980000001}], "link": "https://stackoverflow.com/questions/43186844/python-static-class-variables", "question": {"content": "I'm from a C++ background and have often been using static vars to reduce the number of time variables have to be initialized (especially if the initialization takes very long). So from other posts on StackOverflow, people suggested using static class variables as follows: Now this is fine if there exists at least 1 instance of MyClass throughout the execution of the program and the lists are only created once. However, if at some stage of the execution there is no instance of MyClass, Python seems to remove the static lists (I assume because the reference counter drops to 0). So my question, is there any easy way without using external modules to initialize StaticList1 and StaticList2 only once (the first time they are used) and never to remove them even if there is no instance of MyClass until the program exists (or you delete the lists manually)? EDIT: Maybe I oversimplified this issue. What I'm doing: I import the module from another script and have a loop like this: The initializing of the static list takes about 200 - 300 ms and is executed on every iteration of the loop, so the loop takes extremely long to finish.", "id": 43186844, "title": "Python - Static Class Variables", "traffic_rate": 4459}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "stackoverflow", "tags": ["python", "class", "static"]}, {"answers": [{"content": "A class is a blueprint. An instance is a concrete thing created from said blueprint. It's the difference between planning a house and actually having a house, if that helps.\n\nClass methods are methods that, instead of operating on the class instance, operate on the class itself. Usually they're used as alternative `__init__`-methods to quickly create certain kinds of instances. For instance, `pathlib.Path` is a class you can use to create filepaths, but you can use `Path.home` to instantly create an instance pointing to your user directory.\n\nStatic methods are basically just ordinary functions stuffed into a class, they have no access to the class, instance, or their methods. Usually not used for that reason unless you want to combine the common parts of two methods, such as if you have two methods that each read a file; you can have a static method that handles the reading part and just give it the parameters in the normal methods.\n\nThank you. I understood instances. So let's just say objects are instances of a certain class. What are other instances apart from objects?\n\nThere are none. You can basically say objects == instances. There are no \"other types\" of instances.\n\nI do admit that it gets a bit confusing because classes themselves are also technically objects in Python, but don't get yourself caught on that. Just ignore it. You don't need to worry about metaprogramming, probably ever.", "id": "hqj9i97", "owner_tier": 0.7, "score": 0.999999995}, {"content": "One car honking should only require that particular car (instance method). All cars need to fit on the road, so a maximum legal width could be a class variable, and confirming that a given width is legal for a car could be a class method. It may be relevant to convert between speed units (e.g. km/h to mph) when working with cars, but nothing about that is inherent to a car itself, so that could be implemented as a static method (assuming that functionality is only relevant for cars in your codebase - otherwise it may be better suited as a general function somewhere else, or perhaps as a static method of a more general Vehicle class, as the parent of your Car class).", "id": "hqjb5km", "owner_tier": 0.3, "score": -4.999999969612645e-09}], "link": "https://www.reddit.com/r/learnpython/comments/rrze6k/class_static_methods/", "question": {"content": "Hello everyone,\n\nI was studying OOP and the concept of instances, class methods and static methods still confuses me.\n\nI have watched tons of YouTube already but I can't find a person who explains it as dumb as possible because that is how I understand things. \n\nPlease if there is anyone who can recommend to me a video or explain it to me in the simplest way possible with examples, I will be glad :) \n\nNote: I want the simplest form of explanation about the matter.", "id": "rrze6k", "title": "CLASS & STATIC METHODS", "traffic_rate": 153.13037037037037}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "reddit"}, {"answers": [{"content": "[Please fix the formatting of the code, it confused me until I peeked in the source with RES. \ud83d\ude09]\n\nThe class variable(\\*) `A.var1` isn\u2019t incremented because `self.var1 += 1` is essentially the same as `self.var1 = self.var1 + 1`. The right-hand-side expression reads the class variable `A.var1` (because no instance variable of that name exists yet), increments it and assigns the result to the (newly created) instance variable `self.var1` (left-hand-side) which hides the underlying class variable. You could now delete the instance variable (`del self.var1`), then accessing `self.var1` would access the class variable again.\n\n(\\*): Please don\u2019t use the term \u201cstatic variable\u201d in Python, it can be confusing because we have:\n\n* normal (instance) methods which can directly access the instance object through their first positional parameter `self`\n* class methods (decorated with `@classmethod`) which can directly access the class (through their first positional parameter `cls`)\n* static methods (decorated with `@staticmethod`) which can access neither instance nor class directly, they\u2019re essentially normal functions which are attached to a class namespace", "id": "jqv4tws", "owner_tier": 0.5, "score": 0.49999999833333336}, {"content": "The Python docs have helped me quite a bit. I think the data model reference specifically would be useful in your case here:\nhttps://docs.python.org/3/reference/datamodel.html\n\nNamely, the sections on class vs instance methods and attributes.", "id": "jqv5b90", "owner_tier": 0.3, "score": 0.49999999833333336}, {"content": ">But why does it not give me an error now? I haven't created a object/instance level self.var1 variable yet, just a class level variable var1.\n\nIt looks for the instance variable first, and if that's not found, it tries to find a class variable.\n\nThe rest of this comment isn't directly about your question, but since you said you are coming from Java: a lot of people coming from Java in particular often write Python code in a non-idiomatic way. They tend use classes way too much. You don't have to arrange everything in a class like you do in Java; functions and variables can live perfectly happy in the module-level scope.\n\nAnother thing that may not be immediately apparent: classes are objects, and are defined at runtime. You can do this, for example:\n\n    for _ in range(10):\n        class Something:\n            pass\n\nIt defines and overwrites an empty class ten times in a row, the final one survives the loop. Obviously this example is useless but sometimes you need to do things like define a class dynamically in a function and return it.\n\nThese videos might be helpful for you:\n\n- [Beyond PEP8](https://youtu.be/wf-BqAjZb8M?t=1341) the first part of this isn't that interesting, it's just about code formatting. The good bit starts at 22mins where he does a worked example of turning Java-like Python into idiomatic Python  \n- [Stop Writing Classes](https://www.youtube.com/watch?v=o9pEzgHorH0) addresses overuse of classes and OOP  \n- [Facts and Myths about Python names and values](https://www.youtube.com/watch?v=_AEJHKGk9ns): Python's naming/variable semantics can seem more complicated than they really are, especially if you're used to a statically-typed compiled language that distinguishes between primitive types and reference types. Python is dynamically-typed, interpreted, and *everything*^1 is an object. This video explains the rules explicitly, and they turn out to be quite simple.  \n- [Top to Down, Left to Right](https://www.youtube.com/watch?v=DlgbPLvBs30): exposition of Python's execution model, again it's fairly simple but can seem counterintuitive if you're used to something else.\n\nFurthermore, many design patterns you might be used to from Java either don't apply to Python, or have to be tweaked a little. [This site](https://python-patterns.guide/) has a detailed treatment.\n\n^(1)everything that can appear on the RHS of an equal sign. keywords like `def` aren't objects.\n\n> people coming from Java in particular often write Python code in a non-idiomatic way\n\nLike using camelCase instead of snake_case.\n\nyeah but that's just an aesthetic thing, the real issue is code structure\n\nIt's also inconsistent when using the batteries included, because all those functions are snek case.", "id": "jqvg25g", "owner_tier": 0.1, "score": 0.9999999983333333}, {"content": "> Does Python automatically use the class level variable with the same name since there is no instance level variable defined with the same name?\n\nJava just does that when we attempt to access a field using instance syntax w/o using keyword `this`! \n\nMore precisely, Java looks up 1st if there's any local variable or parameter w/ that name.  \n\nThen 2nd, Java looks up for an instance field of that name.  \n\nAnd 3rd, if all the lookups above fail, Java will use the static field w/ that name if it exists.  \n\nPython also has a somewhat similar lookup path but w/ at least 1 notable caveat:  \n\nIf Python ends up reaching a static field when using instance access syntax, it will make a clone of the former as an instance field, as others here have already pointed out!", "id": "jqvii92", "owner_tier": 0.1, "score": 0.3333333316666667}, {"content": "I have been wanting to know the answer to this too.", "id": "jqv138r", "owner_tier": 0.1, "score": 0.166666665}, {"content": "Most simple data types (numbers, bools, strings, tuples, bytes, frozenset) are immutable in Python. For immutable data types, inplace operations like `x+=5` are the same as `x=x+5`. In your example you have `self.var1 += 1` which is `self.var1 = self.var1 + 1` where the right hand side lives in the class and the left hand side belongs to the instance.", "id": "jqv8n29", "owner_tier": 0.3, "score": -1.6666666666666667e-09}, {"content": "Yes - looking up a variable on an instance will subsequently look it up on the class if not found on the instance.  Ie the lookup process is essentially \"instance, then class, then parent classes\".  Thus you don't get an error because it can access the class variable.\n\n>And when I call A.var1 the output is 10\n\nUltimately, because (for immutable types like integers) `self.var1 += 1` is equivalent to `self.var1 = self.var1 + 1`.  The right hand side will end up accessing the class variable, but the assignment will set it as an instance variable, shadowing the class variable when you access it through the instance.\n\nA slight warning here (and the reason I specified immutable types above) is that you'll see different behaviour for mutable types - `+=` more accurately boils down to `self.var1 = self.var1.__iadd__(1)`, where `__iadd__` is in-place addition, allowing the object to mutate itself and return the same object. \n then assigning it.  Immutable variables can't be mutated, so return a different object, so self.var1 and A.var1 end up different.  but if `var1` was a list or something, they'd both end up referencing the same object.", "id": "jqv9ebx", "owner_tier": 0.7, "score": 0.166666665}, {"content": "When you do self.xxx, it calls a method called `__getattribute__`. That method by default leads to reading attributes from slots, the instance dict, or failing this the class itself.\n\nThat's what happens when you call an instance method. It goes and looks up on the object for the attribute you requested, and when it fails to find that, it will check the class. That's why you have to have a self parameter in instance methods. Python will wrap the function in a method handle which is effectively like this (just dealt with in C).\n\n    def method_handle(function, self):\n        def method(*args, **kwargs):\n            return function(self, *args, **kwargs)\n        return method", "id": "jqvam2u", "owner_tier": 0.7, "score": 0.166666665}], "link": "https://www.reddit.com/r/learnpython/comments/14s18vo/can_someone_explain_how_objectinstance_variables/", "question": {"content": "So I come from a Java background where defining, declaring and accessing static and instance level variables are pretty much a straightforward process. I want to be able to understand OOP concepts of Python properly so I have been doing some practice.\n\nI have a class:\n\n    class A:\r\n  \r\n\r\n  def __init__(self):\r\n    pass\r\n\r\n  def someFunc(self):\r\n    self.var1 += 1 \n\nI create an object of this class and call the `someFunc()` method:\n\n    a = A() \n    a.someFunc()\n\nIt gives me an error. Ok, fair enough since I haven't declared a `self.var1` variable yet.\n\nConsider another example.\n\n    class A:\r\n  var1 = 10\r\n\r\n  def __init__(self):\r\n    pass\r\n\r\n  def someFunc(self):\r\n    self.var1 += 1 \n\nNow when I do this:\n\n    a = A()\n    a.someFunc()\n    \n    Output: 11\n\n&#x200B;\n\nI know that variables defined just below the class definition are class/static variables. And to access them you have to do `A.var1`\n\nBut why does it not give me an error now? I haven't created a object/instance level `self.var1` variable yet, just a class level variable `var1`.\n\nAnd when I call `A.var1` the output is 10. Why is the output not the same as `a.var1`?\n\nDoes python automatically use the class level variable with the same name since there is no instance level variable defined with the same name? And does that in turn become a different variable from the class level variable?\n\nCan someone please elaborate?", "id": "14s18vo", "title": "Can someone explain how object/instance variables vs class/static variables work in Python?", "traffic_rate": 153.13037037037037}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "reddit"}, {"answers": [{"content": "the second function declaration is incorrect, and should be:\n\n    def g(self, x, y):\n\nThe `@staticmethod` means that the function does not need a `self` argument.", "id": "l1o71rw", "owner_tier": 0.9, "score": 0.4545454542424242}, {"content": "The difference comes when you instantiate the class.\n\n\t>>> a = A()\n\t>>> a.f(1,1)\n\t2\n\t>>> a.g(1,1)\n\tTraceback (most recent call last):\n\t  File \"<stdin>\", line 1, in <module>\n\tTypeError: A.g() takes 2 positional arguments but 3 were given\n\n`a.g` doesn't work because whenever you call some_object.some_method(...), Python inserts `some_object` itself as the first argument (which should be named `self` for that reason).\n\nthanks!\n\nAnother difference (which stems from the first, really) is the fact that you don't need to create an instance of the class in order to run the static method. Both approaches are fine:\n\n    A.f(1, 1)\n\n    a = A()\n    a.f(1, 1)", "id": "l1o70fr", "owner_tier": 0.7, "score": 0.4545454542424242}, {"content": "The difference is only apparent when accessing the method through an instance of `A`, i.e. `A().f(1, 2)`. `f`, being a static method, would behave exactly the same as when accessing it through the class. `g`, being a regular instance method, would automatically be passed the instance as the argument for `x`. So `A().g(1, 2)` would result in a `TypeError`, as it'd receive a total of three arguments.\n\nThere's a final type of method, class methods using the `@classmethod` decorator, that are automatically passed a reference to the class they're accessed through, whether that's through the class directly or via one of its instances:\n\n    class A:\n        @classmethod\n        def h(cls, x, y):\n            return x + y\n\n    A.h(1, 2) # cls = A\n    A().h(1, 2) # same thing\n\nThat's useful if the method call happens on a subclass of `A`, since the argument passed to `h` would be that subclass.\n\nTo be honest, in most situations something should either be a class method, an instance method, or not a method, at all. In my experience, there's very few reasons to have static methods.\n\nI used static methods whenever I felt like packing methods under one class for the sake of clarity and organization. (math stuff that didn't care for references anyway)\n\nthanks!\n\n>To be honest, in most situations something should either be a class method, an instance method, or not a method, at all. In my experience, there's very few reasons to have static methods.\n\nThey're good for capturing computation that is related to its containing class but does not needs its attributes. That's a pretty common pattern, to me.\n\nThe main reason for me is constructors. Other languages allow you to overload your constructor and have different methods to create an object but python sticks to \\_\\_init\\_\\_. \n\nHaving a load\\_from\\_file static method as well as the default constructor is the main use for me.\n\nThat's the most cited reason and similar to how it's done in languages like Java and C# where all functions have to be methods. But in Python, in think it makes better organizational sense to put such static methods into their own separate module as regular functions instead. The bundling of definitions into a namespace is what modules exist for, after all. Classes are for OOP, and if your function doesn't use instance or class state, I'd personally argue it has no business being a method. Keeping to that distinction is its own kind of clarity, in my opinion.\n\nThe situations where a function is tightly coupled to the functioning of a class and so should live inside it but also doesn't benefit from receiving a reference to either a particular subclass or instance are very few.\n\nI realise this comes down to preference, but I'd argue something that doesn't use either class or instance state isn't truly sufficiently related to the class to live inside it. It can live as a top-level function in the same module as the class, and if that module isn't too bloated, then that's organizationally equivalent. Organizing definitions into namespaces is what modules are for, after all. The purpose of a class is a little more specific than that (even though there are other languages whose design explicitly disagrees with that sentiment).\n\nI'd say such methods should be class methods not static methods, as then they work better for subclasses.\n\nHmmm, I agree but still, when building larger modules (math for example) in my opinion it's a good idea to separate some functions for clarity. In theory, you could just name those functions differently, or build a separate file for them, or make them handle it internally (which I don't think is a good idea in a lot of cases) but NumberMath.add and VectorMath.add are intuitive and there's no reason class structure shouldn't be used to make it more easier, in my opinion. (stupid example but fastest I could think of).\n\nDon't get me wrong, I'm glad I learned something from your post today because I never knew of classmethods before. I've had situations where I could have used them and made it easier for me\n\nFair enough, I understand that preference, even if I don't share it. A module with multiple classes and a function that only relates to a single one of them, is an example of a scenario where I'd prefer the static method over the module-level function. That said, perhaps the module should be split in that scenario.\n\nTotally blipped, definitely class methods.", "id": "l1o6upb", "owner_tier": 0.3, "score": 0.9999999996969696}, {"content": "A static method is basically a function that doesn\u2019t actually have to be in the class, but is located there because it\u2019s a reasonable place for it to be. It doesn\u2019t use any class instance attributes. You can use it directly from the class without creating an instance if you want", "id": "l1plmkg", "owner_tier": 0.9, "score": 0.03030303}, {"content": "I think of static methods as the ones I can call for any simple usage. ie: calculator class with a get_sum method. Sometimes I do not want to instanciate a calculator object just to use the get_sum method.", "id": "l1oynne", "owner_tier": 0.1, "score": -3.030303011886452e-10}, {"content": "Static method does not take self as first argument. One use case is a helper function or utility to a class method or regular method for your instantiated object.\n\n\nClass method takes in the cls as first argument, and works directly on the class state, not an instantiated object of the class.", "id": "l1pyhow", "owner_tier": 0.3, "score": -3.030303011886452e-10}, {"content": "Adding to the existing answers, the most common way I use `staticmethod` is to implement caching for a regular method, while only focusing on the relevant attributes. The regular method would delegate the work to the static method (the latter uses `functools.cache` as an extra decorator) by giving it the needed data, and the cache now only tracks that data instead of every attribute of the class instance.\n\nWhile I could use a regular function instead, usually the static method is already very much thematically bound to the class so using it outside of it wouldn't really be useful.", "id": "l1q4nxw", "owner_tier": 0.7, "score": -3.030303011886452e-10}, {"content": "> As far as i can tell, defining a function on the class itself has the same effect\n\nDid you try running this code on an instance of `A`?", "id": "l1qr47i", "owner_tier": 0.5, "score": -3.030303011886452e-10}, {"content": "Think of u/staticmethod as a way to group related functions under a class, without actually needing an instance of the class. It's like a namespace, but with a more organized and Pythonic feel.", "id": "l1rflil", "owner_tier": 0.1, "score": -3.030303011886452e-10}], "link": "https://www.reddit.com/r/learnpython/comments/1cfchb4/what_is_staticmethod_for/", "question": {"content": "When searching for it on google, i get many explanations why it is different from classmethod. But noone explains what it does exactly. As far as i can tell, defining a function on the class itself has the same effect\n\n    class A:\n        @staticmethod\n        def f(x,y):\n            return x + y\n        \n        def g(x,y):\n            return x + y\n    \n    print(A.f(1,2))\n    print(A.g(1,2))", "id": "1cfchb4", "title": "what is @staticmethod for?", "traffic_rate": 153.13037037037037}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "reddit"}, {"answers": [], "link": "https://www.reddit.com/r/MailDevNetwork/comments/1d712cn/understanding_static_and_class_methods_in_python/", "question": {"content": "\n\n# Exploring Python's u/staticmethod and u/classmethod Decorators\n\nIn the realm of object-oriented programming (OOP) with\u00a0**Python**, two powerful decorators, u/staticmethod and u/classmethod, play pivotal roles in structuring code in a more logical and efficient manner. These decorators alter the way methods are called on a class, thereby influencing how the class interacts with its methods. Understanding the difference between these two can significantly impact how one designs and implements Python classes, especially when it comes to inheritance and data encapsulation. u/staticmethods are used to define methods in a class that do not need to access any class-specific or instance-specific data.\n\nu/classmethods, on the other hand, are closely tied to the class itself, allowing methods to access and modify class state that applies across all instances of the class. This distinction is crucial for creating robust and scalable Python applications. By leveraging these decorators appropriately, developers can ensure that their classes are not only well-organized but also more modular, making them easier to understand, maintain, and extend. Exploring the differences and applications of u/staticmethod and u/classmethod reveals the depth and flexibility of Python's approach to OOP, showcasing why it remains a popular choice among developers.\n\n|Command|Description|\n|:-|:-|\n|u/staticmethod|Defines a method that does not access instance or class-specific data.|\n|u/classmethod|Defines a method that receives the class as its first argument and can modify class state.|\n\n# Delving into Python Decorators: Static vs. Class Methods\n\nIn the intricate world of Python, the decorators u/staticmethod and u/classmethod are pivotal in differentiating how methods within a class can be accessed and utilized. Both serve unique purposes in the object-oriented paradigm, offering flexibility and functionality in class design. A u/staticmethod is defined to be a function that does not receive an implicit first argument, meaning it lacks access to the instance (self) or class (cls) it belongs to. This makes static methods behave more like plain functions, yet they are encapsulated within the class's namespace. Static methods are used when a particular functionality is related to a class but does not require the class or its instances to perform its task.\n\nContrastingly, u/classmethods play a crucial role by taking a class (cls) as their first argument, which allows them to access and modify class state that pertains to all instances of the class. This is particularly useful for factory methods, which instantiate objects using different parameters than those provided by the class constructor. Understanding when and how to use these decorators is essential for Python developers looking to implement design patterns efficiently or when managing a shared state among all instances of a class. The strategic use of these methods can lead to cleaner, more maintainable, and scalable code by emphasizing the separation of concerns and optimizing code reuse.\n\n# Example: Using u/staticmethod\n\nPython Programming\n\n    class MathOperations:\n        u/staticmethod\n        def add(x, y):\n            return x + y\n        @staticmethod\n        def multiply(x, y):\n            return x * y\n    \n\n# Example: Using @classmethod\n\nPython Programming\n\n    class ClassCounter:\n        count = 0\n        @classmethod\n        def increment(cls):\n            cls.count += 1\n            return cls.count\n    \n\n\n\n# Diving Deeper into @staticmethod and @classmethod\n\nIn Python, @staticmethod and @classmethod are two decorators that play a significant role in the design of object-oriented programs. A static method, defined with the @staticmethod decorator, is a function that belongs to a class but does not access the class or instance in any way. It's used for utility functions that perform a task in isolation, not affecting or requiring information from class or instance variables. This makes static methods behaviorally similar to regular functions, with the key difference being their association with a class, which can improve the code's organization and readability.\n\nOn the other hand, a class method, marked by the @classmethod decorator, takes a class as its first argument rather than an instance. This makes class methods capable of accessing and modifying class state that applies across all instances of the class. An example use case for @classmethods is factory methods, which are used to create instances of a class using different sets of parameters. By understanding and correctly applying these two types of methods, developers can write more concise and flexible code that leverages the principles of object-oriented programming more effectively.\n\n# Frequently Asked Questions on Static and Class Methods\n\n1. **Question:**\u00a0What is the main difference between @staticmethod and @classmethod?\n2. **Answer:**\u00a0@staticmethod does not access or modify class or instance data, making it similar to a regular function but within the scope of a class. @classmethod, however, takes a class as its first argument, allowing it to modify class state and access class variables.\n3. **Question:**\u00a0Can a @staticmethod modify class state?\n4. **Answer:**\u00a0No, a @staticmethod is designed to be independent of the class state and cannot modify class or instance variables.\n5. **Question:**\u00a0Why would you use a @classmethod?\n6. **Answer:**\u00a0@classmethods are useful for factory methods that require access to class variables to create an instance, or for methods that need to modify class state that applies to all instances.\n7. **Question:**\u00a0Can @staticmethod and @classmethod be used outside of a class?\n8. **Answer:**\u00a0No, both @staticmethod and @classmethod must be defined within a class. They are meant to organize functions that logically belong to a class, with different levels of association to class and instance data.\n9. **Question:**\u00a0Is it possible to call a @staticmethod from an instance?\n10. **Answer:**\u00a0Yes, @staticmethod can be called from an instance or the class itself, but it will not have access to the instance or class from which it is called.\n11. **Question:**\u00a0How do you access a class variable from a @classmethod?\n12. **Answer:**\u00a0You can access a class variable from a @classmethod by using the first argument of the method, commonly named 'cls', which refers to the class itself.\n13. **Question:**\u00a0Can a @classmethod call a @staticmethod?\n14. **Answer:**\u00a0Yes, a @classmethod can call a @staticmethod if it needs to perform a task that does not require access to class or instance data.\n15. **Question:**\u00a0Are these decorators exclusive to Python?\n16. **Answer:**\u00a0The concept of static and class methods exists in other object-oriented languages, but the use of decorators to define them is specific to Python.\n17. **Question:**\u00a0Can I convert a regular method to a @staticmethod or @classmethod?\n18. **Answer:**\u00a0Yes, you can convert a regular method to a @staticmethod or @classmethod by adding the corresponding decorator above its definition. However, you must ensure the method logic is compatible with the chosen method type.\n\n# Final Thoughts on Static and Class Methods\n\nUnderstanding the difference between @staticmethod and @classmethod in\u00a0**Python**\u00a0is crucial for any developer working within the object-oriented programming paradigm. These two decorators allow for a more nuanced and flexible approach to designing classes and managing their behavior. Static methods, with their ability to perform tasks without needing an instance or class reference, are perfect for utility functions that operate independently of class state. Class methods, by taking a class as their first argument, are indispensable for tasks that involve class-level data, such as factory methods for instance creation. Properly leveraging these methods can lead to cleaner, more efficient, and more maintainable code. As we continue to explore the depths of\u00a0**Python's**\u00a0features, it becomes evident that the language's design encourages thoughtful coding practices and a deeper understanding of OOP principles. This exploration not only enhances our immediate coding tasks but also enriches our overall programming acumen.\n\n  \n[https://www.tempmail.us.com/en/python/understanding-static-and-class-methods-in-python](https://www.tempmail.us.com/en/python/understanding-static-and-class-methods-in-python)  \n", "id": "1d712cn", "title": "Understanding Static and Class Methods in Python", "traffic_rate": 0.09900990099009901}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "reddit"}, {"answers": [{"content": "It's impossible to tell what is going on here. How can you have methods inside a class that take no parameters? Are they staticmethods - in which case here are the decorators? But if they need to store state, why aren't they instance methods? Why don't you keep the state on the instance like normal?\n\nAnd, probably most importantly of all, why would you ever have 30 or more methods in a class?\n\nSorry the above example was not very good without context, first time poster, and thank you for taking the time to reply.\n\nThe goal of the application is to emulate the menu structure of an existing device using a web app that mimics the look of the tool used to connect to the device (to be used for training).\n\nThis frontend displays the tool (html and js), as well opens a web socket to the server. Button presses are sent over the websocket, which get passed to device emulation.  The device sends a string back over the websocket which is then displayed by the front end.\n\nSome sample code below to hopefully show enough what I am trying to accomplish.\n\nThe device class may have 30 functions because that is how many menus exist in the device.\n\nIn the websocket route there is 3 tasks, one to get the input from svt (service tool) to send to device, send message from device to display on svt, and the device loop (device.run()).  keypresses and text to display are passed by queue between the device and webserver.\n\nWithin the device run function there is an output function, this will run the current submenu function to get the updated output to display.  Some of the menu functions need to keep track of some state specific to that menu between function calls.  Ideally I would like to encapsulate that within the function, and not have to add all the variables to the Class itself if possible.\n\nHopefully this is a better explanation of what I am trying to accomplish, and maybe there is a much better way to structure the app to accomplish the same thing.\n\n    # app.py (webserver - Quart)\n    from devices import Device\n    \n    @app.route(\"/\")\n    async def main():\r\n        secure_ws = True\r\n        if current_app.config.get(\"DEBUG\"):\r\n            secure_ws = False\r\n        return await render_template(\n                                     \"index.html\", \n                                      context={\"secure_ws\":secure_ws}\n                                     )\n    \n    async def svt_to_controller(controller: GCS):\r\n    while True:\r\n        data = await websocket.receive()\r\n        await controller.svt_input_q.put(data)\r\n\r\n\r\n    async def controller_to_svt(controller: GCS):\r\n        while True:\r\n\r\n            message = await controller.svt_message_q.get()\r\n            await websocket.send(json.dumps(message))\n    \n    @app.websocket(\"/ws\")\r\n    async def ws():\r\n        controller: Device = Device() #device being emulated\r\n        c_to_s = asyncio.create_task(controller_to_svt(controller))\r\n        s_to_c = asyncio.create_task(svt_to_controller(controller))\r\n        controller_task = asyncio.create_task(controller.run())\r\n        await asyncio.gather(c_to_s, s_to_c, controller_task)\n    \n    # device.py\n    \n    \n    async def run(self):\r\n        while True:\r\n            key = self._svt_input()\r\n            self._svt_output(key) # inside this function it will call \n                                  #  the function of the current menu if             \n                                  #  it is a leaf node\r\n            await asyncio.sleep(0.25)\n    \n    \n    #subsystem.py\n    \n    class SubSys:\r\n    def __init__(self) -> None:\r\n        self.menu: MenuNode = self._build_menu()\r\n\r\n    def _build_menu(self) -> MenuNode:\r\n        menu = build_tree_from_string(1, \"Subsytem\", menu_entries)\r\n        build_menu_screens(menu)\r\n\r\n        return menu\r\n\r\n    # Subsystem Functions there will be one of these functions\n        # for every leaf node in the menu tree structure\r\n\r\n    def monitor_car_monitor(self, key: str | None) -> str:\n            # Here is where i would like a static variable that keeps its\n            # value between function calls\r\n        return f'what to display\\n{}this part updates with keypresses\"\n\nSo the important information you missed from the original question is that this is the context of a web app. \n\nNormally, this would mean that the answer is unequivocally \"you cannot do that\", because the whole model of web interactions means that nothing is shared between requests - you would need to store any data in the session or the database.\n\nHowever Quart appears to be async and uses websockets, so presumably you have a persistent connection. Unfortunately I don't know anything at all about how it works. You're probably still better off using the session.\n\nIMHO the web app part is not that important to the question. The websocket is a persistent connection and nothing is needed to exist between requests.  The main question was is if a static variable could be assigned within a class method so that its value persisted between function calls (as the function is continously called while in that current menu).\n\nMany comments eluded to using class variables/attributes, but I assumed I would have to assign them in the class declaration, and the variables only needed to exist while in the specific menu, and needed resetting on entry.  So the solution I went with was the following.\n\n&#x200B;\n\n    class Device:\n        def submenu1_function(self, key: str | None) -> str:\n        \n            def _exit():\n                \"\"\"\n                    Have to remove static variables on exit of \n                    submenu so they get reintialized when the menu\n                    is re entered again\n                \"\"\"\n                if hasattr(self, \"var1\"):\n                    delattr(self, \"var1\")\n                if hasattr(self, \"var2\"):\n                    delattr(self, \"var2\")\n                if hasattr(self, \"exit\"):\n                    delattr(self, \"exit\")\n        \n            # setup static variables needed for the menu\n            if not hasattr(self, \"var1\"):\n                setattr(self, \"var1\", deque([\"C\", \"U\", \"D\", \"E\"]))\n                setattr(self, \"var2\", deque([\" \", \" \"], maxlen=2))\n                setattr(self, \"exit\", _exit)\n        \n                 # handle keys and update variables etc\n\nIn the part of the code that navigates the menus, when the submenu (ie leaf node) is to be exited, the exit function is called and the attributes removed from the class.\n\nEvery submenu ie class method that needs some persistent state follows the same pattern, sets atrributes then removes them on exit.  I don't know if this is an unusual pattern or the best way to do this, but it seems to work.\n\nThanks to all that made comments.", "id": "irn1kx9", "owner_tier": 0.5, "score": 0.9999999980000001}, {"content": "Any variable you name inside the class like\n\n```\nClass Device:\n   my_var = 0\n```\n\nis considered static and can be accessed by\nDevice.my_var\n\nhttps://youtu.be/RdCydcIrzi4", "id": "irn3sg6", "owner_tier": 0.1, "score": 0.199999998}, {"content": "Perhaps you need the ```__init__``` method. \n\nWhich looks like this\n\n    class Foo:\n        def __init__(self):\n            self.bar = 5\n\n    # Make a class instance \n    baz = Foo()\n    # the variable or better, the attribute can be accessed like this\n    baz.bar\n    >> 5", "id": "irnij2i", "owner_tier": 0.7, "score": -1.999999987845058e-09}], "link": "https://www.reddit.com/r/learnpython/comments/xznftm/how_to_have_a_static_variable_in_an_class_method/", "question": {"content": "Is there a way to have static variables inside a class method?\n\n\n    Class Device:\n\n        def menu1():\n            static_var = 0\n\n        def menu2():\n            ...\n\n\n        def menu30():\n            other_static_var = 1\n\n\n\nSome functions within the class need to keep track of some state specific to that function between function calls.  How can this be achieved?", "id": "xznftm", "title": "How to have a static variable in an Class method", "traffic_rate": 153.13037037037037}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "reddit"}, {"answers": [{"content": "I'm literally on that subject now while learning. Like this second \ud83d\ude06 cheers for clearing that up", "id": "jyeuvm4", "owner_tier": 0.5, "score": 0.9999999975}], "link": "https://www.reddit.com/r/pythontips/comments/165m8w1/understand_the_difference_between_instance_class/", "question": {"content": "1. Instance methods: These methods are associated with instances of a class and can access and modify the data within an instance.\r  \n\n2. Class methods: These methods are associated with a class rather than instances.  They are used to create or modify class-level properties or behaviors.\r  \n\n3. Static methods: These are utility methods that do not have access to any object-level or class-level data.  \n.........[instance, class & static methods](https://www.pynerds.com/python-instance-class-and-static-methods/)", "id": "165m8w1", "title": "Understand the difference between Instance, Class and Static methods in Python classes", "traffic_rate": 41.063069139966274}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "reddit"}, {"answers": [{"content": "#Please ensure that:\n\n+ Your *code* is *properly formatted* as *code block* - see the *sidebar* (About on mobile) for instructions\n+ You include *any and all error messages* in full - best also formatted as code block\n+ You ask *clear questions*\n+ You *demonstrate effort* in solving your question/problem - plain posting your assignments is forbidden (and such posts will be removed) as is asking for or giving solutions.\n    \n\n**If any of the above points is not met, your post can and will be removed without further warning.**\n\nCode is to be formatted as **code block** (*old reddit/markdown editor:* empty line before the code, each code line indented by 4 spaces, *new reddit:* https://imgur.com/a/fgoFFis) \nor linked via an external *code hoster*, like *pastebin.com*, *github gist*, *github*, *bitbucket*, *gitlab*, etc. \n\nPlease, **do not use** triple backticks (\\`\\`\\`) as they will only render properly on *new reddit*, not on *old reddit*.  \n\nCode blocks look like this:\n\n    public class HelloWorld {\n\n        public static void main(String[] args) {\n            System.out.println(\"Hello World!\");\n        }\n    }\n\nYou do not need to repost unless your post has been removed by a moderator. Just use the *edit function* of reddit to make sure your post complies with the above. \n\nIf your post has remained in violation of these rules for a prolonged period of time (at least an hour), a moderator may remove it at their discretion. In this case, they will comment with an explanation on why it has been removed, and you will be required to resubmit the entire post following the proper procedures.\n\n#To potential helpers\n\nPlease, **do not help** if any of the above points are not met, rather *report* the post. We are trying to improve the quality of posts here. \nIn helping people who can't be bothered to comply with the above points, you are doing the community a disservice. \n\n\n*I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/learnjava) if you have any questions or concerns.*", "id": "irlln6z", "owner_tier": 0.1, "score": -7.142857099446636e-10}, {"content": ">  I really want to know which situations I could use static method in a class.\n\n+ *Utility methods* - just take a look at the methods in [java.lang.Math](https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/Math.java) - they are all `static` since it doesn't make sense to have to create a new instance\n+ *Generator methods* - methods that generate unique IDs, methods that generate new objects based on certain rules (there are a couple Design Patterns that make use of that concept)", "id": "irm08eb", "owner_tier": 0.9, "score": 0.9999999992857143}, {"content": "You make a method static when it doesn\u2019t need any instance of an object and can possibly be useful outside the class. Don\u2019t force it by making it take parameters instead of using the instance variables just to make it static if it doesn\u2019t make sense outside of that class. \n\nI can\u2019t think of anything with a coffee machine. It just comes naturally. If you write a method the way you originally wanted and notice that it does not use any instance variables then it can be static.  If you think this method may be useful to other classes without needing an instance of your class then make it static.", "id": "irlq18k", "owner_tier": 0.7, "score": 0.642857142142857}, {"content": "You can have a coffeMachine class that has a typeOfCoffe variable and a makeCoffe method with no parameter. Upon construction of an object(or even with a setter later) you can choose what kind of coffee put in the machine. THIS IS THE NON STATIC WAY\nOR\nyou can have a coffeeMachine class with a static method that takes the type of coffee as a parameter and make you coffee direct, you DON'T  need to create an object to make coffe:\nCoffeMachine.makeCoffe(java) will brew you exactly what you need!\n\n(Think of the Math class)  in the end, static method are some sort of standalone function, they can depend ONLY on static and local variables....\nStatic variables are the same for every object of the same class, so if you have a class Person with an age variable and you erroneously put it as static, every person you create will have the same age (that will be the last you put, it will change every time you change it for one of the persons but it would change for everyone)", "id": "irlpuxd", "owner_tier": 0.3, "score": 0.2142857135714286}, {"content": "I'm making a to do list app. I have a class that's for connecting to my dB with static methods for the connection, writing to dB, etc.. \n\nI like doing this because it reduces the amount of code in my \"main\" class. Idk if this is \"right\" per se.", "id": "irmnyjv", "owner_tier": 0.3, "score": 0.07142857071428572}, {"content": "\u201cStatic\u201d just means you can use it without creating an instance of the object. (I.e you don\u2019t do `new Object()`). \n\nIn other languages like Python you can create functions that you can import to other places and use them. In Java everything needs to be a class so if you want that same functionality of \u201chere\u2019s a function that can help do things but isn\u2019t tied to an instance\u201d you make a static method. \n\nIn Python there are also static methods for classes and the reason to use them is also an organizational thing since they\u2019ll be in a different namespace than the global namespace.", "id": "irn6s2f", "owner_tier": 0.5, "score": 0.07142857071428572}, {"content": "Generally utility methods and methods that return the same thing. For example adding two numbers. Instead of instantiating an object and calling it I can just do Math.add(whatever) however, using spring boot frameworks you generally shouldn\u2019t use static methods.", "id": "irootrc", "owner_tier": 0.1, "score": 0.07142857071428572}, {"content": "Comment if someone posts the right answer.", "id": "irm3oea", "owner_tier": 0.5, "score": -7.142857099446636e-10}, {"content": "Thanks for answering my post, actually I'm newbie learning Java and it's really help me!", "id": "irqipvr", "owner_tier": 0.1, "score": -7.142857099446636e-10}, {"content": "You can create a method \"isLeap\" , which receives a year as a parameter. You don't need to instantiate an object to call this method.", "id": "irmkdom", "owner_tier": 0.5, "score": -7.142857099446636e-10}], "link": "https://www.reddit.com/r/learnjava/comments/xzczrl/which_situations_will_we_use_static_methods_in_a/", "question": {"content": " Hello, I begin to learn Java and have a question relating to static methods in java. I really want to know which situations I could use static method in a class. I've looked for some sources and they said that it's better to use static method to write \"pure class\" (that doesn't need to declare an object\\_ For instance, if I want to write code for building a Coffee Machine, including Coffee class (type of coffee), Coffee-Machine class (how to make coffee), and Main method, is it possible to write some static methods for Coffee-Machine class (that's good for OOP design)? Many thanks.", "id": "xzczrl", "title": "Which situations will we use static methods in a class?", "traffic_rate": 31.737494916632777}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "reddit"}, {"answers": [{"content": "I have decided to overwrite my comments.\n\nThank you! your message remind me that class method is just for creating class :) I should use instance method.\n\nI have decided to overwrite my comments.\n\nThank you! I think your comment teach me a lot, class method can be treated as 'factories', but factories not only creating instances, but also operate the class attribute, etc. I think I need time to digest it. Thank you for your patience to telling me this.\n\nI have decided to overwrite my comments.\n\n> Edit: completely off the subject -- are you creating this vector class because you want to practice OO, or because you need to use a vector class in your code? If it's the latter, please don't reinvent the wheel, and check out the numpy library. It has an array type which is very commonly used in mathematical and scientific code. It already has functionality for calculating distances, and a variety of other useful behaviour. Don't write low-level objects from scratch if a good library already exists -- spend that time writing the higher-level code you actually want to write!\n\nThank you, especially for your spending such a long time replying my questions, your examples really showed a good tutorial of using \n@classmethod. I know a little of numpy, but I heared it has array type which is more powerful than the default array in python. Anyhow, I just write vector class as an example of using classmethod, as you said before, I have fundamentally misunderstand the classmethod :) My code is about tiled map, in fact is about [hexagonal grids]( https://www.redblobgames.com/grids/hexagons/), I want to calcute the distance between grids, but in fact, it would not need classmethod. Anyhow, I still use it. because hex grid have many coordinate systems, as you said,  python did not have multiple \"constructors\",  So I can use @classmethod to parsing different coordinate. Again I am quite moved that you showed a good tutorial of using @classmethod, maybe one day I would translate it into my native language and put it on web :)\n\nI have decided to overwrite my comments.", "id": "dsih3o5", "owner_tier": 0.5, "score": 0.9999999995}], "link": "https://www.reddit.com/r/learnpython/comments/7pmmks/how_to_use_classmethod_and_staticmethod/", "question": {"content": "For example, I creat a vector class, and I want to calculate the distance between vector 1 and vector 2, it seemed that I should use @classmethod, well, I did not success, and I can use @staticmethod, but I am not sure it is correct. here is my code\n\n\n    class Vector(object):\n        def __init__(self,x,y):\n            self.x = x\n            self.y = y\n\n        @classmethod\n        def distance_1(self,cls):\n            return (self.x-cls.x)**2 + (self.y-cls.y)**2\n\n        @staticmethod\n        def distance_2(self,cls):\n            return (self.x-cls.x)**2 + (self.y-cls.y)**2\n\n    if __name__ == '__main__':\n        a = Vector(1,1)\n        print(a.distance_1(Vector(2,2)))\n", "id": "7pmmks", "title": "how to use @classmethod and @staticmethod ?", "traffic_rate": 153.13037037037037}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "reddit"}, {"answers": [{"content": "I have decided to overwrite my comments.", "id": "d32o0q2", "owner_tier": 0.5, "score": 0.9999999980000001}, {"content": "If you never have to use `self` in the function, then you can remove it from the function parameters and decorate the function with `@staticmethod`. It's useful when you want a function to be associated with a class even though it doesn't affect any particular instance of the class. ", "id": "d32qw66", "owner_tier": 0.5, "score": 0.9999999980000001}, {"content": "> ``return int(s) if s else None``\n\nI strongly suggest not mixing return types like this. The Zen tells us not to let errors pass silently. Let your ``int(s)`` loudly complain if it can't create an integer. Frankly, I'm not sure it should be a function at all, since the expression ``int(s.strip())`` is quite concise and clear.\n\n> ``sys.stdout.write``\n\nAre you familiar with the ``logging`` module? It sounds like you should be using ``logging.debug`` or ``logging.info`` for these tasks.\n\n> When to use static methods?\n\nNow on to your question... How big is your module? If it's fairly small, you don't need static methods. Why not leave everything as module-level functions and see how you like it. As Steve Yegge might say, not everything needs to be chaperoned by a class. If you feel that's disorganized, give them an indent and an @staticmethod decorator.\n\nIf a function is not meant for public use, you can name it with a leading underscore (ex: ``_internal``) to indicate that others should beware of using that function. Don't worry about doing this unless you feel the function is unsafe for public use.\n\nJust because a particular class is the only one that's calling your helper functions today doesn't mean it'll be the only one calling those functions tomorrow.\n\nThanks for your comments.   Yes I think you are right on the int function - I was a quick hack and could just be left as one line. \nYes `sys.stdout.write` was a temporary fix whilst getting the logging module up and running (having fun with that but that's another story)  It's not that big a module but how does that affect whether it should be a staticmethod or not.  Perhaps you are right and that it should be a seperate helper function outside the class, as there is a possibility (albeit small that it will be used by another class at one point).", "id": "d32t0ei", "owner_tier": 0.5, "score": 0.9999999980000001}, {"content": "Without knowing much more if the context, I'd agree with you, those look like they should be instance methods. Careful though, there might be some tricky corner of the code somewhere that needs these to be static for some crazy reason, however anything that tricky might be too magic for its own good. ", "id": "d32tbhv", "owner_tier": 0.5, "score": -1.999999987845058e-09}, {"content": "I would say @classmethod is generally more useful than @staticmethod ... generally go with @classmethod unless you have a really good reason not to.\n\nThe advantage of @classmethod is that it generally works better with inheritance and allows you to access static class variables more safely because you get a reference to the class itself as a parameter.\n\n    #!/usr/bin/env python\n    \n    class C:\n    \n        @classmethod\n        def create(cls, name):\n            result = cls()\n            result.name = name\n            return result\n        \n    class D(C):\n        pass\n    \n    \n    x = D.create('test')\n    \n    print(x.name)\n    print(type(x))\n    \n    \n    \u250c\u2500[johncc]\u2500\u2500[3L8H95J]:~$\n    \u2514\u2500\u2500>>python test.py\n    test\n    <class '__main__.D'>\n", "id": "d33u0l6", "owner_tier": 0.1, "score": -1.999999987845058e-09}], "link": "https://www.reddit.com/r/learnpython/comments/4j0njs/when_to_use_static_methods/", "question": {"content": "I'm writing a class which has a couple of methods that the ide (pycharm) has flagged up could be static methods.   I haven't really used these before.\n\n(To confirm is a static method any method that doesn't use any of the objects attributes or methods?)\n\nI'm not sure when a method should be a static method or a seperate function outside the class (or perhaps something else eg normal instance methods).\n\nAll of the (possible) static methods are used by other methods within the class.   \nOne of them is used by a method (which calls several of the object methods in a particular sequence) and is used to convert output from one method to another. This feels like it it's definitely tied to the object, but not sure if it should be a static method or an instance method (it will only ever be used on an instance not on the class itself).\n\nOther potential static methods are more like helper functions that I don't need elsewhere than that object but are used by some of the object methods.\neg.\n\n     @staticmethod\n    def log_database_create(instance):\n        sys.stdout.write('New {} created \\n'.format(instance.__class__.__name__))\n\n    @staticmethod\n    def log_database_update(instance):\n        sys.stdout.write('{}: updated \\n'.format(instance.__class__.__name__))\n\n    @staticmethod\n        def make_int(string):\n            s = string.strip()\n            return int(s) if s else None", "id": "4j0njs", "title": "When to use static methods?", "traffic_rate": 153.17203703703703}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "reddit"}, {"answers": [{"content": "No, this isn't quite right.\n\nThe thing you've missed is that classes themselves are objects, that is to say they are instances of the built-in class named `type` (usually). So they can keep their own data, which persists in the class itself and which can be referenced from that class or from any instance.\n\nActually your `barr_ft` classmethod would give an error, because you haven't set a value for `cls.barr` to be added to, but if you did this:\n\n    class Foo:\n      barr = 0\n\n      @classmethod\n      def barr_ft(cls):\n        cls.barr += 42\n\nthen it would work, and `Foo.barr` would give you access to that data - which is not thrown away, it is incremented every time you call that classmethod. And note that this `barr` is *separate* from the one associated with the instance. From inside an instance method, you could do `self.__class__.barr` if you wanted to access the class version - although if the instance didn't have its own attribute, then just doing `self.barr` would fall through to the class one.\n\nBut to be honest, this is not really the main use of a classmethod. You'd mostly use those as what is known as factory methods - that is, methods that create instances of the class. Often this is useful if the class has a lot of complicated parameters, or you wanted to create it using data from an instance of another class. But a simple example using your class:\n\n    class Foo:\n      @classmethod\n      def with_answer(cls):\n        return cls(42)\n\nNow if you do `Foo.with_answer()` you will get an instance of Foo pre-initialised with the value 42.\n\nAh, this is helpful, thank you!", "id": "k7x9m2s", "owner_tier": 0.5, "score": -9.99999993922529e-09}, {"content": "Let's first look at a example, and explain what's happening afterwards:\n\n    class Foo:\n        def foo(self):\n            print(f\"foo() called with {self=}\")\n\n        @classmethod\n        def foo_cls(cls):\n            print(f\"foo_cls() called with {cls=}\")\n\n    class Bar(Foo):\n        def bar(self):\n            print(f\"bar() called with {self=}\")\n\n        @classmethod\n        def bar_cls(cls):\n            print(f\"bar_cls() called with {cls=}\")\n\n    f = Foo()\n    b = Bar()\n\n    f.foo() # foo() called with self=<__main__.Foo object at ...>\n    b.foo() # foo() called with self=<__main__.Bar object at ...>\n\n    f.bar() # AttributeError: 'Foo' object has no attribute 'bar'\n    b.bar() # bar() called with self=<__main__.Bar object at ...>\n\n    f.foo_cls() # foo_cls() called with cls=<class '__main__.Foo'>\n    b.foo_cls() # foo_cls() called with cls=<class '__main__.Bar'>\n\n    f.bar_cls() # AttributeError: 'Foo' object has no attribute 'bar_cls'\n    b.bar_cls() # bar_cls() called with cls=<class '__main__.Bar'>\n\n\nNote that it doesn't matter if we name the parameter `self`, `cls` or `rumpelstiltskin`, it's just convention to name it `self` for methods and `cls` for class methods, we will see why later.\n\nBefore we see what classmethod does, it's important to understand what happens in a \"normal\" method call.\n\nWhat's happening is this: in Python, everything is an object, and each object has a dictionary associated with it that stores it's attributes or members if you will. \n\nWe can actually see those:\n\n    print(Foo.__dict__)\n    {'__module__': '__main__', 'foo': <function Foo.foo at ...>, 'foo_cls': <classmethod(<function Foo.foo_cls at ...>)>, '__dict__': <attribute '__dict__' of 'Foo' objects>, '__weakref__': <attribute '__weakref__' of 'Foo' objects>, '__doc__': None}\n\nIgnore the stuff with underscores for now, you will see that the *class* `Foo` has two attributes `foo` and `foo_cls`, which are the functions we just defined. Other member \"values\" like strings or integers would be stored in the exact same way. In fact, you can think of `def` as being syntactic sugar for something like this:\n\n    def foo(x, y, z):\n        <some code>\n\n    # basically the same as:\n    foo = multiline_lambda x, y, z:\n        <some code>\n\nnote that `multiline_lambda` doesn't exist in Python, so using `def` is the only way to define multi line functions.\n\nSo, what happens now when we call `f.foo()` or `b.foo()`? For `f.foo()` it's easy: \n\n1. Python looks in the dictionary of `f`, which is an instance of the class `Foo`: `f.__dict__` is empty though (you can confirm by typing `print(f.__dict__)`.\n2. Instead of giving up, Python now looks at the class that `f` is an instance of, in our case `Foo`. `Foo.__dict__` does contain an entry named `foo`, so `f.foo` is resolved to the `<function Foo.foo at ...>` object\n3. Now the method needs to get executed, since we wrote `()` after that. If `f.foo` were a normal function (or a staticmethod), that's all that happens, but since it's a method, the instance is passed as the first parameter, so what actually gets executed is `Foo.foo(f)`\n\nThat seems overly complicated. Why not just write `Foo.foo(f)` in the first place? Here's where inheritance comes into play: `b.foo()` is executed as follows:\n\n1. Python looks in `b.__dict__` for `foo`, no luck. Same for `Bar.__dict__`, so then it looks into `Bar`s parent class, `Foo` and finds `foo` there\n2. Now `Foo.foo(b)` is executed. Notice that we're executing `Foo.foo` despite having an instance of `Bar`. And in `foo`, the `self` variable is actually an instance of `Bar`, but that's ok, because `Bar` should have everything `Foo` has, so everything `foo` does to the object will work, as `Bar` is a superset of `Foo`\n\nWhen we call `f.bar`, the same thing happens, but in this case, `Foo` does not have a `bar` attribute, so `f.bar()` fails, because `f` is an instance of `Foo`. `b.bar` works though, and `Bar.bar(b)` will get executed.\n\nAnd now we finally come to `foo_cls` and `bar_cls`: everything happens as described above, except that instead of being called with the instance, the method will be called with the class object: so instead of `Foo.foo(f)`, the calls will be `Foo.foo_cls(Foo)`, `Foo.foo_cls(Bar)` and `Bar.bar_cls(Bar)`.\n\nSo why is that useful? Often it's not, an most other OOP languages don't have this. It's mostly useful if you write \"utility constructor\" methods, let's see the \"classic\" way first:\n\n    class Foo:\n        def __init__(self, i: int):\n            self.i = i\n\n        @staticmethod\n        def from_string(s: str):\n            return Foo(int(s))\n\nThis allows us to write `f = Foo.from_string(\"42\")`. Notice that `from_string` is a static method and therefore doesn't require an instance, so we can call `Foo.from_string` directly.\n\nThe example we wrote works perfectly, and that's what you do in Java and C++ and stuff. However, let's suppose we now inherit from it:\n\n    class Bar(Foo):\n        def hi(self):\n            print(f\"Hi, I'm Bar and my value i is {self.i}\")\n\nNow, we can write:\n\n    b = Bar(42)\n    b.hi()\n\nand it will work as it should. However, we cannot use the \"handy\" constructor anymore:\n\n    b = Bar.from_string(\"42\")\n    b.hi() # 'Foo' object has no attribute 'hi'\n\nNotice that the call `Bar.from_string` \"works\", but it gives us back an instance of `Foo`, because after all, `from_string` only exists in `Foo` and it is written to return an instance of `Foo`. \n\nSo now we would have to reimplement `from_string` in Bar with the same code, just replacing `Foo` with `Bar`. That works, but feels kinda redundant.\n\nThis is where classmethods come in! Let's rewrite Foo as follows:\n\n    class Foo:\n        def __init__(self, i: int):\n            self.i = i\n\n        @classmethod\n        def from_string(cls, s: str):\n            return cls(int(s))\n\nIf `Foo` is written in that way, our code from above works: `b = Bar.from_string(\"42\")` will get executed as `b = Foo.from_string(Bar, \"42\")`, which in turn will execute `return Bar(int(s))`, which is what we want.\n\nAs you can see, class methods are used rarely, but when they are, they're pretty handy. Note that the example above isn't the only way to use classmethods, they also come in handy if you want to access and manipulate \"class wide\" state that is shared between all instances of a class.\n\nThank you - I'm going to spend some time studying this :)", "id": "k7xhf5f", "owner_tier": 0.7, "score": 0.9999999900000001}], "link": "https://www.reddit.com/r/learnpython/comments/17oblv2/class_method_vs_instance_method/", "question": {"content": "In my Python travels, I have encountered the @classmethod decorator. There are a few stack overflow posts with lots of votes which explain the differences between instance and class in terms of using `self` or `cls`. I'm ignoring static methods for the purpose of this discussion.\n\nI've read them. All of that is a bit abstract for me. Maybe I get it?\n\ntl;dr ... I'm looking for a reality check ... \n\n\nI have developed an understanding as follows:\n\n**(1)**\n\nWhen the compiler does its thing with a class I write, I assume Python needs to store its representation (the template for data and associated methods) somewhere. If we use \"cls\" to refer to this, it's really a pointer to something like a struct for the \"original\" template.\n\nWhen a class is instantiated as an object, Python allocates some memory to hold the relevant data, and I am assuming that the methods are not replicated, but are just pointers to the methods found in the template. So, \"self\" is a pointer to this copy of the data struct.\n\n\n**(2)**\n\nA made-up example:\n\n    class Foo:\n\n        def __init__ (self, bar):\n            self.barr = bar\n\n        def barr_incr (self):\n            self.barr += 1\n            return self.barr\n\n        @classmethod\n        def barr_ft (cls):\n            return cls.barr + 42\n\nAnd let's say I want to use this class:\n\n    fa = Foo (3)\n    fb = Foo (30)\n\n    print (fa.barr_incr()) # should produce 4\n    print (fb.barr_incr()) # should produce 31\n\nAnd the individual objects maintain their state, so that 4 and 31 lasts as long as the objects do, or until something comes along to change them (independently).\n\nIf I want to use the functionality offered in barr_ft(), I would do something like ... \n\n    print (Foo.barr_ft(1000))\n\n... and expect to see `1042`, but no one would \"keep\" that value anywhere unless I assigned the result to something explicitly.\n\n\n**(3)**\n\nPerhaps a class method is useful when I have some kind of complicated collection of data, with intrinsic rules or interrelationships that might be subject to corruption if I just let any old assignment or function operate on it. Encapsulation, in other words. \n\nIn such situations, I've typically just created instantiations of an object. I think I can appreciate a need for just having the template without lingering objects, but it's still kinda slippery. Looking for some examples of use cases so I can stash this concept for when I might need it (or understand code when I come across it).\n\n\n**Can I get some reality check, please?** \n\nAm I way off? I'm expecting this post to reveal at least some misconception, which I hope can be corrected in the comments!\n\nAbstractions are OK, but I'm more confident of my understanding if I have some idea of what's going on at a lower level - I'm assuming it's something to do with how my brain works.\n--\nminor edits for clarity and spotted some errors in the original", "id": "17oblv2", "title": "class method vs instance method", "traffic_rate": 153.17222222222222}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "reddit"}, {"answers": [], "link": "https://www.codeproject.com/Questions/300685/Static-Classes-and-dbContext", "question": {"content": "\r\n\t\t\t    I'm developing an MVC3 application.\n\r\nBeing that during a typical request I must access the CurrentUser data multiple times, I thought it would be handy to define a Static Class as below\n\nC#\n\r\npublic static class CurrentSession\r\n{\r\n  //get CurrentUser data from current context. If null, load data and set it\r\n  public static User CurrentUser{\r\n    var curUser = HttpContext.Current.Items[\"CurrentUser\"];\r\n    if (HttpContext.Current.Request.IsAuthenticated && curUser==null)\r\n     {\r\n       dbContext db = new dbContext();\r\n       curUser = dbContext.find(HttpContext.Current.User.Identity.Name);\r\n       HttpContext.Current.Irems[\"CurrentUser\"] = curUser;       \r\n     }\r\n\r\n     return (User)curUser;\r\n}\r\n}\n\r\nThe above should check if the user is authenticated, get the UserData and put it on the current context items. If I'll need to access userdata again, it will already be in my context items, with no need to pull from db again.\n\r\nIs this a bad idea? From what I understand (in theory) this way I can have an object shared across all my different functions, limited to current context (so on a per user request basis), loaded only once and only if needed.\n\r\nIt works (or at least it seems to work), I would like to know if this is a \"good\" solution or not.\n\r\nBut, this way I have a problem in an hypotetic method like this:\n\nC#\n\r\npublic ActionResult create(model newObject){\r\n  dbContext db = new dbContext();\r\n  newObject.childcollection.add(CurrentSession.User.childEntity);\r\n  db.add(newObject);// exception\r\n  db.SaveChanges();\r\n}\n\r\nthe above code throws an exception \"An entity object cannot be referenced by multiple instances of IEntityChangeTracker\", because the User.childEntity \"references\" a different dbContext, the one defined inside the get{} merthod of the static property..\n\r\nin fact, I tried the following to be shure, and the exception is exactly the same:\n\nC#\n\r\ndbContext db = new dbContext();\r\ndbContext db2 = new dbContext();\r\nnewObject.childcollection.add(db2.childEntity.find(id));\r\ndb.model.add(newObject);// exception\r\ndb.SaveChanges();\r\n\n\r\nTo \"solve\" this, I can do it this way:\n\nC#\n\r\npublic ActionResult create(model newObject){\r\n  dbContext db = new dbContext();\r\n  newObject.childcollection.add(db.childEntity.find(CurrentSession.User.childEntity.id));\r\n  db.add(newObject);// exception\r\n  db.SaveChanges();\r\n}\n\n\r\nBut I'll somewhat reduce the advantage of pulling out data from db only once.. IF I understand correctly how things works.\n\r\nIn any case, it is also to be considered how effectively faster is to reference an object from context.current.items or pull it from db.\n\r\nAny suggestions to have a \"global\" object to be referenced different functions?\r\nOr is it just better to get everytime the User object inside any function that needs it? This way, I suppose that it is (remotely) possible that the User actually changes during the course of the request..\n\r\nSorry for the quite long question an thank you in advance,\n\r\nAlberto\r\n\t\t    ", "id": "300685", "title": "Static Classes and dbContext", "traffic_rate": 0}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "codeproject", "tags": ["C#", "ASP.NET", "MVC3"]}, {"answers": [{"content": "\r\n    I don't see any problem here, just add a reference to the project that contains the class with the static method and call your method like this:\nC#\n\r\nMyClass.MyStaticMethod()\n", "id": "2_225849_1", "owner_tier": 0.1, "score": 2.0}], "link": "https://www.codeproject.com/Questions/225847/using-static-methods-of-class-in-a-different-proje", "question": {"content": "\r\n\t\t\t    Hi friends,\r\nI have a C# application written in Visual Studio 2008 and it's solution consist of several projects. I have written a static method in a class as part of one of the projects and will want to access this static method in another project(the project containing the startup form). Please any form of help from anyone is welcome. Thank you.\r\n\t\t    ", "id": "225847", "title": "using static methods of class in a different project", "traffic_rate": 0}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "codeproject", "tags": ["C#"]}, {"answers": [{"content": "\r\n    Static data is just that: static. There is one copy for the whole application (in a similar way to Global Variables in other languages).\n\r\nIf your static data contains user specific information, it will fail because it can't contain different information depending on which user is \"active\" within the app.\n\r\nIgnore computers for a moment, and let's talk about cars.\r\nAll cars have a colour - but which colour it is depends on which specific car you are talking about. My car is black; your car is red; this car is green; that car is blue. Colour is an instance property of the Car class because you need to have a specific instance of a Car in order to ask the question \"what colour is it?\" - you can't say \"what colour is a car?\" because it's meaningless without saying which car you mean.\r\nBut cars have static properties as well: you can ask \"how many wheels has a car?\" because all cars have four wheels. (If it had two, it would be a motorbike, not a car!)\n\r\nAs soon as you start proliferating static data, the chances are your design is wrong: a well designed app will often have little or no static data at all - perhaps a connection string to a DB, maybe a URL to a website. But if you start storing information about a specific user in static data, then that is almost certainly wrong and will cause you problems.\n\r\nI'd go back to your design, and work out why you think this data has to be static - and if that reason is \"so this static method can access it\" then you need to look at \"why is this method static at all?\" rather than \"how can I get instance data into a static method?\".\nstatic methods should only ever work with data that is not instance related, or that can be disassociated from any specific instance and passed to the method via parameters.\r\n", "id": "2_5255326_1", "owner_tier": 0.9, "score": 3.0}], "link": "https://www.codeproject.com/Questions/5255324/How-do-I-handle-static-data-of-each-user-without-i", "question": {"content": "\r\n\t\t\t    Hi,\r\nI have an web api application. I've created a static class with some static properties in that application which is storing few cookies value. Now my question is suppose if 4 users are using concurrently this api (by using 4 tabs in same browser) then will user1 data can get replaced by user 2/3/4?\r\nIf yes then what is the preferred way to store those data. I'm using Autofac DI.\r\nThank\n\nWhat I have tried:\n\r\nI tried to create global variable and creating object of that class each time\r\n\t\t    ", "id": "5255324", "title": "How do I handle static data of each user without impacting others?", "traffic_rate": 0}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "codeproject", "tags": [".NET", "C#3.5", "C#6.0"]}, {"answers": [{"content": "\r\n    Statics tend to be inflexible. You can't interface them, you can't override them, you can't control the timing of their construction, you can't use them well in generics. You can't really version them.\n\r\nThere are certainly uses of statics: constant values work great. You can make database connection or open any file resource in static block\n\r\nSo in general, not bad practice but use them wisely.\n\r\n-KR\r\n", "id": "2_1030923_1", "owner_tier": 0.3, "score": 1.5}, {"content": "\r\n    i agree with my previous speaker - \"use them wisely\".\n\r\nLets have a look the other way round: when is it appropriate to create a class?\r\nplease understand \"class\" as \"construction-plan of objects\". Understand \"static class\" as no-class or the opposite of class.\r\nAnd understand object as a unit of Data togehter with its own functionality, to manipulate it. Other words: An object has a state, and can change it. Another basic concept: you can have several different objects of the same class.\n\r\nSo that is when you need a class: you want several objects of that class, and the object shall have different states.\n\r\nTo answer the question: if you have functionality, but no data, which is  to store in several stated objects, then you don't need a class.\n\r\nAs sample for stated objects take FileInfo-class: each FileInfo contains its own data (information about a file), and its own functionality to manipulate it. And because there are many files on disc, it is required, that one can create many FileoInfos - the class-concept is required.\n\r\nAs sample for functionality, not associated to own data take the System.Math-static-class: It has no state: creating several Math-objects would make no sense at all. In difference to FileInfo each Math-Function gets the data it needs by arguments and returns a result - no state-data is to store.\n\r\nso i see your static-usage as propably completely right: A static class is to store utility-functions. Of course you can still do something wrong, but in general \"utility\" are a concern which is meaningful placed within a static class.\n\r\nThe other way round, namely create an \"utility-object\" each time, whenever you need a function and destroy it afterwards would be - i call it: \"brain-f***\".\r\nAn object should have a state, and should be designed to change it several time. That is what the class-concept was invented for.\n\r\nIt is a mis-design, to apply the class-concepts to concerns, which do not need that.\r\n", "id": "2_1030934_1", "owner_tier": 0.3, "score": 1.89}], "link": "https://www.codeproject.com/Questions/1030918/static-classes-considered-bad-practice", "question": {"content": "\r\n\t\t\t    i read an   article \"Static classes considered bad practice\" couple day ago. most of time i use static classed for utility function. so static class  are consider bad  code Is this correct, and if so, for what reasons?\r\n\t\t    ", "id": "1030918", "title": "static classes considered bad practice?", "traffic_rate": 0}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "codeproject", "tags": ["C#"]}, {"answers": [{"content": "\r\n    Both static methods and instance are just bits of code, the difference being that instance methods always take at least one parameter 'this'.\n\r\nSo, in terms of the methods themselves, they occupy similar amounts of RAM. This RAM will be set when the module loads (first as MSIL, then as native code after its Jitted) and will be there typically until the process dies taking its RAM with it.\n\r\nIt's unusual to think in terms of memory when talking about methods, its the data that gets passed to them and they act upon which is usually the concern.\r\n", "id": "2_1152342_1", "owner_tier": 0.3, "score": 5.0}, {"content": "\r\n    Static methods do not have a lifetime. A static method of a class can be called without instantiating the class.  In other words, static methods can be called practically any time you want.\n\r\nThe gotcha with static members is they must be instantiated and they are initialized before the program entry point is called.  This is just after the various DllMains are called and libraries are initialized. However, the exact timing of these events is unspecified so for this reason one should avoid using RTL functions to initialize static members because they can be unpredictable.  This applies to global objects also.\r\n", "id": "2_1152335_1", "owner_tier": 0.3, "score": 4.0}, {"content": "\r\n    The main differences are\n\r\n1) The static variable exists on the type so if you have a static variable on MyObject and have 100 MyObject objects then you only have one instance of the static variable.  If the variable wasn't static there would be 100 instances of it.\n\r\n2) Static variables are always on the heap even if they would be on the stack if they were non-static, so even if your static variable is an int it is still in the heap and accessed like a reference variable so that will have a knock-on effect in terms of memory management etc.\r\n", "id": "2_1152344_1", "owner_tier": 0.5, "score": 0}], "link": "https://www.codeproject.com/Questions/1152325/What-is-difference-between-static-method-and-norma", "question": {"content": "\r\n\t\t\t    I have found many difference in static and normal method, but most of the answers were around accessibility of members. But there are impacts on memory and lifespan as well.\r\nCan any one tell me with a good example that what happens with RAM and lifespan of static methods when we create static method and normal method.\r\nThanks in advance.\n\nWhat I have tried:\n\r\nAlready know the difference between static class and normal class, static function/members and normal properties.\r\n\t\t    ", "id": "1152325", "title": "What is difference between static method and normal method in class, in terms of memory allocation.", "traffic_rate": 0}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "codeproject", "tags": ["C#"]}, {"answers": [{"content": "\n\n\r\nMyObject.staticMethod();         //Simply refers to the class's static code\r\n\r\nMyObject obj = new MyObject();   //Create an instance\r\nobj.nonstaticMethod();           //Refer to the instance's class's code\r\nOn a deeper level, when the compiler puts a class together, it contains several pointers to methods. When those methods are executed it follows the pointers and executes the code at the far end. If a class is instantiated, the created object contains a pointer to the \"virtual method table\", which points to the methods to be called for that particular class in the inheritance hierarchy. However, if the method is static, no \"virtual method table\" is needed: all calls to that method go to the exact same place in memory to execute the exact same code. For that reason, in high-performance systems it's better to use a static method if you are not reliant on instance variables.\r\n", "id": "2_784210_3", "owner_tier": 0.1, "score": 0}, {"content": "\r\n    A static class is basically the same as a non-static class, but there is one difference: a static class cannot be instantiated - you can't use the new keyword to create a instance of the class type, you can't use the class name on the left of a variable declaration, and you can't create a method that returns a static class because you can't return a value!\n\r\nBecause there is no instance variable, you can only access the members of a static class by using the class name itself, as you have seen.\n\r\nBut...there are three important other things about static classes:\r\n1) You cannot declare non-static class members. If you try, you will get a compilation error. This means that it is a lot more obvious to a user that he needs to use the class name, rather than a class instance.\r\n2) You can only declare Extension methods within static classes.\r\n3) Static classes have a static constructor, which is executed (once, and once only) when the program that references the class is loaded - it is guaranteed to be loaded and to have its fields initialized and its static constructor called before the class is referenced for the first time and a static class remains in memory for the lifetime of the application domain in which your program resides.\r\n", "id": "2_784217_1", "owner_tier": 0.9, "score": 0}, {"content": "\r\n    Making a class static just prevents people from trying to make an instance of it. If all your class has are static members it is a good practice to make the class itself static.\n\n\r\nIf a class is declared as static then the variables and methods should compulsorily be declared as static.\n\r\nA class can be declared static, indicating that it contains only static members. It is not possible to create instances of a static class using the new keyword. Static classes are loaded automatically by the .NET Framework common language runtime (CLR) when the program or namespace containing the class is loaded.\n\r\nUse a static class to contain methods that are not associated with a particular object. For example, it is a common requirement to create a set of methods that do not act on instance data and are not associated to a specific object in your code. You could use a static class to hold those methods.\n\r\nThe main features of a static class are:\n\r\nThey only contain static members.\r\nThey cannot be instantiated.\r\nThey are sealed.\r\nThey cannot contain Instance Constructors or simply constructors as we know that they are associated with objects and operates on data when an object is created.\r\n", "id": "2_784206_2", "owner_tier": 0.1, "score": 1.0}], "link": "https://www.codeproject.com/Questions/784204/Difference-between-instance-classes-and-static-cla", "question": {"content": "\r\n\t\t\t    Hi,\n\r\nMe created a normal class with static methods and also Static classes with static methods.In both cases,i can access static methods by giving \"CLASSNAME.staticmethodname\" instead of \"instance.staticmethodname\".So what is the benefit of using static classes?\r\nPlease help me.\n\n\r\nThanks,\r\nRoshma\r\n\t\t    ", "id": "784204", "title": "Difference between instance classes and static classes", "traffic_rate": 0}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "codeproject", "tags": ["ASP.NET"]}, {"answers": [{"content": "\r\n    There is a lot of articles with clear explanation, you just need to read properly.\n\r\nStatic function is called just by address of the entry point. An instance function, in contrast, is a function with additional hidden parameter called this, in some languages self. Technically, it is passed exactly as any other parameter, usually first one.\n\r\nSo if you have this:\n\nC#\n\r\nclass MyClass {\r\n   public void MyMethod(int parameter) {/*...*/ someField = parameter; }\r\n   private int someField;\r\n}\r\nMyClass myVariable;\r\nmyVariable.MyMethod(3);\n\r\nBehind the scene it works exactly like this (pseudo-code! not real code!):\nC#\n\r\nMyClass.MyMethod(myVariable, 3);\n\r\nAs myVariable is passed as a parameter, it provide access to the instance members (like someField), same thing about other (non-static methods): they will need this way as well, passed from a calling instance method. That's why you cannot call instance method from static once, without some instance. You can only access other static members (including methods) from static methods.\n\r\nNaturally, from an instance method you can access all visible members, both static and instance ones.\n\r\nFor a reference, see my other Answer: What is the Extra Advantage of Delegate[^] \u2014 it's more on delegates but can be useful.\n\r\nThat should resolve your confusion completely, I hope.\n\n\u2014SA\n", "id": "2_152727_3", "owner_tier": 0.9, "score": 1.134}, {"content": "\r\n    It's to do with the language semantics/syntax. Example, with C#, this won't compile:\n\nC#\n\r\nclass A\r\n{\r\n    public static void Foo()\r\n    {\r\n    }\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{\r\n    A a = new A();\r\n    a.Foo();\n\r\nBut the following C++ code will compile, and run:\n\nC++\n\r\nclass A\r\n{\r\npublic:\r\n    static void Foo(){}\r\n};\r\n\r\nint _tmain(int argc, TCHAR* argv[], TCHAR* envp[])\r\n{\r\n    A a;\r\n    a.Foo();\n", "id": "2_152720_2", "owner_tier": 0.7, "score": 2.165}, {"content": "\r\n    A class static function is nothing more than an ordinary function. It exist in the class name scope, but doesn't see any class data.\n\r\nA class member function is a function that have visibility of the data of a class instance.\n\nC#\n\r\nstruct A\r\n{\r\n    int m;\r\n    static bool static_method(int x)\r\n    {\r\n        /* do something not using m */\r\n        // return m==x; //this will be an error.\r\n        return x==0;\r\n    }\r\n    bool method(int x)\r\n    {\r\n        /* do something with m */\r\n        return m==x;\r\n    }\r\n};\r\nvoid test()\r\n{\r\n    A a1, a2;\r\n    a1.m=1;   a2.m=2;\r\n    verify(a1.method(1)); //succeed\r\n    verify(a2.method(2)); //succeed\r\n    //verify(a1.method(3)); //will fail: 3!=1\r\n    //verify(a2.method(4)); //will fail: 4!=2\r\n    verify(A::static_method(0)); // will call A::static_method ...\r\n    verify(a1.static_method(0)); // ... three time, all without ...\r\n    verify(a2.static_method(0)); // ... access the m member.\r\n    //verify(A::static_method(1)); //will fail: 1!=0\r\n    //verify(a1.static_method(1)); //will fail: 1!=0\r\n}\n\r\nIn C++, a1.static_method is allowed, but it is perfectly identical to A::static_method, and -in any case, will get nothing from the a1 object.\r\nIn C# the designer of the language decided not to allow that redundant way to specify the same call.\r\n", "id": "2_152768_1", "owner_tier": 0.3, "score": 0}, {"content": "\r\n    \"My question is that we access a static function with the help of a class name and if we access the static function with the help of an object then we get error, why is this so\" I believe it is so because static applies to all objects of a particular class or just a particular class as a whole, therefore, you access the static function using the class name rather then the instance of the class or an object. \n\r\nSimple Example:\n\n\r\nClassA a(10);\r\n//a.static_function(); //this is wrong because static is referring to any instance of a class\r\n\r\nClassA.static_function();//this is correct because static is referring to a class or every instance of an object\n\r\nNote: I could be wrong about this, please someone verify.\r\nrobNO.\r\n", "id": "2_152781_1", "owner_tier": 0.1, "score": 0}], "link": "https://www.codeproject.com/Questions/152715/static-functions", "question": {"content": "\r\n\t\t\t    I know my question may sound stupid but still thought of giving it a try\n\r\nMy question is that we access a static function with the help  of a class name and if we access the static function with the help of an object then we get error, why is this so.\n\r\nI know a static block or function gets memory before the object gets created then why not access the static function via object name after the object creation. I read many books but none have a clear cut explanation for this please help me out\n\r\nThanks and Regards\r\nRadix\r\n\t\t    ", "id": "152715", "title": "static functions", "traffic_rate": 0}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "codeproject", "tags": ["C++", "C#", "Java"]}, {"answers": [{"content": "\r\n    Refer below links for the answer.\nhttp://stackoverflow.com/questions/7933540/c-sharp-static-class-why-use[^] \n\nhttp://stackoverflow.com/questions/241339/when-to-use-static-classes-in-c-sharp[^]\n\nhttp://www.dotnetfunda.com/forums/thread2305-why-and-where-we-need-to-use-static-class.aspx[^]\n\nhttp://msdn.microsoft.com/en-us/library/79b3xss3%28v=vs.80%29.aspx[^]\n\nhttp://www.dotnetperls.com/static-class[^]\r\n", "id": "2_579313_1", "owner_tier": 0.1, "score": 1.5}, {"content": "\r\n    If a class is declared as static then the variables and methods should compulsorily be declared as static.\n\r\nA class can be declared static, indicating that it contains only static members. It is not possible to create instances of a static class using the new keyword. Static classes are loaded automatically by the .NET Framework common language runtime (CLR) when the program or namespace containing the class is loaded.\n\r\nUse a static class to contain methods that are not associated with a particular object. For example, it is a common requirement to create a set of methods that do not act on instance data and are not associated to a specific object in your code. You could use a static class to hold those methods.\n\r\n->The main features of a static class are:\n\r\nThey only contain static members.\r\nThey cannot be instantiated.\r\nThey are sealed.\r\nThey cannot contain Instance Constructors or simply constructors as we know that they are associated with objects and operates on data when an object is created.\r\n", "id": "2_579402_1", "owner_tier": 0.1, "score": 1.5}, {"content": "\r\n    A static class serves as a convenient way to group (usually) related methods into a single \"toolbox\". In the code base I've built up over the years, I have a static class that encapsulates code for PGP, another that manages regular expression constants and can generate Regex objects using those constants, another that encapsulates Windows COM API calls and yet another that contains data conversion functions.\r\n", "id": "2_579418_1", "owner_tier": 0.3, "score": 5.0}, {"content": "\r\n    The \"static\" key word for a class is just a handy fool-proof syntax element. It helps you to get early error message if you try to put a single instance (non-static) member by accident. By definition, static class simply requires all its members to be static (except nested classes).\n\r\nIn contrast to that, static members of the class really have essential semantic meaning. The non-static members are also called instance member. An instance field is a member of the instance, so a separate field per class instance exists. In contrast, only one static field per Application Domain is created. Static methods do not have the hidden \"this\" parameter representing the class instance, so they cannot address any non-static members.\n\r\nI explained it all in further detail in my past answers:\nWhat makes static methods accessible?[^],\nCatch 22 - Pointers to interface objects die when function using them is made static.[^],\nC# windows base this key word related and its uses in the application[^].\n\n\u2014SA\n", "id": "2_600521_1", "owner_tier": 0.9, "score": 1.1333333333333333}, {"content": "\r\n    Hi\r\n\r\nWell you are right classes marked static do belong to any instance. Well it all depends on your design pattern. Like take me for example, if i am developing a application that interfaces with a database. When retrieving data from the database i create a static class that is responsible for the necessary database functions. Of those retrieved records i use them to create new objects using classes that aren't marked static. \n\r\nI hope i have answered your question\r\n", "id": "2_579383_1", "owner_tier": 0.1, "score": 0.9266666666666666}], "link": "https://www.codeproject.com/Questions/579303/WhyplusweplususeplusStaticplusClass", "question": {"content": "\r\n\t\t\t    hi all , \r\nif static class can access methods without instializing object ,then why \r\nto use Non-static class .? \r\nwhen static class could not be inherited ,why and where we use static class ? \r\ncan any help me on this issue .. \r\nthanks in advance\r\n\t\t    ", "id": "579303", "title": "Why we use Static Class", "traffic_rate": 0}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "codeproject", "tags": ["C#", "C#4.0"]}, {"answers": [{"content": "\nMSDN:A class can be declared static, indicating that it contains only static members. It is not possible to create instances of a static class using the new keyword.\n\r\nCheck Static Classes and Static Class Members (C# Programming Guide)[^].\n\r\nMoreover:\nQuote:\r\n    They only contain static members.\r\n    They cannot be instantiated.\r\n    They are sealed.\r\n    They cannot contain Instance Constructors (C# Programming Guide).\n\n\r\n--Amit\r\n", "id": "2_452348_1", "owner_tier": 0.3, "score": 1.3625}, {"content": "\r\n    Yes we can create object for static classes. But it really does not make sense and is not required.\n\r\nFor eg:\n\nC#\n\r\nclass Sample\r\n{\r\n    public static void main(String args[])\r\n    {\r\n        Math m=new Math();\r\n        System.out.println(m.sqrt(120)); //with help of object\r\n        System.out.println(Math.sqrt(120)); //with out object\r\n    }\r\n}\n", "id": "2_452250_1", "owner_tier": 0.3, "score": 0.7385714285714285}, {"content": "\r\n    Listen first, If we see the difference between a non-static and a static class in C# is simply that a static class cannot be instantiated. This means that you don\u2019t use the new keyword to instantiate an instance of the class. Instead, you will access members of the static class by using the class name. Basically, a static class is intended to be a container for a set of methods that only work with supplied parameters and don\u2019t have a need to store or retrieve data that is unique to them. An example of a static class that\u2019s built into the .NET Framework is the System.Math class. It contains methods which perform various mathematical operations.\n\r\nA static class is like a regular class that only has static members and has a private constructor. If you have a class like this in your design it\u2019s best to make it a static class in order to use the features in the compiler which will insure that instances of the class cannot be created or inherited. By taking this step it will make your code more solid.\n\r\nSometimes there is confusion between a static class and a singleton class where only one instance is allowed. The way to separate them is to understand that the static class should not have any internal variables, each method should function independently, like a function library. However, a singleton class may expose internal values as properties and allow the storage and retrieval of these values. \n\r\nAs I mentioned above static classes cannot be instantiated. Instead, the Framework will call the private constructor for the static class prior to the first place the class is referenced in code. This allows you to blend in your function library seamlessly into your program so if you had a static class like this\u2026\r\n public static class MyFunctions\r\n    {\r\n        public static string Test1(string myValue)\r\n        {\r\n            // Code\r\n        }\n\r\n\t\tpublic static int Test2(int myValue)\r\n        {\r\n            // Code\r\n        }\r\n    }\n\r\n\u2026you can call it like so\u2026\r\n MyFunctions.Test1(CurrentValue); \r\n\u2026without having to create an instance of the object using the new keyword (which you can\u2019t do with a static class anyway). Also, a static class will remain in memory for the lifetime of the application domain where it is created.\n\r\nAs you can see in the example above, a static class can only contain static members. The program won\u2019t compile if you don\u2019t remember to mark each of them as static. Also, static classes are sealed, which means that they cannot be inherited and cannot inherit from any class other than System.Object. While a static class cannot have an instance constructor, they can have a private, static, constructor. This routine will be called when the Framework creates the instance of the object. \n\r\nOne thing to bear in mind here is that if your static class requires a lot of extensive initialization it may not be a good candidate for a static class. In my view, these classes are intended for groups of related, but essentially standalone, functions. Having a substantial initialization routine may indicate that the class might work better as a singleton class or as a regular class. Taking this into consideration early on can prevent you from having to recode a static class into something else.\r\n", "id": "2_452431_1", "owner_tier": 0.1, "score": 0.5614285714285715}, {"content": "\r\n    Add a static class to some new solution:C#\n\r\nnamespace TestStatic\r\n{\r\n    public static class StaticClass\r\n    {\r\n        public static int staticInt = 0;\r\n    }\r\n}From some button press in some container, try the following:C#\n\r\nprivate void button1_Click(object sender, EventArgs e)\r\n{\r\n\r\n    // uncomment this line before you click the button\r\n    // a second time\r\n    //int x = StaticClass.staticInt;\r\n\r\n    MessageBox.Show(typeof(StaticClass).ToString());\r\n\r\n    MessageBox.Show((typeof(StaticClass) is Object).ToString());\r\n}Observe the results. \n\r\nSo, a static class is a Type, and an object ! For extra points explain why you cannot use 'GetType() here instead of 'typeof(), and explain why you cannot directly code:C#\n\r\nMessageBox.Show((StaticClass is Object).ToString());:)\n\r\nbest, Bill\r\n", "id": "2_452324_1", "owner_tier": 0.5, "score": 0}, {"content": "\r\n    Hey See below link:\r\nIt will helpful for you.\nWhy Staic Class?[^]\r\n", "id": "2_452358_1", "owner_tier": 0.1, "score": 0}, {"content": "\nQuote:It is not possible to create instances of a static class using the new keyword. Static classes are loaded automatically by the .NET Framework common language runtime (CLR) when the program or namespace containing the class is loaded.\r\nRef: http://msdn.microsoft.com/en-us/library/79b3xss3(v=vs.80).aspx\n\r\nThe main features of a static class are:\n\r\n    1) They only contain static members.\r\n    2) They cannot be instantiated.\r\n    3) They are sealed.\r\n    4) They cannot contain Instance Constructors (C# Programming Guide).\n\r\nRead the above link. That provides you sufficient information about Static class.\n\r\nYou said that, \"In an interview I was asked this questions that how can we create an object of static class\"?   Answer was straightforward.. \"Not possible(in C#)\"\r\n", "id": "2_452359_1", "owner_tier": 0.1, "score": 0}, {"content": "\r\n    static blocks and static classes are executed before constructor execution but object can be created while executing the constructor only but static blocks are executed before executing constructor so we can't create an object on static classes.\r\n", "id": "2_457618_1", "owner_tier": 0.1, "score": 0}, {"content": "\r\n    Hi,\n\r\nFirst of all one thing you should keep in your mind that Static class/Static method have only single instance per application. \n\r\nWhen very first time you call any of the method from your static class, at that time it's Instance will be created. So if you have 100 Static class in your application it's instance will not be created until it's Method call. If you call two method of your Static class Instance will be created for only first method call and for second method call the lastly created instance will be used.\n\r\nHope you got the idea \r\nBest luck\r\nThanks\r\n-Amit Gajjar\r\n", "id": "2_452312_1", "owner_tier": 0.3, "score": 1.0}, {"content": "\r\n    hi this vijaypratapsingh .answer of your question\n\n\n\r\nA static class cannot be instantiated. You cannot, at any time write new MyStaticClass() without the compiler complaining. It never has a this reference, and the fields, properties and methods can only ever be accessed via the class name: MyStaticClass.MyMethod() In addition, you cannot derive from a static class, not can a static class derive from any class other than object\r\n", "id": "2_784688_1", "owner_tier": 0.1, "score": 1.0}], "link": "https://www.codeproject.com/Questions/452249/How-to-create-object-of-static-class", "question": {"content": "\r\n\t\t\t    Hi,\r\n In an interview I was asked this questions that how can we create an object of static clsss while I have read on everwhere that we can't create object of static class? Please guide if can create then how ?\r\n\t\t    ", "id": "452249", "title": "How to create object of static class ?", "traffic_rate": 0}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "codeproject", "tags": ["C#", "ASP.NET"]}, {"answers": [{"content": "\r\n    You can create an object anywhere. In this case, obj is local to Main and only exists for the lifetime of that method. You don't get an error because creating a c1 doesn't require any instance level information from Program. You can't access i because it is an instance variable in Program.\n\r\nIn a way, obj is static in that it is not bound to an instance (only to a method which is in a static context). What you are looking up from Main, the class c1, is not an instance level item (classes are always 'static' in this sense, though note that that is not what 'static class' is used to mean).\n\r\nI don't really understand the question, in that it is obvious.\r\n", "id": "2_225286_1", "owner_tier": 0.3, "score": 5.0}, {"content": "\r\n    You can instantiate (create an object of) a class in a static or non-static method, as you see above. However the instance variable i (of the Program class) can only exist within an object created from that class, so you would need to have something like:\n\n\r\nstatic void Main(string[] args)\r\n{\r\n    Program obj = new Program();\r\n    obj.i = 34;   // can access instance variable through the object\r\n}\r\n\r\nIf i is made static then you can access it directly, but in that case there is only one such variable for all instances of the class, so change it in one place and it is changed everywhere.\n\n\r\nI would suggest you spend some more time reading your C# documentation in the section(s) concerning classes, objects etc. for more detailed descriptions.\r\n", "id": "2_225287_1", "owner_tier": 0.7, "score": 1.5}, {"content": "\r\n    In the simplest terms, because you are creating an instance of the object (cl). You could, for instance, call this to update/instantiate the value of i:\n\n\n\r\nProgram p = new Program();\r\np.i = 34;\n", "id": "2_225290_1", "owner_tier": 0.5, "score": 5.0}, {"content": "\r\n    You opinion that a static method cannot work with instances (of the same class or any other) is a sorrowful misconception. This is not true, not even close.\n\r\nPlease see my explanation of the matter in my past answers:\nWhat makes static methods accessible?[^],\nCatch 22 - Pointers to interface objects die when function using them is made static.[^].\n\r\nSecond link is to the question about C++, but the explanation is exactly the same (mentally substitute \"function\" with \"method\" :-)).\n\n\u2014SA\n", "id": "2_225472_2", "owner_tier": 0.9, "score": 5.0}, {"content": "\r\n    Umm, I'm a beginner in c# so I won't give a 100% guarantee.\r\nLet's see, AFAIK creating an instance of an object is allowed in static methods. what's forbidden is assigning a value into a non-static variable.\r\nIn your code, obj is a static variable since it's created within static method.\r\n", "id": "2_225293_1", "owner_tier": 0.1, "score": 0.5}], "link": "https://www.codeproject.com/Questions/225275/non-static-member-in-static-method-how-is-it-possi", "question": {"content": "\r\n\t\t\t    Hi , please help me understanding this situation...i asked the issue earlier but unfortunately didnt get the justified answer...\n\nC#\n\r\nclass Program\r\n{\r\n    int i;\r\n    static void Main(string[] args)\r\n    {\r\n        cl obj = new cl();\r\n      //  i=34;   <-- cant access since it is not static.\r\n    }\r\n}\r\n \r\nclass cl\r\n{\r\n    public  void display()\r\n    {\r\n    }\r\n}\n\n\n\r\nMy problen is that in the void main method (which does not allows non-static members in it, how come am i able to create an instance of the 'cl' class (which is non-static)???\r\nWhy does it NOT give an error :\r\n\"An object reference is required for the non-static field, method, or property.\"ked the question\r\n\t\t    ", "id": "225275", "title": "non-static member in static method....how is it possible ?", "traffic_rate": 0}, "saved_time": "Tue, 16 Jul 2024 03:59:05 GMT", "source": "codeproject", "tags": ["C#"]}]}