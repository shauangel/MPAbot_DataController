{"result": [{"answers": [{"content": "When a module is loaded, the py file is \"byte compiled\" to pyc files. The time stamp is recorded in pyc files.\nThis is done not to make it run faster but to load faster.\nHence, it makes sense to \"byte compile\" modules when you load them. [Edit : To include notes, references] From PEP 3147 on \"Byte code compilation\": CPython compiles its source code into \"byte code\", and for performance reasons,\nit caches this byte code on the file system whenever the source file has changes.\nThis makes loading of Python modules much faster because the compilation phase\ncan be bypassed. When your source file is foo.py, CPython caches the byte\ncode in a foo.pyc file right next to the source. How byte code compiled files are\ntracked with respect to Python version\nand \"py\" file changes: It also inserts a magic number in the compiled byte code \".pyc\" files. This changes whenever Python changes the byte code format, usually in major releases.\nThis ensures that pyc files built for previous versions of the VM won't cause problems.\nThe timestamp is used to make sure that the pyc file match the py file that was\nused to create it. When either the magic number or timestamp do not match,\nthe py file is recompiled and a new pyc file is written. \"pyc\" files are not compatible across Python major releases. When Python finds a pyc\nfile with a non-matching magic number, it falls back to the slower process of recompiling the source. That's the reason, if you simply distribute the \".pyc\" files compiled for the same platform will not work any more, if the python version changes. If there is a byte compiled file \".pyc\" and it's timestamp indicates that it is recent then it will be loaded up other wise python will fallback on the slower approach of loading the \".py\" files. The execution performance of the \".py\" file is not affected but the loading of the \".pyc\" files is faster than \".py\" files. Consider executing a.py which imports b.py That said, if you have a large script file X.py, modularizing it and moving contents to other modules results in taking advantage of lower load time for byte code compiled file. Another inference is that modules tend to be more stable than the script or the main file. Hence it is not byte compiled at all.", "id": 3878510, "score": 36}, {"content": "Compiling the main script would be annoying for scripts in e.g. /usr/bin. The .pyc file is generated in the same directory, thus polluting the public location.", "id": 3878507, "score": 0}], "link": "https://stackoverflow.com/questions/3878479/why-are-main-runnable-python-scripts-not-compiled-to-pyc-files-like-modules", "question": {"content": "I understand that when you import a module, that file is compiled into a .pyc file to make it faster? Why is the main file also not compiled to a .pyc? Does this slow things down? Would it be better to keep the main file as small as possible then, or does it not matter?", "id": 3878479, "title": "Why are main runnable Python scripts not compiled to pyc files like modules?", "views": 27085}, "resource": "StackOverflow", "tags": ["python"]}, {"answers": [{"content": "Let's ask python to compile with this tiny script. Call it compile.py When executed in the windows console as python compile.py cheat.py produces a file called cheat.pyc and prints the following in the console. The you can just type cheat.pyc to execute it in the console. This was made possible with Python 3.9.6 64Bit in Windows 10 ", "id": 78257282, "score": 0}, {"content": "Normally the following command compilies a python project: In Python2 it compiles all .py files to .pyc files in a project which contains packages as well as modules. Whereas in Python3 it compiles all .py files to __pycache__ folders in a project which contains packages as well as modules. With browning from this post: You can enforce the same layout of .pyc files in the folders as in\nPython2 by using: python3 -m compileall -b <pythonic-project-name> The option -b triggers the output of .pyc files to their\nlegacy-locations (i.e. the same as in Python2).", "id": 53914453, "score": 19}, {"content": "If you are using command line, use python -m compileall <argument> to compile python code to python binary code.\nEx: python -m compileall -x ./* Or,\nYou can use this code to compile your library into byte-code: look at \u261e docs.python.org for detailed documentation", "id": 61899114, "score": 1}, {"content": "", "id": 65911347, "score": 1}, {"content": "You can use compileall in the terminal. The following command will go recursively into sub directories and make pyc files for all the python files it finds. The compileall module is part of the python standard library, so you don't need to install anything extra to use it. This works exactly the same way for python2 and python3.", "id": 22779209, "score": 338}, {"content": "I found several ways to compile python scripts into bytecode Using py_compile in terminal: -m specifies the module(s) name to be compiled.  Or, for interactive compilation of files Using py_compile.compile: Using py_compile.main(): It compiles several files at a time. The list can grow as long as you wish. Alternatively, you can obviously pass a list of files in main or even file names in command line args. Or, if you pass ['-'] in main then it can compile files interactively. Using compileall.compile_dir(): It compiles every single Python file present in the supplied directory. Using compileall.compile_file(): Take a look at the links below: https://docs.python.org/3/library/py_compile.html https://docs.python.org/3/library/compileall.html", "id": 38426786, "score": 62}, {"content": "To match the original question requirements (source path and destination path) the code should be like that: If the input code has errors then the py_compile.PyCompileError exception is raised.", "id": 48297845, "score": 5}, {"content": "You can compile individual files(s) from the command line with:", "id": 32686745, "score": 78}, {"content": "It's been a while since I last used Python, but I believe you can use py_compile:", "id": 5607315, "score": 67}, {"content": "I would use compileall. It works nicely both from scripts and from the command line. It's a bit higher level module/tool than the already mentioned py_compile that it also uses internally.", "id": 5615653, "score": 19}], "link": "https://stackoverflow.com/questions/5607283/how-can-i-manually-generate-a-pyc-file-from-a-py-file", "question": {"content": "For some reason, I can not depend on Python's \"import\" statement to generate .pyc file automatically Is there a way to implement a function as following?", "id": 5607283, "title": "How can I manually generate a .pyc file from a .py file", "views": 324796}, "resource": "StackOverflow", "tags": ["python"]}, {"answers": [], "link": "https://stackoverflow.com/questions/75828595/how-do-i-precompile-python-code-on-a-mac", "question": {"content": "I am using a Mac M2 with Ventura, and the answers I can get from other webpages / ChatGPT / Bard told me I can do either: and a abc.pyc should be created. And then just run python3 abc.pyc But none of the methods above can produce .pyc file and running it shows: How can it be done?", "id": 75828595, "title": "How do I precompile Python code on a Mac?", "views": 72}, "resource": "StackOverflow", "tags": ["python", "python-3.x"]}, {"answers": [{"content": "From \"What\u2019s New in Python 2.6 - Interpreter Changes\": Python can now be prevented from\nwriting .pyc or .pyo files by\nsupplying the -B switch to the Python\ninterpreter, or by setting the\nPYTHONDONTWRITEBYTECODE environment\nvariable before running the\ninterpreter. This setting is available\nto Python programs as the\nsys.dont_write_bytecode variable, and\nPython code can change the value to\nmodify the interpreter\u2019s behaviour. So run your program as python -B prog.py. Update 2010-11-27: Python 3.2 addresses the issue of cluttering source folders with .pyc files by introducing a special __pycache__ subfolder, see What's New in Python 3.2 - PYC Repository Directories.", "id": 154617, "score": 316}, {"content": "Solution for ipython 6.2.1 using python 3.5.2 (Tested on Ubuntu 16.04 and Windows 10): Ipython doesn\u2019t respect %env PYTHONDONTWRITEBYTECODE =1 if set in the ipython interpretor or during startup in ~/.ipython/profile-default/startup/00-startup.ipy.\nInstead using the following in your ~.ipython/profile-default/startup/00-startup.py", "id": 48728321, "score": 5}, {"content": "Starting with Python 3.8 you can use the environment variable PYTHONPYCACHEPREFIX to define a cache directory for Python. From the Python docs: If this is set, Python will write .pyc files in a mirror directory tree at this path, instead of in pycache directories within the source tree. This is equivalent to specifying the -X pycache_prefix=PATH option. Example If you add the following line to your ./profile in Linux: Python won't create the annoying __pycache__ directories in your project directory, instead it will put all of them under ~/.cache/cpython/", "id": 57414078, "score": 16}, {"content": "You can set sys.dont_write_bytecode = True in your source, but that would have to be in the first python file loaded. If you execute python somefile.py then you will not get somefile.pyc. When you install a utility using setup.py and entry_points= you will have set sys.dont_write_bytecode in the startup script. So you cannot rely on the \"default\" startup script generated by setuptools. If you start Python with python file as argument yourself you can specify -B: somefile.pyc would not be generated anyway, but no .pyc files for other files imported too. If you have some utility myutil and you cannot change that, it will not pass -B to the python interpreter. Just start it by setting the environment variable PYTHONDONTWRITEBYTECODE:", "id": 44560785, "score": 11}, {"content": "I have several test cases in a test suite and before I was running the test suite in the Mac Terminal like this:  Running the command this way my directory was being populated with .pyc files. I tried the below stated method and it solved the issue: This method works if you are importing test cases into the test suite and running the suite on the command line. ", "id": 39925524, "score": 4}, {"content": "", "id": 9562273, "score": 129}, {"content": "There actually IS a way to do it in Python 2.3+, but it's a bit esoteric.  I don't know if you realize this, but you can do the following: According to the zipimport library: Any files may be present in the ZIP archive, but only files .py and .py[co] are available for import. ZIP import of dynamic modules (.pyd, .so) is disallowed. Note that if an archive only contains .py files, Python will not attempt to modify the archive by adding the corresponding .pyc or .pyo file, meaning that if a ZIP archive doesn't contain .pyc files, importing may be rather slow. Thus, all you have to do is zip the files up, add the zipfile to your sys.path and then import them. If you're building this for UNIX, you might also consider packaging your script using this recipe:  unix zip executable, but note that you might have to tweak this if you plan on using stdin or reading anything from sys.args (it CAN be done without too much trouble). In my experience performance doesn't suffer too much because of this, but you should think twice before importing any very large modules this way.", "id": 154640, "score": 23}, {"content": "In 2.5, theres no way to suppress it, other than measures like not giving users write access to the directory. In python 2.6 and 3.0 however, there may be a setting in the sys module called \"dont_write_bytecode\" that can be set to suppress this.  This can also be set by passing the \"-B\" option, or setting the environment variable \"PYTHONDONTWRITEBYTECODE\"", "id": 154566, "score": 11}, {"content": "You could make the directories that your modules exist in read-only for the user that the Python interpreter is running as. I don't think there's a more elegant option. PEP 304 appears to have been an attempt to introduce a simple option for this, but it appears to have been abandoned. I imagine there's probably some other problem you're trying to solve, for which disabling .py[co] would appear to be a workaround, but it'll probably be better to attack whatever this original problem is instead.", "id": 154474, "score": 2}, {"content": "As far as I know python will compile all modules you \"import\". However python will NOT compile a python script run using: \"python script.py\" (it will however compile any modules that the script imports). The real questions is why you don't want python to compile the modules? You could probably automate a way of cleaning these up if they are getting in the way.", "id": 154467, "score": 0}], "link": "https://stackoverflow.com/questions/154443/how-to-avoid-pyc-files", "question": {"content": "Can I run the python interpreter without generating the compiled .pyc files?", "id": 154443, "title": "How to avoid .pyc files?", "views": 154197}, "resource": "StackOverflow", "tags": ["python"]}, {"answers": [{"content": "Yes, starting from Python 3.8 you can control this behavior. The original discussion starts from pep 304 in 2003. While this original PEP was withdrawn, a variant of this feature was\n  eventually implemented for Python 3.8 in https://bugs.python.org/issue33499 In the result, you can control using PYTHONPYCACHEPREFIX=path, -X pycache_prefix=path and sys.pycache_prefix.", "id": 60024195, "score": 50}, {"content": "This might be useful for some:\nMiscellaneous options, especially -B option: If given, Python won\u2019t try to write .pyc files on the import of source\n  modules. See also PYTHONDONTWRITEBYTECODE.", "id": 7229655, "score": 25}, {"content": "Python files are NOT always stored in the same directory and will get directed to pycache if you use pycache. Any answers on being able to have custom locations and names, because importing the module is rather temperamental and doesn't always work. You will be able see what I mean at github.com/LolexInc/Lolex-Tools/tree/Beta and view JTToolsInstaller.py. There is a lot of mess in it.", "id": 39395430, "score": 0}, {"content": "There's no way to change where the .pyc files go.  Python 3.2 implements the __pycache__ scheme whereby all the .pyc files go into a directory named __pycache__.  Python 3.2 alpha 1 is available now if you really need to keep your directories clean. Until 3.2 is released, configure as many tools as you can to ignore the .pyc files.", "id": 3522217, "score": 19}], "link": "https://stackoverflow.com/questions/3522079/changing-the-directory-where-pyc-files-are-created", "question": {"content": "Is there a way to change the directory where .pyc file are created by the Python interpreter? I saw two PEPs about that subject (0304 and 3147), but none seems to be implemented in the default interpreter (I'm working with Python 3). Did I miss something ?", "id": 3522079, "title": "Changing the directory where .pyc files are created", "views": 28531}, "resource": "StackOverflow", "tags": ["python", "path", "python-3.x", "pyc"]}, {"answers": [{"content": "Typical.  It's always the last thing you try, isn't it?  Adding the directory containing the plugin scripts to sys.path seems to do the trick, although I'm not sure why importlib needs this (I thought the point was to allow you to circumvent the normal import mechanism).  Perhaps it's to do with the way the default importlib.machinery.SourceFileLoader is implemented? Something like: makes the \"Unmarshallable object\" problem go away.  The cache directory and .pyc files are created correctly.", "id": 38189436, "score": 0}], "link": "https://stackoverflow.com/questions/38188034/embedded-python-3-not-creating-pyc-files-when-using-importlib", "question": {"content": "I'm trying to embed a Python 3 interpreter in an Objective C Cocoa app on a Mac, following instructions in this answer (which extends this article) and building Python and PyObjC by hand.   I'd like to be able to run Python code as plugins.  I specifically don't want to rely on the stock Apple Python (v2.7).  I have most of it working but can't seem to reliably load the plugin scripts.  It looks like the embedded Python interpreter is unable to create the __pycache__/*.pyc files. This may be a symptom, or a cause.  If I import the plugin file manually from the Python3 REPL (via import or the imp or importlib modules) the .pyc is generated and the plugin then loads correctly.  If I don't do this manually the .pyc is not created and I receive a ValueError \"Unmarshallable object\".  I've tried loosening permissions on the script directory to no avail.  The cache_tag looks OK, both from the REPL and from within the bouncer script: py_compile raises a Cocoa exception if I try and compile the plugin file manually (I'm still digging into that). I'm using the following: I had to make a couple of necessary tweaks to the process outlined in the linked SO answer: Compiling Python 3 required Homebrew versions of OpenSSL and zlib, and appropriate LDFLAGS and CPPFLAGS: I also ensure pip is installed OK when configuring Python to build: There is a fork of the original article source (which uses the stock Python2) that works fine here, so I suspect I'm not too far off the mark.  Any idea what I've missed?  Do I need to sign, or otherwise give permission to, the embedded Python?  Are there complilation/configuration options I've neglected to set? TIA", "id": 38188034, "title": "Embedded Python 3 not creating .pyc files when using importlib", "views": 499}, "resource": "StackOverflow", "tags": ["objective-c", "pyobjc"]}, {"answers": [{"content": "You could use the py_compile module. Run it from command line (-m option): When this module is run as a script, the main() is used to compile all\n  the files named on the command line. Example: compileall provides similar functionality, to use it you'd do something like Where ... are files to compile or directories that contain source files, traversed recursively. Another option is to import the module: -c 'import module' is different from -m module, because the former won't execute the if __name__ == '__main__': block in module.py.", "id": 32578574, "score": 7}, {"content": "Use the following command: This will create your_script.pyc file in the same directory. You can pass directory also as : This will create .pyc files for all .py files in the directory Other way is to create another script as It also create the your_script.pyc file. You can take file name as command line argument", "id": 32578885, "score": 10}], "link": "https://stackoverflow.com/questions/32578535/how-to-make-a-pyc-file-from-python-script", "question": {"content": "I know that when Python script is imported in other python script, then a .pyc script is created. Is there any other way to create .pyc file by using linux bash terminal? ", "id": 32578535, "title": "How to make a .pyc file from Python script", "views": 23164}, "resource": "StackOverflow", "tags": ["python", "terminal", "pyc"]}, {"answers": [{"content": "A *.pyc file is created for imported modules, and they are placed in the same directory containing the .py file.  However... no .pyc file is created for the main script for your program.  In other words... if you call \"python myscript.py\" on the command line, there will be no .pyc file for myscript.py. This is how Python 2.x behaves. However, in Python 3.x the .pyc files are saved in a __pycache__ directory. See David Glick's answer for details. [edit: Added note about Python 3.x.]", "id": 5149853, "score": 38}, {"content": "In Python < 3.2, the .pyc files are placed in the same directory as the .py file. In Python 3.2, the compiled files are placed in a __pycache__ subdirectory, and are named differently depending on which Python interpreter created them. (This can be useful to people importing the same Python modules from multiple versions of Python.) See http://docs.python.org/dev/whatsnew/3.2.html#pep-3147-pyc-repository-directories for more information.", "id": 5149973, "score": 25}, {"content": "They are always created in whatever directory contains your .py files. Also, they are created for imported modules, not files that you directly run. If you want to create .pyc files, boot up a Python interpreter and just import the modules of your choosing.", "id": 5149854, "score": 1}, {"content": "The .pyc files are normally created in the same directory as the files that they correspond to.  E.g., both my_file.py and my_file.pyc should be in the same location.", "id": 5149848, "score": 0}], "link": "https://stackoverflow.com/questions/5149832/where-are-the-pyc-files", "question": {"content": "I am a complete newb to python, hence a silly question.  As i understand, upon first execution of a *.py program, byte code is created into *.pyc and used until a change in *.py file. Where might this *.pyc bytecode be found in a project? I would think bin, but nothing is there", "id": 5149832, "title": "where are the .pyc files?", "views": 24246}, "resource": "StackOverflow", "tags": ["python", "bytecode"]}, {"answers": [{"content": "I would suggest this at the top of your python script: Or, use the sys.dont_write_bytecode method. See also: How to avoid .pyc files? which suggests a few other solutions, including one method that works in pre-2.6 python.", "id": 13932394, "score": 1}, {"content": "Setting the environment as described by abarnert is really the right way to do this, but if for some reason that's not possible in your setup you can set it at runtime in the code.   Just add the following to the top of your script: This will keep python from generating any bytecode after that point.  ", "id": 13905695, "score": 5}, {"content": "I just tested this, and it works fine on 10.8.2 with the Apple-installed Python 2.7. You can replace python with python2.7, python2.6, or python2.5, and you'll get the same result. And it also works with all of the Apple-installed Pythons from 10.5-10.7, and with all of the python.org, Enthought, MacPorts, and Homebrew Pythons I have on the various machines available to me, and the standard python packages on two different linux distros. So if this is a bug, it's a very specific one, meaning you'll have to tell us exactly which Python (and how you installed it, if not stock), and which OS X 10.8. It's far more likely that PYTHONDONTWRITEBYTECODE just isn't in python's environment. As Mark Ransom suggested, you can verify this by adding: If it says None, this is the problem. So, PYTHONDONTWRITEBYTECODE is not in your environment. But you say it is in your calling environment. How is that possible? Well, if you're using bash, the most likely reason is that you forgot to export it. Out of all the stupid ways to do this, that's the one I've done the most. But here are some stupid things I've done: At any rate, if you tried this manually in the terminal, try again. If you're doing this in your .bash_profile, a launcher shell script, a launcher Python script, or whatever, show us the relevant code and someone will immediately find your stupid error. If they laugh at you, tell them to read my answer so they can laugh at me instead. PS, Note that I did export PYTHONDONTWRITEBYTECODE=1 instead of separate PYTHONDONTWRITEBYTECODE=1 and export PYTHONDONTWRITEBYTECODE lines in my test. I always do this, except in shell scripts that have to be portable, because it's easier to debug the blatant error you get when trying this on an old-school shell that doesn't have the direct export syntax than to debug the problems caused by all the stupid mistakes I cataloged above.", "id": 13888591, "score": 21}, {"content": "You can avoid the creation of both .pyc and .pyo files with: python -B script.py", "id": 13630073, "score": 6}], "link": "https://stackoverflow.com/questions/13627686/how-to-avoid-creation-of-pyc-files-on-os-x-10-8-with-python-2-7", "question": {"content": "It seems that on OS X 10.8 (with Python 2.7) the .pyc files are created even if you setup the environment variable PYTHONDONTWRITEBYTECODE=1 How can I prevent this from happening, or how can I convince Python not to create this files in the same location as the source files.", "id": 13627686, "title": "How to avoid creation of .pyc files on OS X 10.8 with Python 2.7?", "views": 4807}, "resource": "StackOverflow", "tags": ["python", "macos", "python-2.7", "osx-mountain-lion", "pyc"]}, {"answers": [{"content": "There is an equivalent to py2exe called py2app. I never tried it but there is a lot of good comments. It is available on macport and the tutorial seems pretty simple (for simple cases at least :) ).", "id": 9543078, "score": 3}, {"content": "Well since you're on a mac you could compile using py2app it will compile your code in a similar way to py2exe but for OSX. Otherwise you could always transfer it to a windows computer and just use py2exe.", "id": 9543073, "score": 0}, {"content": "If your friends are on windows you could use py2exe, but if they're on Mac I'm not sure there's an equivalent. Either way, compiling like that breaks cross platform compatability, which is the whole point of an interpreted language really... Python just isn't really set up to hide code like that, it's against it's philosophy as far as I can tell.", "id": 9543052, "score": 0}, {"content": "You could try py2exe (http://www.py2exe.org/) since it compiles your code into an exe file, they should have a hell of a time trying to decompose it.", "id": 9542902, "score": -1}, {"content": "if you import it (from the shell, or from another python app), it should create a .pyc file, which is compiled python.  You shouldn't be able to edit it through a text editor. Example:", "id": 9542839, "score": 2}], "link": "https://stackoverflow.com/questions/9542814/compiling-python-script", "question": {"content": "I'm trying to send a python script I wrote on my Mac to my friends. Problem is, I don't want to send them the code that they can edit. How can I have my script change from an editable text file, to a program that you click to run?", "id": 9542814, "title": "&quot;Compiling&quot; python script", "views": 4709}, "resource": "StackOverflow", "tags": ["python", "macos", "text", "compiler-construction"]}, {"answers": [{"content": "I am not sure what you are asking here. Python files are usable on macOS without doing anything (other than ensuring python is installed). Are you trying to bundle your script so that it can be installed? If so then I would look into AutoPkg or Homebrew", "id": "j897py7", "parent": "t3_110jhma", "vote": 3}, {"content": "AFAIK there is no way to do this currently. All of the freezing programs available only make executables for the same OS they are running on. Your only option on a Windows PC is to install a MacOS virtual machine. \n\nBut I think Macs come with python preinstalled. If you set the shebang your friends can just run the .py directly. You'll need to figure out the dependencies, though.", "id": "j897b82", "parent": "t3_110jhma", "vote": 1}, {"content": "Run the command chmod 755 <path to the script> to make it executable. Then move it to ~/Applications so that it can be indexed by spotlight. The 2nd step seems a bit extra. If they are running a bot I would assume they can run it from the terminal without an issue. To make it even easier at the script to a directory on the PATH and they can run it from anywhere.", "id": "j89ajok", "parent": "t3_110jhma", "vote": 1}, {"content": "A person has paid me to make a bot. I did it but just need to convert to executable so that he can use on his mac. Yes python scripts are usable directly but for that you first need to open terminal then change directory and then type `python3 script.py` which is not very convenient. How can I setup that python script starts running by just double click", "id": "j898c73", "parent": "t1_j897py7", "vote": 1}, {"content": "A default python install on windows runs a .py file when you double click it. If that's not the case for you that means you've installed some developer tools that highjacked the default behavior.\n\nOn linux / mac there's an extra step before you can double click to run it. You need to set the file as executable in the file properties.", "id": "j898npy", "parent": "t1_j898c73", "vote": 2}, {"content": "I am talking about mac. I need to get same functionality on a mac. Double click to start", "id": "j898t1i", "parent": "t1_j898npy", "vote": 1}, {"content": "Read the last comment. You should be able to set the file as executable in the file properties, according to the commenter.", "id": "j89fns6", "parent": "t1_j898t1i", "vote": 1}], "link": "https://www.reddit.com/r/learnpython/comments/110jhma/need_to_convert_py_to_executable_for_mac/", "question": {"context": "Please help me I am using a windows PC and I want to convert a .py file to mac executable for a very important project.... please help.... also none of my friends or anyone I know has a mac so I cannot borrow a mac from someone. I need to do it from windows PC only... pls", "id": "110jhma", "title": "Need to convert .py to executable for mac"}, "resource": "Reddit"}, {"answers": [{"content": "They can edit an executable file in notepad++?\n\nOr are you talking about .py files? if .py files, make an exe using py2exe, this will make things more difficult.\n\nBesides that it's possible to \"edit\" compiled exe programs in general, that is a bit more difficult, but the general solution for things you want to hide is not to give them to anyone.\n\nWhat are you trying to hide/prevent? from your own infrastructure team...?", "id": "kihhkop", "parent": "t3_199zmjh", "vote": 41}, {"content": "Without knowing more: no. What edits are you afraid of them making? What is it you're trying to hide from them? Because honestly them being able to see or edit your code shouldn't cause problems, and if it does it indicates you have a bigger issue.\n\nEither a technical issue, like you're embedding secret values in your code, or a team issue like you don't trust your infra team, and if you don't trust your infra team you shouldn't be using the infra they set up", "id": "kihnt22", "parent": "t3_199zmjh", "vote": 22}, {"content": "How exactly did you convert to an \u201cexecutable\u201d? You should not be able to open executable files in a text editor", "id": "kiiska0", "parent": "t3_199zmjh", "vote": 7}, {"content": "Rewrite it in another language. Serious, if you don't want people to be able to easily reverse engineer something Python is NOT the way. Companies explicitly choose Python for exactly this reason. \n\nThat said some other people have mentioned some ways to compile it. I'd love to find out if it works or not. So please update us :).", "id": "kijg0id", "parent": "t3_199zmjh", "vote": 6}, {"content": "I think you can compile your python script to cython and give out the binary file.", "id": "kii1wq2", "parent": "t3_199zmjh", "vote": 5}, {"content": "## Direct answer:\n\nYou can package your code as a [wheel file](https://realpython.com/python-wheels/).\n (This is how most packages you download from pip these days come, for example.)\n\nThis is pretty easily done with [Poetry](https://python-poetry.org).  If you don\u2019t have poetry set-up there\u2019s a little bit of learning to do, but learning a package manager is worth it, imo.  Especially for Python which is about as leaky a system as you can get.\n\n## Caveat to Direct:  \nThis is not (nor intended) to be cryptographically secure.  I honestly don\u2019t know how easy it would be to edit the installation (because why would you \u2014 you\u2019d just fork the repo and edit that).  But to your question I\u2019ll add that note.\n\n## Step-back:\nWhat are you trying to do here?  What are you trying to prevent?  \n- Accidental edits corrupting something? (If so add a sha and a validation step to warn the user to redownload if corrupt.). \n- Disagreeing parties changing flow? (If so this, of course, sounds like a social problem.  I can\u2019t tell you what\u2019s right, but working it out on the social level is probably what\u2019s right! :)\n- Bad actors?  (Logging and verifications is probably the right step then. )\n- Hiding secrets in code \u2014 e.g. api-keys [which shouldn\u2019t be in the code, incidentally] that would grant more authority to a holder than the coded actions? (Then you probably want to use secret management \u2014 something built into most CI systems or achievable via myriad other routes.)\n\nTLDR: publishing wheels with something like Poetry is great, but it\u2019s not clear that what you\u2019re asking for matches your goals - so fyi.", "id": "kihz0jz", "parent": "t3_199zmjh", "vote": 14}, {"content": "Give them an API to interact with the automation instead of direct access. This is the only 100% fool proof way", "id": "kij3k9m", "parent": "t3_199zmjh", "vote": 7}, {"content": "You can convert you python files to .pyo or .pyc which are the same file as .py but not ina text format but a byte code. That may be enough for you need. \nLook for the compileall module \n[the docs](https://docs.python.org/3/library/compileall.html)", "id": "kihqibz", "parent": "t3_199zmjh", "vote": 3}, {"content": "Just a heads up as assume this is a corp network.\n\nYou CAN package a python package into a single exe with no supporting files, however it most likely will be seen as a virus which may cause you or colleagues issues.\n\nAs others have mentioned cx freeze is a good option, I've had no virus issues with this for distribution, but does mean you'll have an exe and available python code in the lib directory from your build.", "id": "kik554s", "parent": "t3_199zmjh", "vote": 2}, {"content": "Anything can be edited.  It's just a question of how hard it is going to be to do it.", "id": "kiip7rv", "parent": "t3_199zmjh", "vote": 4}, {"content": "Are you putting your password in it? Is that why you don\u2019t want your team to see it? If so stop doing that.", "id": "kijff2m", "parent": "t3_199zmjh", "vote": 2}, {"content": "I packaged a python script as an executable using CX_freeze and I\u2019m NOT able to right-click the exe file and edit the Python script with Notepad++.", "id": "kij5q8m", "parent": "t3_199zmjh", "vote": 1}, {"content": "cython and cx_freeze", "id": "kij94pt", "parent": "t3_199zmjh", "vote": 1}, {"content": "Compile it.", "id": "kijdb70", "parent": "t3_199zmjh", "vote": 1}, {"content": "A quick solution would be to share the complied python file (.pyc extension) instead of the py file. This is not full proof if they open it in notepad it\u2019ll be incomprehensible.", "id": "kijph5f", "parent": "t3_199zmjh", "vote": 1}, {"content": "One other option, depending on the details, is to make your software a service and only distribute a client for the service. Then you never need to distribute whatever it is you don't want people to edit.", "id": "kijskjl", "parent": "t3_199zmjh", "vote": 1}, {"content": "Wouldn't making it as \"read-only\" solve your issue?\n\nI'm struggling to understand what are you trying to achieve", "id": "kijz76z", "parent": "t3_199zmjh", "vote": 1}, {"content": "Py_compile", "id": "kik16iv", "parent": "t3_199zmjh", "vote": 1}, {"content": "Well if it's Linux. First you change the permissions to something like 744 or 644. Next you move your script to the bin and rename it so that its part of the environment. If you really want to make it uneditable, move it to the bin change the group and set the permissions to allow only root and cron access. It should negate the editable parameters. Additionally add in a action from github to regularly update the script with permissions and your updates to nullify any type of interference. \nThis is solid but you can add in extra safeguards with key access to force the file to run based on access to an encrypted key. Its annoying but the most secure way to keep your file accessible to you while keeping editing power out of anyone without key access", "id": "kin9wx8", "parent": "t3_199zmjh", "vote": 1}, {"content": ">They can edit an executable file in notepad++?\n\nyes", "id": "kihmj1t", "parent": "t1_kihhkop", "vote": -32}, {"content": "Well you \"can\" but it would not be too useful unless you know what you are doing (like looking for all the statically stored strings )", "id": "kikgjse", "parent": "t1_kiiska0", "vote": 4}, {"content": "Nuitka makes that easy too", "id": "kiji8jv", "parent": "t1_kii1wq2", "vote": 3}, {"content": "This is the easiest way. Maybe a comfortable web interface for the average user.", "id": "kikmyes", "parent": "t1_kij3k9m", "vote": 2}, {"content": "You can decompile the .pyc file rather easily (source: Had to do that once when I accidentially deleted a .py file in something that was not git-tracked (stupid me))", "id": "kikdi5l", "parent": "t1_kijph5f", "vote": 2}, {"content": "That is very interesting... in my experience trying to edit a binary executable with a text editor results in a corrupt executable that no longer works.\n\nWith hex editor it's possible to change some strings... but really... what are you trying to hide from your own IT team?", "id": "kihmybz", "parent": "t1_kihmj1t", "vote": 29}, {"content": "Then it\u2019s not an exe file. It\u2019s probably a Python file with a shebang or smth like that if it doesn\u2019t have a .py extension. Executable files are in a binary format that cannot be edited", "id": "kiisa8p", "parent": "t1_kihmj1t", "vote": 22}, {"content": "Then we have a different understanding of \"executable\".\n\nOr you are talking about editing it with an hexadecimal editor, which is pretty \"hardcore\".", "id": "kiktlxg", "parent": "t1_kihmj1t", "vote": 2}, {"content": ".py files are not executable on windows", "id": "kijiqop", "parent": "t1_kihmj1t", "vote": -14}, {"content": "No they cant. Editing a binary .exe file would be a nightmare to not corrupt after the editing.\n\nMake a user run it with only read rights and block anyone  from having Edit rights to the file.\n\nOr use a filecgwck system that replaced the edited file if it changes.", "id": "kim1qvd", "parent": "t1_kihmj1t", "vote": 1}, {"content": "Well, they can be edited, but it's non-trivial, and requires more than a basic text editor.", "id": "kiixp3d", "parent": "t1_kiisa8p", "vote": 3}, {"content": "I mean\u2026 not really. Unless you have something like ghidra, and even then good luck making sense of anything originally written in a language like Python. Depending on how you compiled it, you likely have the full Python virtual machine in there with the bytecode of the program. Good luck figuring that one out.", "id": "kiiy86z", "parent": "t1_kiixp3d", "vote": 2}], "link": "https://www.reddit.com/r/learnpython/comments/199zmjh/is_there_a_way_to_make_a_python_executable_that/", "question": {"context": "I wrote a bunch of automation utilities for my infrastructure team and convert to executable. The issue is you can right click on it and edit in notepad++.\n\n&#x200B;\n\nIs there something I can do so they can execute it but not edit it? ", "id": "199zmjh", "title": "Is there a way to make a python executable that can't be edit?"}, "resource": "Reddit"}, {"answers": [{"content": "In general, you don't! A .pyc file represents a module that has already been compiled from its .py file, and can basically be ignored as just part of how Python works.", "id": "dmqzr7c", "parent": "t3_6yxogo", "vote": 4}, {"content": "Same as importing it from a .py file. \n\nNote that .pyc files are very specific to the OS, python version, architecture etc, so generally you can't just move them to another system. \n\n\n\n---\n\nIf you have more questions like this it's better to post them on /r/learnpython. Be sure to [format your code for reddit](https://www.reddit.com/r/learnpython/wiki/faq#wiki_how_do_i_format_code.3F) or use a site like pastebin. Also, include which version of python and what OS you are using. ", "id": "dmqxyxe", "parent": "t3_6yxogo", "vote": 1}, {"content": "You can also use this to try and convert it back into a .py: https://pypi.python.org/pypi/uncompyle6", "id": "dms40gc", "parent": "t3_6yxogo", "vote": 1}, {"content": "What? The .pyc file is the bytecode the interpreter creates, these are saved locally as a cache. The .pyc files would be used first, and since all .py files are being translated to .pyc, technically you /only/ import from .pyc files.", "id": "dmrfwuk", "parent": "t1_dmqzr7c", "vote": 2}, {"content": "I tried to do it that way, but there was an error: ImportError: bad magic number in 'test': b'\\x16\\r\\r\\n' I really don't know what is going on", "id": "dmqyq5z", "parent": "t1_dmqxyxe", "vote": 1}, {"content": "I think you misunderstand what they're saying. You're both agreeing that you import from a pyc file but you don't necessarily need to be concerned by that implementation detail.\n\nAlso you can bypass pyc files in Python by setting the sys bytecode flag.", "id": "dmrj5z9", "parent": "t1_dmrfwuk", "vote": 4}, {"content": "Either that .pyc file was not compiled for the OS, python version, or architecture you are using or it's corrupted.\n\nWhere did you get this file? ", "id": "dmqzxxa", "parent": "t1_dmqyq5z", "vote": 1}, {"content": "I'm working on problem set 3 (Robot simulation) of the MIT 6.0002 OpenCourseWare. Here is the link: https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-0002-introduction-to-computational-thinking-and-data-science-fall-2016/assignments/. The problem asks me to test my code by running the ps3_test_f16.py file, but I can't get this file to run properly. I'm not sure how to fix this. Like you said, it could be that the .pyc file was not compiled for the OS, python version. I'm going to try using earlier version of python to see if it works ", "id": "dmr0m77", "parent": "t1_dmqzxxa", "vote": 1}, {"content": "The magic number claims it was compiled by python 3.5 (if it's not corrupted). ", "id": "dmr1obp", "parent": "t1_dmr0m77", "vote": 2}, {"content": "I use Anaconda with Python 3.6. I tried to make a Python 3.5 environment to run the test file, but it still gave the bad magic number error. I'm going to download and install new anaconda python 3.5 and give it another try\n\nEdit: apparently the course was taught in python 3.5 so switching from 3.6 to 3.5 got it working. Thank you!   ", "id": "dmr6ine", "parent": "t1_dmr1obp", "vote": 1}], "link": "https://www.reddit.com/r/Python/comments/6yxogo/how_do_you_import_a_module_from_pyc_file/", "question": {"context": "[deleted]", "id": "6yxogo", "title": "How do you import a module from .pyc file?"}, "resource": "Reddit"}, {"answers": [{"content": "I've sworn to not touch that platform ever again in my life, so my ability to help is limited, but:\n\nDid you check whether any other .py files are in the plug-ins folder you were using? Were they set as being executable? (that's usually indicated by showing up with an x in the output of ls -l, or a check box in a file manager). \n\nIf so, then the plug-in you put there needs to have that as well.", "id": "fm3ml2m", "parent": "t3_fsn09b", "vote": 1}, {"content": "> Were they set as being executable? (that's usually indicated by showing up with an x in the output of ls -l, or a check box in a file manager).\n\nhonestly i'm not even sure what that means.\n\nyes they are in the same folder as other .py files, but most (if not all) other .py plugins do have a second file with the exact same name, but with a .pyx (or .pyc, dont remember) ending in it.", "id": "fm3oz89", "parent": "t1_fm3ml2m", "vote": 1}, {"content": ".pyc is the compiled bytecode for the corresponding plug-in. These files are created automatically by python itself when the plug-ins are run at least once.\n\nThe best approach would be to compare the details for a .py file that has a corresponding .pyc file, and the plug-in you added (assuming that it hasn't got one). If this is handled as on other unix-like platforms (of which macOS is one), then you'll find something about the file being executable there.", "id": "fm3qmw3", "parent": "t1_fm3oz89", "vote": 1}, {"content": "so i double clicked the py file and i believe a window popped up where something ran. but it didnt output a .pyc file?\n\nthe downlaod of the scripts only come with a py file, how do i get/create the corresponding pyc file? my understanding is that i need the pyc as well.", "id": "fm3ut5x", "parent": "t1_fm3qmw3", "vote": 1}, {"content": "> These files are created automatically by python itself when the plug-ins are run at least once.\n\nAFAIK the `.pyc` is produced when a Python module is imported, but the file with `__main__` doesn't get pre-compiled(\\*) and this applies to the Gimp python plug-ins.\n\n(\\*) possibly because the command remains the non-compiled version, so the pre-compiled version would never be used.", "id": "fm5k6c4", "parent": "t1_fm3qmw3", "vote": 1}, {"content": "Ah, sorry, no, that was totally not what I was trying to tell you. The .pyc files are generated automatically when the plug-in is run by GIMP, you do not have to find a way to download or create these files manually.\n\nThe fact that you got no such file for the new plug-in merely shows that it has indeed not be run yet - this rules out that it would be working in general, and just not show up in a menu, for example.", "id": "fm3uzcd", "parent": "t1_fm3ut5x", "vote": 1}, {"content": "aha! thats what i was looking for, for that extra menu entry from where you can use the filters.\n\nbut yeah, its in the folder were other .py and .pyc files are, but when i run gimp and refresh the scripts, it doesnt do anything. so they just dont work with that gimp version or what?\n\ni'm currently on gimp 2.10.14 which is the most current one for mac os.\n\nwhile we're at it... what program are you using? i tried krita but didnt like it because it doesnt have a history. i'm considering buying affinity, its also 50% off these days...", "id": "fm3vcxg", "parent": "t1_fm3uzcd", "vote": 1}, {"content": "I'm using a variety of GIMP versions - 2.10.18 from Debian Sid, and my own gimp-2-10 and master builds, on GNU/Linux and Microsoft Windows platforms.\n\nWhat you need to do is to change a really simple setting for the one file you added, and unfortunately I can't really help you with that, as I do not use the macOS platform. If you know how to use a terminal window, this should be similar to `chmod u+x` `foo.py`, with `foo.py` replaced by the actual file name of the plug-in.", "id": "fm3vrkk", "parent": "t1_fm3vcxg", "vote": 1}, {"content": "alright thanks... i'll try that later after work. \n\nbut honestly... this is a PITA to be honest - probably worth the 25 bucks affinity is asking for affinity photo right now xD\n\nno wonder people dont like using gimp :(", "id": "fm3y6av", "parent": "t1_fm3vrkk", "vote": 1}], "link": "https://www.reddit.com/r/GIMP/comments/fsn09b/how_to_install_python_scripts_on_mac_in_gimp_21014/", "question": {"context": "i downloaded the layer effects plugin, because god forbid a program like gimp has text effects built in lol\n\n&#x200B;\n\nanyway i tried to install it like that: i put it inside the gimp file by going into the package contents and moving the .py file in contents/resources/lib/gimp/2.0/plugins\n\n&#x200B;\n\ndoesnt work\n\n&#x200B;\n\nthe gimp preferences show another location as well:\n\n&#x200B;\n\n/Users/username/Library/Application Support/GIMP/2.10/plug-ins\n\n&#x200B;\n\nhowever there isnt even a Library folder in /username/\n\n&#x200B;\n\nhow the hell do i get this thing intalled? hell i was using text effects 15 years ago in adobe fireworks and they dont have that built into gimp... smh\n\n(yes i know its not comparable to fireworks... i'm just frustrated right now. maybe i should just buy affinity...)\n\n/edit: i now also found and installed the layerfx2.8.py, but no luck still getting it to work", "id": "fsn09b", "title": "how to install python scripts on mac in gimp 2.10.14?"}, "resource": "Reddit"}, {"answers": [{"content": "Yes, this is true for pretty much all file types ever.", "id": "cwlo4rg", "parent": "t3_3r7zp0", "vote": 112}, {"content": "Windows uses the file extension to determine what the filetype is, but Linux uses a different system for many files ([magic numbers](https://en.wikipedia.org/wiki/List_of_file_signatures)). Therefore it's very common in Linux to save python files without any extension at all.", "id": "cwlofei", "parent": "t3_3r7zp0", "vote": 32}, {"content": "If you really wanna have your mind blown, try changing a *.doc to *.zip", "id": "cwltyz7", "parent": "t3_3r7zp0", "vote": 9}, {"content": "My understanding of importing is that Python attaches py, pyc, and maybe a few other extensions as part of the default look up. But I could be wrong.", "id": "cwlsan2", "parent": "t3_3r7zp0", "vote": 7}, {"content": "However some IDEs, like Atom, need a .py extension to recognize it like a python script, even in a linux environment.", "id": "cwlpgq3", "parent": "t3_3r7zp0", "vote": 5}, {"content": "Need the .py extension for modules, but not programs.", "id": "cwmk66y", "parent": "t3_3r7zp0", "vote": 2}, {"content": "As a Linux user, I have found this out for all types of files. ", "id": "cwm3l38", "parent": "t3_3r7zp0", "vote": 1}, {"content": "I use this fairly regularly, I like, for example, having backups labeled stuff.backup so that if I break everything, I have a backup right there that I can revert to (or make a new, experimental copy from the last time the file was working well, I can do `cp stuff.backup stuff.py` I'm not sure if this is the best way to keep backups, but it works nicely for my little projects. ", "id": "cwmdx1d", "parent": "t3_3r7zp0", "vote": 1}, {"content": "Would it run in pycharm without the .py?", "id": "cwmhdpf", "parent": "t3_3r7zp0", "vote": 1}, {"content": "i used .py3 extension for python 3 when it was not as popular yet.", "id": "cwmproa", "parent": "t3_3r7zp0", "vote": 1}, {"content": "Yes, mostly true, although the type codes in old Apple file resource forks BNDLed by the Desktop beg to differ. ;-)\n", "id": "cwm1e1h", "parent": "t1_cwlo4rg", "vote": 3}, {"content": "wut\n\nthen why does changing a filetype suddenly make it not work with programs that are supposed to run it?", "id": "cwlwppe", "parent": "t1_cwlo4rg", "vote": -7}, {"content": "The most common way on Linux is using a [Shared MIME-info Database](http://standards.freedesktop.org/shared-mime-info-spec/latest/).\n\nFor executables usually a [Shebang](https://en.wikipedia.org/wiki/Shebang_%28Unix%29) is used so there's no need to determine the file type.", "id": "cwlpjlm", "parent": "t1_cwlofei", "vote": 11}, {"content": "> Therefore it's very common in Linux to save python files without any extension at all.\n\nTo expand on your point a bit, in Linux, a file without an extension is generally expected to be an executable. The idea being that the user has no need to know what format it is in, binary, Python script, etc. This has the advantage of being able to change things under-the-hood, e.g. reimplementing a shell script as a Python program, without affecting the user at all.\n\nWhen working with text-based executable files (i.e. scripts), the [shebang](https://en.wikipedia.org/wiki/Shebang_\\(Unix\\)) (#!) line tells the OS where to find the interpreter to run the program. So, when you put \n\n    #!/usr/bin/python\n\nat the start of your Python scripts you are telling the system to run it using the \"python\" program found in the /usr/bin directory.", "id": "cwlq8de", "parent": "t1_cwlofei", "vote": 18}, {"content": "Mind most certainly blown.", "id": "cwm89j9", "parent": "t1_cwltyz7", "vote": 1}, {"content": "There's a lot of file types that are either zip or tar or iso, or some other file system-like format. Video games are notable for storing models and images this way, VMware's ova file type,  Apple's dmg, etc. If you see an img, vmdk, or another virtual machine file format, then that's, literally, a file system in a file.", "id": "cwmjysx", "parent": "t1_cwltyz7", "vote": 1}, {"content": "You mean changing a Word file in zip file? ", "id": "cwlu8oe", "parent": "t1_cwltyz7", "vote": 0}, {"content": "This is an important distinction, because in fact Python does rely on the .py extensions. Yes, you can *run* any file without a Python extension, but you won't be able to use the `import` statement with such files. If you want to import a non .py file, [you'll need a bit of extra code](http://stackoverflow.com/questions/2601047/import-a-python-module-without-the-py-extension).", "id": "cwlw1f2", "parent": "t1_cwlsan2", "vote": 13}, {"content": "I believe this is true.", "id": "cwlvufp", "parent": "t1_cwlsan2", "vote": 1}, {"content": "But that's because you want to run it from the IDE. Nothing to do with OS. If you run it from a terminal, it should be cool. ", "id": "cwlpudg", "parent": "t1_cwlpgq3", "vote": 9}, {"content": "Git's probably the best for backups", "id": "cwmrcem", "parent": "t1_cwmdx1d", "vote": 3}, {"content": "Well say you change a .mp4 file to .txt when you try to open it the computer will think you want to use a text editor and thus the file will not function as intended but if you go and open that txt file in a media player it should function like normal. Extensions are used to tell the computer what program needs to be used to run this file.", "id": "cwlx1ju", "parent": "t1_cwlwppe", "vote": 34}, {"content": "In case this is a serious question, I'll give a serious answer. \n\nWindows, rather MS-DOS. Although the notion may be older, but that's where myself and most people first encounter the idea of a file extension.\n\n The full answer is more nuanced than that. Most file types have some sort of header out unique data structure that identifies it's type. With a script that will be something to the effect of `/usr/bin/env something` either sh, bash, ruby, python, etc. With data file types you could run a command like `xxd some_file` will give you hex dump of the file so you can inspect the binary data in a more readable form. If you were to take the first kilobyte of several thousand file types, then you start a database of file types and be able to identify the contents of the file in a more practical way than the file's name. If you did that and put your knowledge into a program you would have the program now called `file`.", "id": "cwmjl29", "parent": "t1_cwlwppe", "vote": 2}, {"content": "Don't hard code python \n\n`#!/usr/bin/env python`\n\nNow will work regardless of where your python is, including virtualenv and pyenv ", "id": "cwlzo3h", "parent": "t1_cwlq8de", "vote": 22}, {"content": "What does this all mean in Windows environment?", "id": "cwlucqw", "parent": "t1_cwlq8de", "vote": 2}, {"content": "Thanks for this information! ", "id": "cwlrjtj", "parent": "t1_cwlq8de", "vote": 1}, {"content": "> in Linux, a file without an extension is generally expected to be an executable. \n\nThat's not 100% true. In Linux (and other Unix/Unix-like OSes like Mac OS X), a file is executable iff it has the 'execute' permission set. A file without an extension that isn't flagged as executable is just a file.\n\nYou can set the execute permission by running `chmod +x yourfile`, and see which files have it set by running `ls -l` and looking for `x` in the permissions field at the far left.", "id": "cwm8yjc", "parent": "t1_cwlq8de", "vote": 1}, {"content": "Renaming .dmg to .iso in Windows is a godsend.", "id": "cwmudbr", "parent": "t1_cwmjysx", "vote": 1}, {"content": "I mean just change the extension to zip and open the file (archive) and see what happens. \n\nAlso, I think it needs to be *.docx, not *.doc", "id": "cwlvl7y", "parent": "t1_cwlu8oe", "vote": 12}, {"content": "[deleted]", "id": "cwlydei", "parent": "t1_cwlvufp", "vote": -1}, {"content": "He might mean so it can perform proper syntax highlighting as well.", "id": "cwlt60b", "parent": "t1_cwlpudg", "vote": 4}, {"content": "You're right, in fact just now I check that and it works in Atom without the .py extension. Possibly I was remembering an old version in which I had problems without the .py extension. Now with #! /usr/bin/python line is enough. \n\nEven the file manager Dolphin recognize the python script without the .py haha\n\nAnd of course, it works from a terminal.", "id": "cwm14sm", "parent": "t1_cwlpudg", "vote": 1}, {"content": "[deleted]", "id": "cwm8klq", "parent": "t1_cwlx1ju", "vote": -2}, {"content": "Then extensions do matter, especially if you want to be able to click and run a file directly.", "id": "cwlxq0y", "parent": "t1_cwlx1ju", "vote": -19}, {"content": "Exactly, which is why they are incredibly important as part of the modern user experience. If you distribute a .mp4 that was changed to .txt, a lot of people are going to have problems, especially those who don't know what file extensions are.\n\nCalling file extensions a \"mere convenience\" sounds condescending.", "id": "cwmbvwa", "parent": "t1_cwlx1ju", "vote": -4}, {"content": "That's great and all, but I was talking about the end user experience. For the vast majority of people who aren't programmers, file extensions make running, sorting, and organizing files a lot easier.", "id": "cwmtkz5", "parent": "t1_cwmjl29", "vote": 2}, {"content": "Windows does not know how to interpret a Shebang so it relies entirely on the file extension. Having a shebang as the 1st line of a python file will not break the file in windows as it is ignored by python all together.", "id": "cwlw6tx", "parent": "t1_cwlucqw", "vote": 4}, {"content": "Unfortunately, I know just enough about working in a Windows environment to know that most of what I said above doesn't apply, but not enough to know how it works. Hopefully someone else will come along who can explain it to both of us ;-)", "id": "cwlvqce", "parent": "t1_cwlucqw", "vote": 5}, {"content": "Have you tried executing a python script from within windows with no file type? I would assume it wouldn't work since windows works by file type association, which requires a file type extension to determine the program it needs to execute.", "id": "cwlw7kq", "parent": "t1_cwlucqw", "vote": 1}, {"content": "For Python 3.3 and later, Windows has a limited understanding that helps it parse the more common shebang lines.\n\nhttps://docs.python.org/3/using/windows.html#python-launcher-for-windows", "id": "cwmplsq", "parent": "t1_cwlucqw", "vote": 1}, {"content": "Yes, you are correct. Making a file executable has nothing to do with it's extension and everything to do with setting file permissions. What I should have said is that by convention, executable programs do not have an extension. ", "id": "cwmunf8", "parent": "t1_cwm8yjc", "vote": 1}, {"content": "it opens?", "id": "cwlxlgv", "parent": "t1_cwlvl7y", "vote": 0}, {"content": "Talking about making a module for importing though.  You can't have `__init__.txt` or something.", "id": "cwm1qq0", "parent": "t1_cwlydei", "vote": 1}, {"content": "It's the *installer* that tells Windows to assume .py & .pyw are Python code, .pyc & .pyo are compiled Python, etc. Yes, the *interpreter* just tries to run whatever file you hand it on the command line. When you tell the Python interpreter to *import* a module, though, it does look for files with suitable extensions. For example, if importing can't find a .pyc file with the right name, it will look for a .py file and try to compile it.\n", "id": "cwm20gj", "parent": "t1_cwlydei", "vote": 1}, {"content": "Just about every IDE/text editor I've ever used lets me manually specify a language for syntax highlighting. I don't use Atom, but it looks like that control is in the lower right corner.", "id": "cwlxb3t", "parent": "t1_cwlt60b", "vote": 3}, {"content": "That's the only reason I keep all the .sh and .py in my executables. I want the pretty colors in vim.", "id": "cwlxdse", "parent": "t1_cwlt60b", "vote": 1}, {"content": "Ah the legendary file.txt.mp4", "id": "cwmhcmk", "parent": "t1_cwm8klq", "vote": 7}, {"content": "You probably need to tell Windows to display file extensions, otherwise you're only given access to the name. It likely became file.txt.mp4\n", "id": "cwmmj2k", "parent": "t1_cwm8klq", "vote": 2}, {"content": "Depends on the OS.", "id": "cwly9qg", "parent": "t1_cwlxq0y", "vote": 15}, {"content": "Which is basically a convenience. As markus wrote, this is true for pretty much all file types ever.", "id": "cwlzqm3", "parent": "t1_cwlxq0y", "vote": 10}, {"content": "On Windows, the file extension is the only information the OS has on what the file is. Under Linux, a lot of programs inspect the first line of a file for something called a shebang, which tells it how to deal with it. This is mainly useful for writing scripts in different programming languages. ", "id": "cwlzhtz", "parent": "t1_cwlxq0y", "vote": 19}, {"content": "Mac OS (i.e. pre-Mac OS X) didn't have file extensions and didn't need them. As someone else mentioned, the information about what app created a file and so on was embedded either in the file or in the filesystem, so there was no need for extensions.\n\nAs far as Python goes, \"explicit is better than implicit\" so maybe explicit, correct file extensions are a good idea. In general, I don't see how anyone can argue that necessitating a correct file extension is a better user experience than just automagically being able to open files correctly.\n\nAnd at any rate, what you said earlier here:\n\n>then why does changing a filetype suddenly make it not work with programs that are supposed to run it?\n\nis patently false.", "id": "cwmo7qv", "parent": "t1_cwmbvwa", "vote": 2}, {"content": "Your OS is smart enough to read the filename, it's smart enough to read the first X bytes. The cases that isn't true are fairly rare, such as looking through a list of files over the internet. In that case you're dependent on the protocol and the server. \n\nMost HTTP servers report the files MIME type based on the file content (not extension) and allow partial downloads and resume (so your browser and OS can verify the file type).\n\nIn the case of a malicious server trying to distribute viruses, it's far more difficult to fake an executable if it's data looks like a jpeg or an mp3. Changing a file extension or stacking extensions to confuse people us relatively easy.\n\nBut, you're right that extensions give you nice contextual clues when you are the only information you have is the filename.", "id": "cwmyl34", "parent": "t1_cwmtkz5", "vote": 1}, {"content": "Not entirely true.  Trying to run it directly from the command line will tell you that your script \"is not recognized as an internal or external command\" but prepending with \"python\" will execute just fine.  When you tell Windows to use Python, it doesn't have to rely on the file type extension to figure out which program to use to launch it.\n\nA little bit analogous to how your `.bat` file will typically be executed directly but if you throw a `notepad ` in front of it then you tell Windows to use Notepad instead of whatever it would usually try to use to run it.", "id": "cwlzvev", "parent": "t1_cwlw7kq", "vote": 4}, {"content": "*.docx files are implemented as ZIP archives containing XML files and stuff. Renaming the file to *.zip will make windows interpret it as a ZIP archive so you can see (and modify) the XML files that Word and other Office products use internally.", "id": "cwlyh8o", "parent": "t1_cwlxlgv", "vote": 9}, {"content": "Yeah but that's effort. ", "id": "cwmtgms", "parent": "t1_cwlxb3t", "vote": 1}, {"content": "My vim recognizes it if there is a shebang present?\n\nThe following will be highlighted, even without a .py extension:\n\n\n    \u001b#!/usr/bin/env python\n    \n    def getRandomNumber():\n        return 4\n    \n\n", "id": "cwm7niu", "parent": "t1_cwlxdse", "vote": 2}, {"content": "But I don't have windows... Got something else. It's the one with the penguin... \n\nYes on Linux even a video file named video.txt is recognized as a video file. File extensions are only significant for text based formats (unless you have a shebang).", "id": "cwmrk61", "parent": "t1_cwmmj2k", "vote": 2}, {"content": "Being able to click and open a file directly is a pretty important part of the user experience in 2015, not just a convenience. In fact, a lot of people who aren't programmers aren't going to know if they need to change a file extension, or what that even means.", "id": "cwm6mqk", "parent": "t1_cwlzqm3", "vote": -14}, {"content": "It matters to the end user, which was my whole point. As a non-programmer entering the world of programming, when I double click a file that doesn't have an extension, Windows doesn't know what to do with it. Extensions also makes organizing and sorting files easier.", "id": "cwmta9m", "parent": "t1_cwmo7qv", "vote": 0}, {"content": "If you haven't noticed, I'm a beginner here. I appreciate the response, though. Maybe in a couple of months I'll be able to come back to this post and actually understand it!\n\n> But, you're right that extensions give you nice contextual clues when you are the only information you have is the filename.\n\nThat's what I'm talking about. The end user, not the programmer who knows what MIME and protocols and whatnot mean. AKA 99.9999% of computer users.", "id": "cwmzn9m", "parent": "t1_cwmyl34", "vote": 2}, {"content": "[EPUB](https://en.wikipedia.org/wiki/EPUB) e-books are also ZIP files.\n", "id": "cwm2j2y", "parent": "t1_cwlyh8o", "vote": 3}, {"content": "Holy crap I didn't notice that before. It's been a very long time since I loaded a file without extension so I don't know how long this feature has been around. Thanks for letting me know.\n\n(EDIT) Seems to work well for shell, perl, php, and python scripts.", "id": "cwm86bf", "parent": "t1_cwm7niu", "vote": 1}, {"content": "This is /r/learnpython, the context for this conversation is oriented around programming. You're coming off as pedantic dude. \n\nYou're right about it being important UX for a user with limited knowledge, but within the scope of this subreddit, it doesn't affect Python.", "id": "cwmazot", "parent": "t1_cwm6mqk", "vote": 5}, {"content": "No worries. It's fun to have the 'truths' you know challenged and force yourself to actually internalize those ideas and get a glimpse as to how we got to today. I think that in our thread we are challenging each other and I find it to be a healthy test.\n\nBased on the down votes on your other comments, it looks like you may have antagonized some people. I haven't read those comments, so I won't judge. I find that /r/learnpython is a fairly safe sub-reddit, but people can still be pushed and reputations can be tarnished.\n\nAgain, I'm not judging. Especially because I can be quite inflammatory in other, mostly sports related, subs. I just want to make sure you, and in-all-likelihood the others that have been down voting you, aren't burning the good will of others.\n\nAnyway. You have nothing but up votes from me. Thanks.", "id": "cwn0cv5", "parent": "t1_cwmzn9m", "vote": 1}], "link": "https://www.reddit.com/r/learnpython/comments/3r7zp0/til_that_py_extension_is_merely_a/", "question": {"context": "At least I wasn't aware of it and I always thought it is necessary to save program as .py file. We save our Python programs in files with file extension .py. Actually you can chose whatever extension you wish and Python would still run it. For example you can save your program as example.txt or example.xxx, you can still run the program through command line interface.", "id": "3r7zp0", "title": "TIL that .py extension is merely a convention/convenience rather than a requirement."}, "resource": "Reddit"}, {"answers": [{"content": "[deleted]", "id": "flw0qwu", "parent": "t3_fritbi", "vote": 16}, {"content": "There are lots of comments saying to use pyinstaller, but none of them explain what it is.\n\nComputer cannot understand the code that you write, they cannot understand python. Python is like a real language, that is only used for instructions, and computers cannot understand languages. Your computer sees your pythoncode.py as a simple text document, it can search for letters and words, but it cannot understand it.\n\nFor a computer to understand your code, you need an interpreter, when you install python on your computer, it is an interpreter. What it does is take the .py file, and it \u201ctranslates\u201d it into machine code. A computer can understand machine code, because that is what it is designed for.\n\nA .exe or a Linux or macos binary is made of machine code, and the computer can understand it natively, without an interpreter. But this also means that if you want to run a windows application natively on Linux, you can\u2019t. Same if you want to run a Linux application on macos (mostly).\n\nTo make an exe, or a binary, you must compile the code, or interpret the code, but instead of running it, put it into a .exe file. This is what pyinstaller does, it compiles a python file, and translates it into machine code. \n\nSo to answer your question. No, you either must have python installed on each computer you want to run your script on, or you can compile it for one OS, and only run it on that OS.", "id": "flwgfmm", "parent": "t3_fritbi", "vote": 20}, {"content": "The target computer will have to have some type of Python interpreter running on it to execute your code, along with copies of any libraries your code requires. \n\nThere are solutions for packaging an entire Python environment and your code into a single executable, such as pyinstaller and nuitka.", "id": "flw1q72", "parent": "t3_fritbi", "vote": 10}, {"content": "[deleted]", "id": "flw12gi", "parent": "t3_fritbi", "vote": 2}, {"content": "I used pyinstaller test package it on windows yesterday, since I'm writing it on osx.\n\nBut of course the computer I packaged it on had python installed, so if I package it with pyinstaller on a windows computer, then put the program on another windows computer that doesn't have python installed, will it work without having to download python?", "id": "flw1wj5", "parent": "t1_flw0qwu", "vote": 7}, {"content": "Wow this is exactly what I needed!!", "id": "flxa6hl", "parent": "t1_flw0qwu", "vote": 1}, {"content": "So if I package it using pyinstaller, I won't need anything extra on the target computer, only the executable?", "id": "flw21yw", "parent": "t1_flw1q72", "vote": 2}, {"content": "See the other comments here about pyinstaller", "id": "flwqo6c", "parent": "t1_flw12gi", "vote": 1}, {"content": "Yep. In fact, it can all be combined into a single executable with pyinstaller's \"--onefile\" option. (You probably want \"--windowed\" as well.) If you want to put that executable into an installer package with your clickable desktop icon, then look at [NSIS](https://nsis.sourceforge.io/Main_Page).", "id": "flwnz52", "parent": "t1_flw1wj5", "vote": 2}, {"content": "Pyinstaller literally just bundles Python with your script. Read more of the pyinstaller docs, it explains all of this.", "id": "flw5jkz", "parent": "t1_flw1wj5", "vote": 1}, {"content": "If you get everything for pyinstaller set up correctly, running the .exe it generates will extract the entire python environment necessary for the code to execute, so the target user won't need anything extra.", "id": "flw26ps", "parent": "t1_flw21yw", "vote": 9}], "link": "https://www.reddit.com/r/learnpython/comments/fritbi/when_sending_program_to_another_computer_does_the/", "question": {"context": "I've been working on a program to use at my job, and I'm getting ready to package it so I can send it to my job for us to start using.\n\nMy question is, after I've packaged it and everything is good to go, if the computer I'm putting it on at work doesn't have python installed will it still run?\n\nLike I plan on having it so its just a clickable icon just like any normal program on a computer.", "id": "fritbi", "title": "When sending program to another computer, does the other computer need python downloaded for it to work?"}, "resource": "Reddit"}, {"answers": [{"content": "I personally prefer to show them, since they are indeed here, but to keep them in low contrast through dircolors...", "id": "c4f73av", "parent": "t3_smh8b", "vote": 14}, {"content": "TIL about --group-directories-first. Good post!", "id": "c4f8llf", "parent": "t3_smh8b", "vote": 4}, {"content": "export PYTHONDONTWRITEBYTECODE=1", "id": "c4f92gl", "parent": "t3_smh8b", "vote": 4}, {"content": "What's the goal in preventing .pyc? Directory clutter?", "id": "c4fb245", "parent": "t3_smh8b", "vote": 2}, {"content": "Not required in Python3, since .pyc files are stored in a special directory: ./\\_\\_pycache\\_\\_/", "id": "c4fc8ed", "parent": "t3_smh8b", "vote": 2}, {"content": "Maybe, not sure why use ls here.\nInstead, you can use a VCS which let you ignore stuff easily (.hgignore/.gitignore), and run status command, not ls.", "id": "c4f6v7o", "parent": "t3_smh8b", "vote": 2}, {"content": "It seems doesn't work on BSD ls. At least the Mac OS X users at bay.", "id": "c4f80sn", "parent": "t3_smh8b", "vote": 1}, {"content": "What would be more useful would be the ability to hide them from autocomplete so when I type `vim myfile` and hit Tab, the terminal doesn't beep.", "id": "c4f8h79", "parent": "t3_smh8b", "vote": 1}, {"content": "my favorite way:\n\n    rm *.pyc\n\n:P", "id": "c4fbech", "parent": "t3_smh8b", "vote": 1}, {"content": "    export LS_IGNORE=*.pyc", "id": "c4fm5ri", "parent": "t3_smh8b", "vote": 1}, {"content": "Interesting. How do you actually set a color with dircolors? The documentation doesn't seem to say.", "id": "c4f7d3i", "parent": "t1_c4f73av", "vote": 1}, {"content": "same here o_o \n\nthis has promted me to finnaly get around to going though the ls man page xD", "id": "c4g12hl", "parent": "t1_c4f8llf", "vote": 1}, {"content": "Which is \"New in version 2.6\" unfortunately. I'm stuck with an embedded 2.5.1 for now.", "id": "c4f94fl", "parent": "t1_c4f92gl", "vote": 3}, {"content": "We should say that if you're running a program regularly that imports a lot of modules, that setting will slow it down. The speedup is why .pyc files exist in the first place.", "id": "c4fdi05", "parent": "t1_c4f92gl", "vote": 2}, {"content": "Yep. I thought we were all on board with this, but I guess not. I just find it hard to look through a list with them scattered all through what I actually want to see.", "id": "c4fh53u", "parent": "t1_c4fb245", "vote": 1}, {"content": "3.2 onwards, to be precise.", "id": "c4fdixk", "parent": "t1_c4fc8ed", "vote": 2}, {"content": "Editing your .gitignore for .pyc files is a good habit to get into.", "id": "c4f9khv", "parent": "t1_c4f6v7o", "vote": 2}, {"content": "[deleted]", "id": "c4f8hn7", "parent": "t1_c4f6v7o", "vote": 4}, {"content": "Well,\n\n    len('status') > len('ls')\n    >>> True", "id": "c4f6wp6", "parent": "t1_c4f6v7o", "vote": 0}, {"content": "i'm on 10.7.3 and --color=auto isn't an option, neither is --hide", "id": "c4faog0", "parent": "t1_c4f80sn", "vote": 1}, {"content": "if you install bash it should work. ", "id": "c4fh0ym", "parent": "t1_c4f80sn", "vote": 1}, {"content": "Add this to your bashrc to ignore pyc files with autocomplete\n\n    export FIGNORE=$FIGNORE:.pyc", "id": "c4fglj0", "parent": "t1_c4f8h79", "vote": 1}, {"content": "That's one of my least favorite ways, because they all immediately come back when I import or reload something that drags in the rest of the library. Also, it's dangerous to be typing that. I might accidentally hit enter before the c drops. I would be typing that all day long. Now listings just sensibly hide the files I don't want to see.", "id": "c4fhe5p", "parent": "t1_c4fbech", "vote": 2}, {"content": "I just edit my `~/.dir_colors` [coming from https://github.com/huyz/dircolors-solarized] and add a line like:\n\n    .pyc        01;33\n\n", "id": "c4f7eex", "parent": "t1_c4f7d3i", "vote": 7}, {"content": "You can install a third party ~/.dircolors file from a number of websites.\n\nIf you want to take the default and modify that, you can:\n\n    dircolors --print-database > ~/.dircolors\n\nMake changes to that as needed, it should be pretty well-commented.\n\nThen verify that something like this is called during shell startup (it's in my ~/.bashrc on Debian \"squeeze\"):\n\n    eval \"$(dircolors -b ~/.dircolors)\"\n\n...and:\n\n    alias ls='ls --color=auto'\n\n", "id": "c4f7t5q", "parent": "t1_c4f7d3i", "vote": 7}, {"content": "Ouch sorry to hear that.", "id": "c4f9dg6", "parent": "t1_c4f94fl", "vote": 1}, {"content": "Yeah, I have about 15-20 library modules that come in with what I'm doing.", "id": "c4fhehq", "parent": "t1_c4fdi05", "vote": 1}, {"content": "I will never be able to move to 3 anything :(", "id": "c4fh7t1", "parent": "t1_c4fdixk", "vote": 1}, {"content": "There's `git ls-files`, but that shows a recursive listing.", "id": "c4f8sc7", "parent": "t1_c4f8hn7", "vote": 2}, {"content": "[deleted]", "id": "c4f6xga", "parent": "t1_c4f6wp6", "vote": 2}, {"content": "OS X uses `-G` instead of `--color=auto` to display colors. Don't know about a replacement for `--hide` though.", "id": "c4fb4e0", "parent": "t1_c4faog0", "vote": 1}, {"content": "I figured there'd be a way to do this. Thanks.", "id": "c4fhes4", "parent": "t1_c4fglj0", "vote": 1}, {"content": "Because it goes much further than just using a VCS to look at files on your *filesystem*. Git status has nothing to do with listing files anyway, it lists the status of files in the context of your working tree vs. index, using it to list files is totally not what it's for, but you know what is for *listing files*? `ls`.", "id": "c4f711o", "parent": "t1_c4f6xga", "vote": 2}, {"content": "Yes. I find them incredibly distracting to wade through when looking at a listing of say, 30+ files.", "id": "c4f78kl", "parent": "t1_c4f6xga", "vote": 1}, {"content": "BSD ls in general uses -G.", "id": "c4fdpvw", "parent": "t1_c4fb4e0", "vote": 1}, {"content": "Hence the \"not sure why [you] use ls here\". I was just reflecting on the fact that I use python on unix systems and never had to deal with this. And the reason is I never list python files except in the context of a working dir so...", "id": "c4f7300", "parent": "t1_c4f711o", "vote": -1}, {"content": "You've *never* ls'd in a working dir?", "id": "c4f73qk", "parent": "t1_c4f7300", "vote": 0}, {"content": "[deleted]", "id": "c4f77q2", "parent": "t1_c4f73qk", "vote": -2}, {"content": "Yes I do, but it is not part of my workflow. My initial comment was a gut reaction about something I did not find terribly useful, I should have asked \"why are you using ls for?\" to begin with.\n\nAlso, to be useful in my case, the alias should be extended with --hide=*~ --hide=*.o --hide=*.rej --hide=*.orig --hide=*.so and so forth.\n\nAnd then I would get something a bit similar to \"hg st -mardc .\". But who cares, we apparently both know how to use these things (yay man ls), I was more interested in the OP reasons.\n\nEdit: this was more \"hg st -mardc .\", not \"hg st -mard .\"", "id": "c4fa02f", "parent": "t1_c4f73qk", "vote": 0}, {"content": "Wut? \n\nYou're giving really stupid black&white advice. I called you out on it.", "id": "c4f78nc", "parent": "t1_c4f77q2", "vote": -2}, {"content": "[deleted]", "id": "c4f78wv", "parent": "t1_c4f78nc", "vote": 0}, {"content": "Ahh, you weren't the person I was replying to. Oh well, the point stands. Using a `git status` in place of an `ls` is just bad advice. The two are completely different things.", "id": "c4f7ayp", "parent": "t1_c4f78wv", "vote": -4}], "link": "https://www.reddit.com/r/Python/comments/smh8b/a_simple_way_to_hide_pyc_files_in_a_linux_terminal/", "question": {"context": "There are pythonic ways around this, as in 2.6+ where you can turn off creation of bytecode with an environment variable, and in 3+, where you can redirect pyc files to a specified directory, but here's another option:\n\n    alias ls='ls --hide=*.pyc'\n\nThrowing in the `-a` flag shows them again, as with other hidden files:\n\n    ls -a\n\nMy full ls alias:\n\n    alias ls='ls --color=auto --group-directories-first --hide=*.pyc'", "id": "smh8b", "title": "A simple way to hide *.pyc files in a linux terminal"}, "resource": "Reddit"}, {"answers": [{"content": "Just to check, you are aware that you can distribute Python applications without distributing the source, by just generating and distributing `.pyc` files? A skilled reverse engineer will still be able to make sense of it, but it's more obfuscated than this, and it works with all code.", "id": "h6xxb0s", "parent": "t3_otlv83", "vote": 6}, {"content": "Nice, but you can't work with formal grammar like with simple text. You need to use [ast module](https://docs.python.org/3/library/ast.html).\n\n    \u276f cat t.py \n    class Hello:\n        foo: str = 'boo'\n    \n    a = 12\n\nExample:\n\n    >>> with open('t.py') as f:\n    ...     module_data = f.read()\n    ... \n    \n    >>> import ast\n    \n    >>> parsed = ast.parse(module_data)\n    \n    >>> parsed.body\n    [<_ast.ClassDef at 0x7fbb0edd4fd0>, <_ast.Assign at 0x7fbb0ef230d0>]\n    \n    >>> parsed.body[0].name\n    'Hello'\n    \n    >>> parsed.body[1].targets[0].id\n    'a'\n    \n\n[https://tobiaskohn.ch/index.php/2018/07/30/transformations-in-python/](https://tobiaskohn.ch/index.php/2018/07/30/transformations-in-python/)", "id": "h727wri", "parent": "t3_otlv83", "vote": 4}, {"content": "Is there a way to obfuscate the characters ? For example if the application queries a specific ip address how can I hide the numbers in the address?", "id": "h6wumvb", "parent": "t3_otlv83", "vote": 2}, {"content": "I think for this to be really useful you would need to properly parse the Python file, mangle the names, then rebuild a new Python file.\n\nUnless I am misunderstanding, you could currently input a valid Python file, and the obfuscated result might not work properly if you are using a valid Python feature that the obfuscator doesn't support? That would limit its use in a lot of cases.", "id": "h6xv4aa", "parent": "t3_otlv83", "vote": 2}, {"content": "Aye! This script came from watching deobfuscating malware by John Hammond on YouTube and I asked myself if I could write smthg like I posted above.", "id": "h6y011p", "parent": "t1_h6xxb0s", "vote": 2}, {"content": "This completely changes the approach, I love it and I didn't even know this existed.", "id": "h72fqnh", "parent": "t1_h727wri", "vote": 1}, {"content": "My first guess would to be to encode it in base64 or binary and then run another interpreter of python inside the script (didn't know its possile haha). Found a video I will be basing this off: [https://www.youtube.com/watch?v=4o4qUUTRxFM](https://www.youtube.com/watch?v=4o4qUUTRxFM)\n\nYou could also do some chaos like e.g.\n\n    ip = '192.169.0.1'\n    JdhASz = 'LIODDJASKjIASJIAJSIGHSUGHOI1hsojasihgsahgusadIUhgAHghousagsagsagashgsaguasg'\n    obfuscated_ip = [x for x in JdhASz if x.isnumeric() == True]\n    print(obfuscated_ip)\n\n&#x200B;\n\n&#x200B;\n\n    and so on, so on until all symbols are made less readable", "id": "h6xsl9q", "parent": "t1_h6wumvb", "vote": 1}], "link": "https://www.reddit.com/r/Python/comments/otlv83/obfuscating_py_files/", "question": {"context": "Hi!\n\nI had a bright idea to create a script that will allow me to obfuscate my Python code by modifying existing .py scripts by randomizing functions and variables inside.\n\nIt works by analyzing every line of a supplied file and catching function names (by searching for 'def' tags) and variables by simply searching for '=' signs. It would be amazing to play around with some hex/binary or Base64 manipulation in the future.\n\nIt will definitely fail with scripts that include type hinting (it is kinda hardcoded for now so \":\" sign will break it) and many other features are missing e.g. obfuscating loops, if statements or ignoring strings inside quotes that happen to have the same name as a variable or function.\n\nI have some more ideas to improve and evolve this but criticism is very much welcomed!\n\n[https://github.com/dixone23/PyObfuscator](https://github.com/dixone23/PyObfuscator)", "id": "otlv83", "title": "Obfuscating .py files!"}, "resource": "Reddit"}, {"answers": [{"content": "[deleted]", "id": "i5f9uku", "parent": "t3_u7k1wu", "vote": 3}, {"content": "What exactly went wrong with \"most methods\"?", "id": "i5f6ba1", "parent": "t3_u7k1wu", "vote": 2}, {"content": "try https://pylingual.io", "id": "k7fc2ez", "parent": "t3_u7k1wu", "vote": 2}, {"content": "From a quick Google search: https://github.com/zrax/pycdc\n\nHas been reported to work with 3.10", "id": "i5ff1ii", "parent": "t3_u7k1wu", "vote": 2}, {"content": "Learning moment to everyone out there: learning to use git and github is worth the hassle folks. It organizes your workflow, and it helps you re-access sources in case something happens locally.\n\nGenerally, compiled executables are not decompilable beyond basic stuff. You'll also probably spend so much time debugging that it'll make you wonder whether it's better to rewrite the program from scratch.\n\nYour source code is the valuable part, not a compiled executable. If you have the source somewhere, anywhere, you can remake your program.", "id": "i5gzk61", "parent": "t3_u7k1wu", "vote": 1}, {"content": "[https://www.youtube.com/watch?v=J\\_vzY2P\\_ALE&ab\\_channel=marnocell](https://www.youtube.com/watch?v=J_vzY2P_ALE&ab_channel=marnocell)\n\nthis video solved your problem.", "id": "iki06et", "parent": "t3_u7k1wu", "vote": 1}, {"content": "I lost my src but I had the exe made in pyinstaller", "id": "i5fa0dh", "parent": "t1_i5f9uku", "vote": 5}, {"content": "Most of them say it can\u2019t do python 3.10.4", "id": "i5f6e6s", "parent": "t1_i5f6ba1", "vote": 2}, {"content": "How to reach the officials of this site?", "id": "k8l8e0o", "parent": "t1_k7fc2ez", "vote": 1}, {"content": "Worked perfectly for me, got nearly the same source code that I had.\n\n\\[EDIT\\]: It was very easy to compile on linux:\n```bash\ngit clone https://github.com/zrax/pycdc.git\ncd pycdc\ncmake CMakeLists.txt\nmake\n```\nDropped me two executables, `pycdc` (returns the source code) and `pycdas` (returns some other form of disassembly that I don't understand).", "id": "jav92wz", "parent": "t1_i5ff1ii", "vote": 2}, {"content": "But its very hard to compile on Windows and build instructions are unclear", "id": "ivqtcmg", "parent": "t1_i5ff1ii", "vote": 1}, {"content": "Does not support JUMP\\_IF\\_NOT\\_EXC\\_MATCH in python 3.9 code.", "id": "jgsownp", "parent": "t1_i5ff1ii", "vote": 1}, {"content": "Last I checked, even 3.9 was hard to decompile. The bytecode changes across versions, so the decompilers need to be updated constantly.", "id": "i5f7lyj", "parent": "t1_i5f6e6s", "vote": 3}, {"content": "It works for me! I am so grateful for the authors of \\`pycdc\\` and your detailed answer!\n\nMy precious scripts are now back! \n\nI do need to reform them a little bit, but they are there!", "id": "jrbo7zb", "parent": "t1_jav92wz", "vote": 1}, {"content": "And also failed to decompile my rather simple code :(", "id": "iwr648p", "parent": "t1_ivqtcmg", "vote": 1}, {"content": "looking for fix to this also please let me know if u find anything", "id": "jira9wh", "parent": "t1_jgsownp", "vote": 1}, {"content": "So it there no way to do it?", "id": "i5f7rpc", "parent": "t1_i5f7lyj", "vote": 1}, {"content": "Well, I mean, you could write a decompiler yourself or fork an existing one and update it. That would require in-depth knowledge of the bytecode though.\n\nThe last time I tried to decompile new-ish Python, I was helping someone, and I think they were on either 3.8 or 3.9. I hit a few dead ends because of version issues.", "id": "i5f8itr", "parent": "t1_i5f7rpc", "vote": 4}], "link": "https://www.reddit.com/r/learnpython/comments/u7k1wu/how_would_i_decompile_a_pyc_file_on_python_3104/", "question": {"context": "I have tried most methods but none have worked", "id": "u7k1wu", "title": "How would I decompile a pyc file on python 3.10.4?"}, "resource": "Reddit"}, {"answers": [{"content": "I recall someone at devsummit complained about this during their session, I just don't remember which session or what their fix was. Sorry but those videos are up on the esri media space page for devsummit so maybe look through those?", "id": "jhof54o", "parent": "t3_12yf2sh", "vote": 2}], "link": "https://www.reddit.com/r/ArcGIS/comments/12yf2sh/arcpro_runs_cached_versions_of_imported_module_py/", "question": {"context": "As a long-time ArcMap user with extensive experience in Python and .tbx development, I've encountered an issue when transitioning to ArcGIS Pro. In ArcMap 10.8, after editing my own imported  module .py files and running scripts, the tools utilize the updated code as anticipated. However, in ArcGIS Pro, making changes to a module's .py file and re-running .tbx script tools doesn't execute the new code. I've attempted refreshing the toolboxes and deleting all .pyc files within the module subdirectories, but neither approach results in the updated code being executed. The only workaround so far is to completely restart ArcGIS Pro, which is far from ideal and hinders development efficiency.\n\nI've searched for solutions online, but haven't had much luck. I found a related issue here (https://community.esri.com/t5/arcgis-pro-questions/python-cache-for-custom-toolbox-why/td-p/393227), but the proposed solution doesn't seem feasible for our codebase due to the complexity of imports. Reloading modules may not be a viable approach.\n\nI'm seeking advice from anyone who has experienced this issue or has a potential fix. Your assistance is greatly appreciated!", "id": "12yf2sh", "title": "ArcPro runs cached versions of imported module .py files."}, "resource": "Reddit"}]}